// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: tachibanapb/tachibana.proto

package tachibanapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0 // 未指定
	AccountType_ACCOUNT_TYPE_SPECIFIC    AccountType = 1 // 特定
	AccountType_ACCOUNT_TYPE_GENERAL     AccountType = 2 // 一般
	AccountType_ACCOUNT_TYPE_NISA        AccountType = 3 // NISA
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "ACCOUNT_TYPE_UNSPECIFIED",
		1: "ACCOUNT_TYPE_SPECIFIC",
		2: "ACCOUNT_TYPE_GENERAL",
		3: "ACCOUNT_TYPE_NISA",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED": 0,
		"ACCOUNT_TYPE_SPECIFIC":    1,
		"ACCOUNT_TYPE_GENERAL":     2,
		"ACCOUNT_TYPE_NISA":        3,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[0].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[0]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{0}
}

type SpecificAccountType int32

const (
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED SpecificAccountType = 0 // 未指定
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_GENERAL     SpecificAccountType = 1 // 一般
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_NOTHING     SpecificAccountType = 2 // 特定源泉徴収なし
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_WITHHOLDING SpecificAccountType = 3 // 特定源泉徴収あり
)

// Enum value maps for SpecificAccountType.
var (
	SpecificAccountType_name = map[int32]string{
		0: "SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED",
		1: "SPECIFIC_ACCOUNT_TYPE_GENERAL",
		2: "SPECIFIC_ACCOUNT_TYPE_NOTHING",
		3: "SPECIFIC_ACCOUNT_TYPE_WITHHOLDING",
	}
	SpecificAccountType_value = map[string]int32{
		"SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED": 0,
		"SPECIFIC_ACCOUNT_TYPE_GENERAL":     1,
		"SPECIFIC_ACCOUNT_TYPE_NOTHING":     2,
		"SPECIFIC_ACCOUNT_TYPE_WITHHOLDING": 3,
	}
)

func (x SpecificAccountType) Enum() *SpecificAccountType {
	p := new(SpecificAccountType)
	*p = x
	return p
}

func (x SpecificAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecificAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[1].Descriptor()
}

func (SpecificAccountType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[1]
}

func (x SpecificAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecificAccountType.Descriptor instead.
func (SpecificAccountType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{1}
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // ユーザID
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`           // パスワード
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{0}
}

func (x *LoginRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultCode                string                 `protobuf:"bytes,1,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`                                                                                       // 結果コード
	ResultText                string                 `protobuf:"bytes,2,opt,name=result_text,json=resultText,proto3" json:"result_text,omitempty"`                                                                                       // 結果テキスト
	AccountType               AccountType            `protobuf:"varint,3,opt,name=account_type,json=accountType,proto3,enum=tachibanapb.AccountType" json:"account_type,omitempty"`                                                      // 譲渡益課税区分
	SecondPasswordOmit        bool                   `protobuf:"varint,4,opt,name=second_password_omit,json=secondPasswordOmit,proto3" json:"second_password_omit,omitempty"`                                                            // 暗証番号省略有無C
	LastLoginDatetime         *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_login_datetime,json=lastLoginDatetime,proto3" json:"last_login_datetime,omitempty"`                                                                // 最終ログイン日時
	GeneralAccount            bool                   `protobuf:"varint,6,opt,name=general_account,json=generalAccount,proto3" json:"general_account,omitempty"`                                                                          // 総合口座開設区分
	SafekeepingAccount        bool                   `protobuf:"varint,7,opt,name=safekeeping_account,json=safekeepingAccount,proto3" json:"safekeeping_account,omitempty"`                                                              // 保護預り口座開設区分
	TransferAccount           bool                   `protobuf:"varint,8,opt,name=transfer_account,json=transferAccount,proto3" json:"transfer_account,omitempty"`                                                                       // 振替決済口座開設区分
	ForeignAccount            bool                   `protobuf:"varint,9,opt,name=foreign_account,json=foreignAccount,proto3" json:"foreign_account,omitempty"`                                                                          // 外国口座開設区分
	MrfAccount                bool                   `protobuf:"varint,10,opt,name=mrf_account,json=mrfAccount,proto3" json:"mrf_account,omitempty"`                                                                                     // MRF口座開設区分
	StockSpecificAccount      SpecificAccountType    `protobuf:"varint,11,opt,name=stock_specific_account,json=stockSpecificAccount,proto3,enum=tachibanapb.SpecificAccountType" json:"stock_specific_account,omitempty"`                // 特定口座区分現物
	MarginSpecificAccount     SpecificAccountType    `protobuf:"varint,12,opt,name=margin_specific_account,json=marginSpecificAccount,proto3,enum=tachibanapb.SpecificAccountType" json:"margin_specific_account,omitempty"`             // 特定口座区分信用
	InvestmentSpecificAccount SpecificAccountType    `protobuf:"varint,13,opt,name=investment_specific_account,json=investmentSpecificAccount,proto3,enum=tachibanapb.SpecificAccountType" json:"investment_specific_account,omitempty"` // 特定口座区分投信
	DividendAccount           bool                   `protobuf:"varint,14,opt,name=dividend_account,json=dividendAccount,proto3" json:"dividend_account,omitempty"`                                                                      // 配当特定口座区分
	SpecificAccount           bool                   `protobuf:"varint,15,opt,name=specific_account,json=specificAccount,proto3" json:"specific_account,omitempty"`                                                                      // 特定管理口座開設区分
	MarginAccount             bool                   `protobuf:"varint,16,opt,name=margin_account,json=marginAccount,proto3" json:"margin_account,omitempty"`                                                                            // 信用取引口座開設区分
	FutureOptionAccount       bool                   `protobuf:"varint,17,opt,name=future_option_account,json=futureOptionAccount,proto3" json:"future_option_account,omitempty"`                                                        // 先物OP口座開設区分
	MmfAccount                bool                   `protobuf:"varint,18,opt,name=mmf_account,json=mmfAccount,proto3" json:"mmf_account,omitempty"`                                                                                     // MMF口座開設区分
	ChinaForeignAccount       bool                   `protobuf:"varint,19,opt,name=china_foreign_account,json=chinaForeignAccount,proto3" json:"china_foreign_account,omitempty"`                                                        // 中国F口座開設区分
	FxAccount                 bool                   `protobuf:"varint,20,opt,name=fx_account,json=fxAccount,proto3" json:"fx_account,omitempty"`                                                                                        // 為替保証金口座開設区分
	NisaAccount               bool                   `protobuf:"varint,21,opt,name=nisa_account,json=nisaAccount,proto3" json:"nisa_account,omitempty"`                                                                                  // 非課税口座開設区分
	UnreadDocument            bool                   `protobuf:"varint,22,opt,name=unread_document,json=unreadDocument,proto3" json:"unread_document,omitempty"`                                                                         // 金商法交付書面未読フラグ
	Token                     string                 `protobuf:"bytes,23,opt,name=token,proto3" json:"token,omitempty"`                                                                                                                  // トークン
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{1}
}

func (x *LoginResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *LoginResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

func (x *LoginResponse) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetSecondPasswordOmit() bool {
	if x != nil {
		return x.SecondPasswordOmit
	}
	return false
}

func (x *LoginResponse) GetLastLoginDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLoginDatetime
	}
	return nil
}

func (x *LoginResponse) GetGeneralAccount() bool {
	if x != nil {
		return x.GeneralAccount
	}
	return false
}

func (x *LoginResponse) GetSafekeepingAccount() bool {
	if x != nil {
		return x.SafekeepingAccount
	}
	return false
}

func (x *LoginResponse) GetTransferAccount() bool {
	if x != nil {
		return x.TransferAccount
	}
	return false
}

func (x *LoginResponse) GetForeignAccount() bool {
	if x != nil {
		return x.ForeignAccount
	}
	return false
}

func (x *LoginResponse) GetMrfAccount() bool {
	if x != nil {
		return x.MrfAccount
	}
	return false
}

func (x *LoginResponse) GetStockSpecificAccount() SpecificAccountType {
	if x != nil {
		return x.StockSpecificAccount
	}
	return SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetMarginSpecificAccount() SpecificAccountType {
	if x != nil {
		return x.MarginSpecificAccount
	}
	return SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetInvestmentSpecificAccount() SpecificAccountType {
	if x != nil {
		return x.InvestmentSpecificAccount
	}
	return SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetDividendAccount() bool {
	if x != nil {
		return x.DividendAccount
	}
	return false
}

func (x *LoginResponse) GetSpecificAccount() bool {
	if x != nil {
		return x.SpecificAccount
	}
	return false
}

func (x *LoginResponse) GetMarginAccount() bool {
	if x != nil {
		return x.MarginAccount
	}
	return false
}

func (x *LoginResponse) GetFutureOptionAccount() bool {
	if x != nil {
		return x.FutureOptionAccount
	}
	return false
}

func (x *LoginResponse) GetMmfAccount() bool {
	if x != nil {
		return x.MmfAccount
	}
	return false
}

func (x *LoginResponse) GetChinaForeignAccount() bool {
	if x != nil {
		return x.ChinaForeignAccount
	}
	return false
}

func (x *LoginResponse) GetFxAccount() bool {
	if x != nil {
		return x.FxAccount
	}
	return false
}

func (x *LoginResponse) GetNisaAccount() bool {
	if x != nil {
		return x.NisaAccount
	}
	return false
}

func (x *LoginResponse) GetUnreadDocument() bool {
	if x != nil {
		return x.UnreadDocument
	}
	return false
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

var File_tachibanapb_tachibana_proto protoreflect.FileDescriptor

var file_tachibanapb_tachibana_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2f, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x43, 0x0a, 0x0c, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x22, 0xf6, 0x08, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6f, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4f,
	0x6d, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x6c, 0x61,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x61, 0x66, 0x65,
	0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x61, 0x66, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x69,
	0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x72, 0x66, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x6d, 0x72, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56,
	0x0a, 0x16, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x14, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x60, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x0a, 0x15, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6d, 0x66, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x6d, 0x66, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x78, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x78,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x69, 0x73, 0x61, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6e,
	0x69, 0x73, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x75, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2a, 0x77, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x49, 0x53, 0x41,
	0x10, 0x03, 0x2a, 0xa9, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x48, 0x4f, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x32, 0x52,
	0x0a, 0x10, 0x54, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tachibanapb_tachibana_proto_rawDescOnce sync.Once
	file_tachibanapb_tachibana_proto_rawDescData = file_tachibanapb_tachibana_proto_rawDesc
)

func file_tachibanapb_tachibana_proto_rawDescGZIP() []byte {
	file_tachibanapb_tachibana_proto_rawDescOnce.Do(func() {
		file_tachibanapb_tachibana_proto_rawDescData = protoimpl.X.CompressGZIP(file_tachibanapb_tachibana_proto_rawDescData)
	})
	return file_tachibanapb_tachibana_proto_rawDescData
}

var file_tachibanapb_tachibana_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tachibanapb_tachibana_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_tachibanapb_tachibana_proto_goTypes = []interface{}{
	(AccountType)(0),              // 0: tachibanapb.AccountType
	(SpecificAccountType)(0),      // 1: tachibanapb.SpecificAccountType
	(*LoginRequest)(nil),          // 2: tachibanapb.LoginRequest
	(*LoginResponse)(nil),         // 3: tachibanapb.LoginResponse
	(*timestamppb.Timestamp)(nil), // 4: google.protobuf.Timestamp
}
var file_tachibanapb_tachibana_proto_depIdxs = []int32{
	0, // 0: tachibanapb.LoginResponse.account_type:type_name -> tachibanapb.AccountType
	4, // 1: tachibanapb.LoginResponse.last_login_datetime:type_name -> google.protobuf.Timestamp
	1, // 2: tachibanapb.LoginResponse.stock_specific_account:type_name -> tachibanapb.SpecificAccountType
	1, // 3: tachibanapb.LoginResponse.margin_specific_account:type_name -> tachibanapb.SpecificAccountType
	1, // 4: tachibanapb.LoginResponse.investment_specific_account:type_name -> tachibanapb.SpecificAccountType
	2, // 5: tachibanapb.TachibanaService.Login:input_type -> tachibanapb.LoginRequest
	3, // 6: tachibanapb.TachibanaService.Login:output_type -> tachibanapb.LoginResponse
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_tachibanapb_tachibana_proto_init() }
func file_tachibanapb_tachibana_proto_init() {
	if File_tachibanapb_tachibana_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tachibanapb_tachibana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tachibanapb_tachibana_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tachibanapb_tachibana_proto_goTypes,
		DependencyIndexes: file_tachibanapb_tachibana_proto_depIdxs,
		EnumInfos:         file_tachibanapb_tachibana_proto_enumTypes,
		MessageInfos:      file_tachibanapb_tachibana_proto_msgTypes,
	}.Build()
	File_tachibanapb_tachibana_proto = out.File
	file_tachibanapb_tachibana_proto_rawDesc = nil
	file_tachibanapb_tachibana_proto_goTypes = nil
	file_tachibanapb_tachibana_proto_depIdxs = nil
}

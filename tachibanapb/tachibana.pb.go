// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: tachibanapb/tachibana.proto

package tachibanapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorNo int32

const (
	ErrorNo_ERROR_NO_UNSPECIFIED       ErrorNo = 0  // 未指定
	ErrorNo_ERROR_NO_NO_PROBLEM        ErrorNo = 1  // 問題なし
	ErrorNo_ERROR_NO_NO_DATA           ErrorNo = 2  // データなし
	ErrorNo_ERROR_NO_SESSION_INACTIVE  ErrorNo = 3  // 無効なセッション
	ErrorNo_ERROR_NO_PROGRESSED_NUMBER ErrorNo = 4  // 処理済みの送信通番
	ErrorNo_ERROR_NO_EXCEED_LIMIT_TIME ErrorNo = 5  // 送信日時からみたタイムアウト
	ErrorNo_ERROR_NO_SERVICE_OFFLINE   ErrorNo = 6  // サービス停止中
	ErrorNo_ERROR_NO_BAD_REQUEST       ErrorNo = 7  // 引数エラー
	ErrorNo_ERROR_NO_DATABASE_ACCESS   ErrorNo = 8  // データベースへのアクセスエラー
	ErrorNo_ERROR_NO_SERVER_ACCESS     ErrorNo = 9  // サーバへのアクセスエラー
	ErrorNo_ERROR_NO_SYSTEM_OFFLINE    ErrorNo = 10 // システム停止中
	ErrorNo_ERROR_NO_OFF_HOURS         ErrorNo = 11 // 情報提供時間外
)

// Enum value maps for ErrorNo.
var (
	ErrorNo_name = map[int32]string{
		0:  "ERROR_NO_UNSPECIFIED",
		1:  "ERROR_NO_NO_PROBLEM",
		2:  "ERROR_NO_NO_DATA",
		3:  "ERROR_NO_SESSION_INACTIVE",
		4:  "ERROR_NO_PROGRESSED_NUMBER",
		5:  "ERROR_NO_EXCEED_LIMIT_TIME",
		6:  "ERROR_NO_SERVICE_OFFLINE",
		7:  "ERROR_NO_BAD_REQUEST",
		8:  "ERROR_NO_DATABASE_ACCESS",
		9:  "ERROR_NO_SERVER_ACCESS",
		10: "ERROR_NO_SYSTEM_OFFLINE",
		11: "ERROR_NO_OFF_HOURS",
	}
	ErrorNo_value = map[string]int32{
		"ERROR_NO_UNSPECIFIED":       0,
		"ERROR_NO_NO_PROBLEM":        1,
		"ERROR_NO_NO_DATA":           2,
		"ERROR_NO_SESSION_INACTIVE":  3,
		"ERROR_NO_PROGRESSED_NUMBER": 4,
		"ERROR_NO_EXCEED_LIMIT_TIME": 5,
		"ERROR_NO_SERVICE_OFFLINE":   6,
		"ERROR_NO_BAD_REQUEST":       7,
		"ERROR_NO_DATABASE_ACCESS":   8,
		"ERROR_NO_SERVER_ACCESS":     9,
		"ERROR_NO_SYSTEM_OFFLINE":    10,
		"ERROR_NO_OFF_HOURS":         11,
	}
)

func (x ErrorNo) Enum() *ErrorNo {
	p := new(ErrorNo)
	*p = x
	return p
}

func (x ErrorNo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorNo) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[0].Descriptor()
}

func (ErrorNo) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[0]
}

func (x ErrorNo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorNo.Descriptor instead.
func (ErrorNo) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{0}
}

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED                    MessageType = 0  // 未指定
	MessageType_MESSAGE_TYPE_LOGIN_REQUEST                  MessageType = 1  // ログインリクエスト
	MessageType_MESSAGE_TYPE_LOGIN_RESPONSE                 MessageType = 2  // ログインレスポンス
	MessageType_MESSAGE_TYPE_LOGOUT_REQUEST                 MessageType = 3  // ログアウトリクエスト
	MessageType_MESSAGE_TYPE_LOGOUT_RESPONSE                MessageType = 4  // ログアウトレスポンス
	MessageType_MESSAGE_TYPE_NEW_ORDER                      MessageType = 5  // 新規注文
	MessageType_MESSAGE_TYPE_CORRECT_ORDER                  MessageType = 6  // 訂正注文
	MessageType_MESSAGE_TYPE_CANCEL_ORDER                   MessageType = 7  // 取消注文
	MessageType_MESSAGE_TYPE_STOCK_POSITION_LIST            MessageType = 8  // 現物保有銘柄一覧
	MessageType_MESSAGE_TYPE_MARGIN_POSITION_LIST           MessageType = 9  // 信用建玉一覧
	MessageType_MESSAGE_TYPE_STOCK_WALLET                   MessageType = 10 // 買余力
	MessageType_MESSAGE_TYPE_MARGIN_WALLET                  MessageType = 11 // 建余力&本日維持率
	MessageType_MESSAGE_TYPE_STOCK_SELLABLE                 MessageType = 12 // 売却可能数量
	MessageType_MESSAGE_TYPE_ORDER_LIST                     MessageType = 13 // 注文一覧
	MessageType_MESSAGE_TYPE_ORDER_DETAIL                   MessageType = 14 // 注文約定一覧(詳細)
	MessageType_MESSAGE_TYPE_SUMMARY                        MessageType = 15 // 可能額サマリー
	MessageType_MESSAGE_TYPE_SUMMARY_RECORD                 MessageType = 16 // 可能額推移
	MessageType_MESSAGE_TYPE_STOCK_ENTRY_DETAIL             MessageType = 17 // 現物株式買付可能額詳細
	MessageType_MESSAGE_TYPE_MARGIN_ENTRY_DETAIL            MessageType = 18 // 信用新規建て可能額詳細
	MessageType_MESSAGE_TYPE_DEPOSIT_RATE                   MessageType = 19 // リアル保証金率
	MessageType_MESSAGE_TYPE_EVENT_DOWNLOAD                 MessageType = 20 // マスタ情報ダウンロード
	MessageType_MESSAGE_TYPE_EVENT_SYSTEM_STATUS            MessageType = 21 // システムステータス
	MessageType_MESSAGE_TYPE_BUSINESS_DAY                   MessageType = 22 // 日付情報
	MessageType_MESSAGE_TYPE_TICK_GROUP                     MessageType = 23 // 呼値
	MessageType_MESSAGE_TYPE_EVENT_OPERATION_STATUS         MessageType = 24 // 運用ステータス別状態
	MessageType_MESSAGE_TYPE_EVENT_STOCK_OPERATION_STATUS   MessageType = 25 // 運用ステータス(株式)
	MessageType_MESSAGE_TYPE_EVENT_PRODUCT_OPERATION_STATUS MessageType = 26 // 運用運用ステータス(派生)
	MessageType_MESSAGE_TYPE_STOCK_MASTER                   MessageType = 27 // 株式銘柄マスタ
	MessageType_MESSAGE_TYPE_STOCK_EXCHANGE_MASTER          MessageType = 28 // 株式銘柄市場マスタ
	MessageType_MESSAGE_TYPE_EVENT_STOCK_REGULATION         MessageType = 29 // 株式銘柄別・市場別規制
	MessageType_MESSAGE_TYPE_EVENT_FUTURE_MASTER            MessageType = 30 // 先物銘柄マスタ
	MessageType_MESSAGE_TYPE_EVENT_OPTION_MASTER            MessageType = 31 // オプション銘柄マスタ
	MessageType_MESSAGE_TYPE_EVENT_EXCHANGE_REGULATION      MessageType = 32 // 派生銘柄別・市場別規制
	MessageType_MESSAGE_TYPE_EVENT_SUBSTITUTE               MessageType = 33 // 代用掛目
	MessageType_MESSAGE_TYPE_EVENT_DEPOSIT_MASTER           MessageType = 34 // 保証金マスタ
	MessageType_MESSAGE_TYPE_EVENT_ERROR_REASON             MessageType = 35 // 取引所エラー等理由コード
	MessageType_MESSAGE_TYPE_EVENT_DOWNLOAD_COMPLETE        MessageType = 36 // 初期ダウンロード終了通知
	MessageType_MESSAGE_TYPE_MASTER_DATA                    MessageType = 37 // マスタ情報
	MessageType_MESSAGE_TYPE_MARKET_PRICE                   MessageType = 38 // 時価関連情報
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "MESSAGE_TYPE_UNSPECIFIED",
		1:  "MESSAGE_TYPE_LOGIN_REQUEST",
		2:  "MESSAGE_TYPE_LOGIN_RESPONSE",
		3:  "MESSAGE_TYPE_LOGOUT_REQUEST",
		4:  "MESSAGE_TYPE_LOGOUT_RESPONSE",
		5:  "MESSAGE_TYPE_NEW_ORDER",
		6:  "MESSAGE_TYPE_CORRECT_ORDER",
		7:  "MESSAGE_TYPE_CANCEL_ORDER",
		8:  "MESSAGE_TYPE_STOCK_POSITION_LIST",
		9:  "MESSAGE_TYPE_MARGIN_POSITION_LIST",
		10: "MESSAGE_TYPE_STOCK_WALLET",
		11: "MESSAGE_TYPE_MARGIN_WALLET",
		12: "MESSAGE_TYPE_STOCK_SELLABLE",
		13: "MESSAGE_TYPE_ORDER_LIST",
		14: "MESSAGE_TYPE_ORDER_DETAIL",
		15: "MESSAGE_TYPE_SUMMARY",
		16: "MESSAGE_TYPE_SUMMARY_RECORD",
		17: "MESSAGE_TYPE_STOCK_ENTRY_DETAIL",
		18: "MESSAGE_TYPE_MARGIN_ENTRY_DETAIL",
		19: "MESSAGE_TYPE_DEPOSIT_RATE",
		20: "MESSAGE_TYPE_EVENT_DOWNLOAD",
		21: "MESSAGE_TYPE_EVENT_SYSTEM_STATUS",
		22: "MESSAGE_TYPE_BUSINESS_DAY",
		23: "MESSAGE_TYPE_TICK_GROUP",
		24: "MESSAGE_TYPE_EVENT_OPERATION_STATUS",
		25: "MESSAGE_TYPE_EVENT_STOCK_OPERATION_STATUS",
		26: "MESSAGE_TYPE_EVENT_PRODUCT_OPERATION_STATUS",
		27: "MESSAGE_TYPE_STOCK_MASTER",
		28: "MESSAGE_TYPE_STOCK_EXCHANGE_MASTER",
		29: "MESSAGE_TYPE_EVENT_STOCK_REGULATION",
		30: "MESSAGE_TYPE_EVENT_FUTURE_MASTER",
		31: "MESSAGE_TYPE_EVENT_OPTION_MASTER",
		32: "MESSAGE_TYPE_EVENT_EXCHANGE_REGULATION",
		33: "MESSAGE_TYPE_EVENT_SUBSTITUTE",
		34: "MESSAGE_TYPE_EVENT_DEPOSIT_MASTER",
		35: "MESSAGE_TYPE_EVENT_ERROR_REASON",
		36: "MESSAGE_TYPE_EVENT_DOWNLOAD_COMPLETE",
		37: "MESSAGE_TYPE_MASTER_DATA",
		38: "MESSAGE_TYPE_MARKET_PRICE",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED":                    0,
		"MESSAGE_TYPE_LOGIN_REQUEST":                  1,
		"MESSAGE_TYPE_LOGIN_RESPONSE":                 2,
		"MESSAGE_TYPE_LOGOUT_REQUEST":                 3,
		"MESSAGE_TYPE_LOGOUT_RESPONSE":                4,
		"MESSAGE_TYPE_NEW_ORDER":                      5,
		"MESSAGE_TYPE_CORRECT_ORDER":                  6,
		"MESSAGE_TYPE_CANCEL_ORDER":                   7,
		"MESSAGE_TYPE_STOCK_POSITION_LIST":            8,
		"MESSAGE_TYPE_MARGIN_POSITION_LIST":           9,
		"MESSAGE_TYPE_STOCK_WALLET":                   10,
		"MESSAGE_TYPE_MARGIN_WALLET":                  11,
		"MESSAGE_TYPE_STOCK_SELLABLE":                 12,
		"MESSAGE_TYPE_ORDER_LIST":                     13,
		"MESSAGE_TYPE_ORDER_DETAIL":                   14,
		"MESSAGE_TYPE_SUMMARY":                        15,
		"MESSAGE_TYPE_SUMMARY_RECORD":                 16,
		"MESSAGE_TYPE_STOCK_ENTRY_DETAIL":             17,
		"MESSAGE_TYPE_MARGIN_ENTRY_DETAIL":            18,
		"MESSAGE_TYPE_DEPOSIT_RATE":                   19,
		"MESSAGE_TYPE_EVENT_DOWNLOAD":                 20,
		"MESSAGE_TYPE_EVENT_SYSTEM_STATUS":            21,
		"MESSAGE_TYPE_BUSINESS_DAY":                   22,
		"MESSAGE_TYPE_TICK_GROUP":                     23,
		"MESSAGE_TYPE_EVENT_OPERATION_STATUS":         24,
		"MESSAGE_TYPE_EVENT_STOCK_OPERATION_STATUS":   25,
		"MESSAGE_TYPE_EVENT_PRODUCT_OPERATION_STATUS": 26,
		"MESSAGE_TYPE_STOCK_MASTER":                   27,
		"MESSAGE_TYPE_STOCK_EXCHANGE_MASTER":          28,
		"MESSAGE_TYPE_EVENT_STOCK_REGULATION":         29,
		"MESSAGE_TYPE_EVENT_FUTURE_MASTER":            30,
		"MESSAGE_TYPE_EVENT_OPTION_MASTER":            31,
		"MESSAGE_TYPE_EVENT_EXCHANGE_REGULATION":      32,
		"MESSAGE_TYPE_EVENT_SUBSTITUTE":               33,
		"MESSAGE_TYPE_EVENT_DEPOSIT_MASTER":           34,
		"MESSAGE_TYPE_EVENT_ERROR_REASON":             35,
		"MESSAGE_TYPE_EVENT_DOWNLOAD_COMPLETE":        36,
		"MESSAGE_TYPE_MASTER_DATA":                    37,
		"MESSAGE_TYPE_MARKET_PRICE":                   38,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[1].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[1]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{1}
}

type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0 // 未指定
	AccountType_ACCOUNT_TYPE_SPECIFIC    AccountType = 1 // 特定
	AccountType_ACCOUNT_TYPE_GENERAL     AccountType = 2 // 一般
	AccountType_ACCOUNT_TYPE_NISA        AccountType = 3 // NISA
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "ACCOUNT_TYPE_UNSPECIFIED",
		1: "ACCOUNT_TYPE_SPECIFIC",
		2: "ACCOUNT_TYPE_GENERAL",
		3: "ACCOUNT_TYPE_NISA",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED": 0,
		"ACCOUNT_TYPE_SPECIFIC":    1,
		"ACCOUNT_TYPE_GENERAL":     2,
		"ACCOUNT_TYPE_NISA":        3,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[2].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[2]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{2}
}

type SpecificAccountType int32

const (
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED SpecificAccountType = 0 // 未指定
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_GENERAL     SpecificAccountType = 1 // 一般
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_NOTHING     SpecificAccountType = 2 // 特定源泉徴収なし
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_WITHHOLDING SpecificAccountType = 3 // 特定源泉徴収あり
)

// Enum value maps for SpecificAccountType.
var (
	SpecificAccountType_name = map[int32]string{
		0: "SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED",
		1: "SPECIFIC_ACCOUNT_TYPE_GENERAL",
		2: "SPECIFIC_ACCOUNT_TYPE_NOTHING",
		3: "SPECIFIC_ACCOUNT_TYPE_WITHHOLDING",
	}
	SpecificAccountType_value = map[string]int32{
		"SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED": 0,
		"SPECIFIC_ACCOUNT_TYPE_GENERAL":     1,
		"SPECIFIC_ACCOUNT_TYPE_NOTHING":     2,
		"SPECIFIC_ACCOUNT_TYPE_WITHHOLDING": 3,
	}
)

func (x SpecificAccountType) Enum() *SpecificAccountType {
	p := new(SpecificAccountType)
	*p = x
	return p
}

func (x SpecificAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecificAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[3].Descriptor()
}

func (SpecificAccountType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[3]
}

func (x SpecificAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecificAccountType.Descriptor instead.
func (SpecificAccountType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{3}
}

type DeliveryAccountType int32

const (
	DeliveryAccountType_DELIVERY_ACCOUNT_TYPE_UNSPECIFIED DeliveryAccountType = 0 // 未指定
	DeliveryAccountType_DELIVERY_ACCOUNT_TYPE_UNUSED      DeliveryAccountType = 1 // 信用の場合のみ現引、現渡以外の取引
	DeliveryAccountType_DELIVERY_ACCOUNT_TYPE_SPECIFIC    DeliveryAccountType = 2 // 特定
	DeliveryAccountType_DELIVERY_ACCOUNT_TYPE_GENERAL     DeliveryAccountType = 3 // 一般
	DeliveryAccountType_DELIVERY_ACCOUNT_TYPE_NISA        DeliveryAccountType = 4 // NISA
)

// Enum value maps for DeliveryAccountType.
var (
	DeliveryAccountType_name = map[int32]string{
		0: "DELIVERY_ACCOUNT_TYPE_UNSPECIFIED",
		1: "DELIVERY_ACCOUNT_TYPE_UNUSED",
		2: "DELIVERY_ACCOUNT_TYPE_SPECIFIC",
		3: "DELIVERY_ACCOUNT_TYPE_GENERAL",
		4: "DELIVERY_ACCOUNT_TYPE_NISA",
	}
	DeliveryAccountType_value = map[string]int32{
		"DELIVERY_ACCOUNT_TYPE_UNSPECIFIED": 0,
		"DELIVERY_ACCOUNT_TYPE_UNUSED":      1,
		"DELIVERY_ACCOUNT_TYPE_SPECIFIC":    2,
		"DELIVERY_ACCOUNT_TYPE_GENERAL":     3,
		"DELIVERY_ACCOUNT_TYPE_NISA":        4,
	}
)

func (x DeliveryAccountType) Enum() *DeliveryAccountType {
	p := new(DeliveryAccountType)
	*p = x
	return p
}

func (x DeliveryAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveryAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[4].Descriptor()
}

func (DeliveryAccountType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[4]
}

func (x DeliveryAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveryAccountType.Descriptor instead.
func (DeliveryAccountType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{4}
}

type Exchange int32

const (
	Exchange_EXCHANGE_UNSPECIFIED Exchange = 0 // 未指定
	Exchange_EXCHANGE_TOUSHOU     Exchange = 1 // 東証
	Exchange_EXCHANGE_MEISHOU     Exchange = 2 // 名証
	Exchange_EXCHANGE_FUKUSHOU    Exchange = 3 // 福証
	Exchange_EXCHANGE_SATSUSHOU   Exchange = 4 // 札証
	Exchange_EXCHANGE_STOPPING    Exchange = 5 // 取引不可
)

// Enum value maps for Exchange.
var (
	Exchange_name = map[int32]string{
		0: "EXCHANGE_UNSPECIFIED",
		1: "EXCHANGE_TOUSHOU",
		2: "EXCHANGE_MEISHOU",
		3: "EXCHANGE_FUKUSHOU",
		4: "EXCHANGE_SATSUSHOU",
		5: "EXCHANGE_STOPPING",
	}
	Exchange_value = map[string]int32{
		"EXCHANGE_UNSPECIFIED": 0,
		"EXCHANGE_TOUSHOU":     1,
		"EXCHANGE_MEISHOU":     2,
		"EXCHANGE_FUKUSHOU":    3,
		"EXCHANGE_SATSUSHOU":   4,
		"EXCHANGE_STOPPING":    5,
	}
)

func (x Exchange) Enum() *Exchange {
	p := new(Exchange)
	*p = x
	return p
}

func (x Exchange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Exchange) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[5].Descriptor()
}

func (Exchange) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[5]
}

func (x Exchange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Exchange.Descriptor instead.
func (Exchange) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{5}
}

type Side int32

const (
	Side_SIDE_UNSPECIFIED Side = 0 // 未指定
	Side_SIDE_SELL        Side = 1 // 売
	Side_SIDE_BUY         Side = 2 // 買
	Side_SIDE_DELIVERY    Side = 3 // 現渡
	Side_SIDE_RECEIPT     Side = 4 // 現引
)

// Enum value maps for Side.
var (
	Side_name = map[int32]string{
		0: "SIDE_UNSPECIFIED",
		1: "SIDE_SELL",
		2: "SIDE_BUY",
		3: "SIDE_DELIVERY",
		4: "SIDE_RECEIPT",
	}
	Side_value = map[string]int32{
		"SIDE_UNSPECIFIED": 0,
		"SIDE_SELL":        1,
		"SIDE_BUY":         2,
		"SIDE_DELIVERY":    3,
		"SIDE_RECEIPT":     4,
	}
)

func (x Side) Enum() *Side {
	p := new(Side)
	*p = x
	return p
}

func (x Side) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Side) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[6].Descriptor()
}

func (Side) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[6]
}

func (x Side) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Side.Descriptor instead.
func (Side) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{6}
}

type ExecutionTiming int32

const (
	ExecutionTiming_EXECUTION_TIMING_UNSPECIFIED ExecutionTiming = 0 // 未指定
	ExecutionTiming_EXECUTION_TIMING_NO_CHANGE   ExecutionTiming = 1 // 変更なし
	ExecutionTiming_EXECUTION_TIMING_NORMAL      ExecutionTiming = 2 // 指定なし
	ExecutionTiming_EXECUTION_TIMING_OPENING     ExecutionTiming = 3 // 寄付
	ExecutionTiming_EXECUTION_TIMING_CLOSING     ExecutionTiming = 4 // 引け
	ExecutionTiming_EXECUTION_TIMING_FUNARI      ExecutionTiming = 5 // 不成
)

// Enum value maps for ExecutionTiming.
var (
	ExecutionTiming_name = map[int32]string{
		0: "EXECUTION_TIMING_UNSPECIFIED",
		1: "EXECUTION_TIMING_NO_CHANGE",
		2: "EXECUTION_TIMING_NORMAL",
		3: "EXECUTION_TIMING_OPENING",
		4: "EXECUTION_TIMING_CLOSING",
		5: "EXECUTION_TIMING_FUNARI",
	}
	ExecutionTiming_value = map[string]int32{
		"EXECUTION_TIMING_UNSPECIFIED": 0,
		"EXECUTION_TIMING_NO_CHANGE":   1,
		"EXECUTION_TIMING_NORMAL":      2,
		"EXECUTION_TIMING_OPENING":     3,
		"EXECUTION_TIMING_CLOSING":     4,
		"EXECUTION_TIMING_FUNARI":      5,
	}
)

func (x ExecutionTiming) Enum() *ExecutionTiming {
	p := new(ExecutionTiming)
	*p = x
	return p
}

func (x ExecutionTiming) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionTiming) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[7].Descriptor()
}

func (ExecutionTiming) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[7]
}

func (x ExecutionTiming) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionTiming.Descriptor instead.
func (ExecutionTiming) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{7}
}

type TradeType int32

const (
	TradeType_TRADE_TYPE_UNSPECIFIED     TradeType = 0 // 未指定
	TradeType_TRADE_TYPE_STOCK           TradeType = 1 // 現物
	TradeType_TRADE_TYPE_STANDARD_ENTRY  TradeType = 2 // 新規(制度信用6ヶ月)
	TradeType_TRADE_TYPE_STANDARD_EXIT   TradeType = 3 // 返済(制度信用6ヶ月)
	TradeType_TRADE_TYPE_NEGOTIATE_ENTRY TradeType = 4 // 新規(一般信用6ヶ月)
	TradeType_TRADE_TYPE_NEGOTIATE_EXIT  TradeType = 5 // 返済(一般信用6ヶ月)
)

// Enum value maps for TradeType.
var (
	TradeType_name = map[int32]string{
		0: "TRADE_TYPE_UNSPECIFIED",
		1: "TRADE_TYPE_STOCK",
		2: "TRADE_TYPE_STANDARD_ENTRY",
		3: "TRADE_TYPE_STANDARD_EXIT",
		4: "TRADE_TYPE_NEGOTIATE_ENTRY",
		5: "TRADE_TYPE_NEGOTIATE_EXIT",
	}
	TradeType_value = map[string]int32{
		"TRADE_TYPE_UNSPECIFIED":     0,
		"TRADE_TYPE_STOCK":           1,
		"TRADE_TYPE_STANDARD_ENTRY":  2,
		"TRADE_TYPE_STANDARD_EXIT":   3,
		"TRADE_TYPE_NEGOTIATE_ENTRY": 4,
		"TRADE_TYPE_NEGOTIATE_EXIT":  5,
	}
)

func (x TradeType) Enum() *TradeType {
	p := new(TradeType)
	*p = x
	return p
}

func (x TradeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[8].Descriptor()
}

func (TradeType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[8]
}

func (x TradeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeType.Descriptor instead.
func (TradeType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{8}
}

type StopOrderType int32

const (
	StopOrderType_STOP_ORDER_TYPE_UNSPECIFIED StopOrderType = 0 // 未指定
	StopOrderType_STOP_ORDER_TYPE_NORMAL      StopOrderType = 1 // 通常
	StopOrderType_STOP_ORDER_TYPE_STOP        StopOrderType = 2 // 逆指値
	StopOrderType_STOP_ORDER_TYPE_OCO         StopOrderType = 3 // 通常 + 逆指値
)

// Enum value maps for StopOrderType.
var (
	StopOrderType_name = map[int32]string{
		0: "STOP_ORDER_TYPE_UNSPECIFIED",
		1: "STOP_ORDER_TYPE_NORMAL",
		2: "STOP_ORDER_TYPE_STOP",
		3: "STOP_ORDER_TYPE_OCO",
	}
	StopOrderType_value = map[string]int32{
		"STOP_ORDER_TYPE_UNSPECIFIED": 0,
		"STOP_ORDER_TYPE_NORMAL":      1,
		"STOP_ORDER_TYPE_STOP":        2,
		"STOP_ORDER_TYPE_OCO":         3,
	}
)

func (x StopOrderType) Enum() *StopOrderType {
	p := new(StopOrderType)
	*p = x
	return p
}

func (x StopOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[9].Descriptor()
}

func (StopOrderType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[9]
}

func (x StopOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopOrderType.Descriptor instead.
func (StopOrderType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{9}
}

type ExitPositionType int32

const (
	ExitPositionType_EXIT_POSITION_TYPE_UNSPECIFIED     ExitPositionType = 0 // 未指定
	ExitPositionType_EXIT_POSITION_TYPE_NO_SELECTED     ExitPositionType = 1 // 指定なし(現物または新規)
	ExitPositionType_EXIT_POSITION_TYPE_UNUSED          ExitPositionType = 2 // 未使用
	ExitPositionType_EXIT_POSITION_TYPE_POSITION_NUMBER ExitPositionType = 3 // 個別指定
	ExitPositionType_EXIT_POSITION_TYPE_DAY_ASC         ExitPositionType = 4 // 建日順
	ExitPositionType_EXIT_POSITION_TYPE_PROFIT_DESC     ExitPositionType = 5 // 単価益順
	ExitPositionType_EXIT_POSITION_TYPE_PROFIT_ASC      ExitPositionType = 6 // 単価損順
)

// Enum value maps for ExitPositionType.
var (
	ExitPositionType_name = map[int32]string{
		0: "EXIT_POSITION_TYPE_UNSPECIFIED",
		1: "EXIT_POSITION_TYPE_NO_SELECTED",
		2: "EXIT_POSITION_TYPE_UNUSED",
		3: "EXIT_POSITION_TYPE_POSITION_NUMBER",
		4: "EXIT_POSITION_TYPE_DAY_ASC",
		5: "EXIT_POSITION_TYPE_PROFIT_DESC",
		6: "EXIT_POSITION_TYPE_PROFIT_ASC",
	}
	ExitPositionType_value = map[string]int32{
		"EXIT_POSITION_TYPE_UNSPECIFIED":     0,
		"EXIT_POSITION_TYPE_NO_SELECTED":     1,
		"EXIT_POSITION_TYPE_UNUSED":          2,
		"EXIT_POSITION_TYPE_POSITION_NUMBER": 3,
		"EXIT_POSITION_TYPE_DAY_ASC":         4,
		"EXIT_POSITION_TYPE_PROFIT_DESC":     5,
		"EXIT_POSITION_TYPE_PROFIT_ASC":      6,
	}
)

func (x ExitPositionType) Enum() *ExitPositionType {
	p := new(ExitPositionType)
	*p = x
	return p
}

func (x ExitPositionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExitPositionType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[10].Descriptor()
}

func (ExitPositionType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[10]
}

func (x ExitPositionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExitPositionType.Descriptor instead.
func (ExitPositionType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{10}
}

type OrderInquiryStatus int32

const (
	OrderInquiryStatus_ORDER_INQUIRY_STATUS_UNSPECIFIED   OrderInquiryStatus = 0 // 未指定
	OrderInquiryStatus_ORDER_INQUIRY_STATUS_IN_ORDER      OrderInquiryStatus = 1 // 未約定・注文中
	OrderInquiryStatus_ORDER_INQUIRY_STATUS_DONE          OrderInquiryStatus = 2 // 全部約定
	OrderInquiryStatus_ORDER_INQUIRY_STATUS_PART          OrderInquiryStatus = 3 // 部分約定
	OrderInquiryStatus_ORDER_INQUIRY_STATUS_EDITABLE      OrderInquiryStatus = 4 // 訂正取消可能な注文
	OrderInquiryStatus_ORDER_INQUIRY_STATUS_PART_IN_ORDER OrderInquiryStatus = 5 // 未約定 + 一部約定
)

// Enum value maps for OrderInquiryStatus.
var (
	OrderInquiryStatus_name = map[int32]string{
		0: "ORDER_INQUIRY_STATUS_UNSPECIFIED",
		1: "ORDER_INQUIRY_STATUS_IN_ORDER",
		2: "ORDER_INQUIRY_STATUS_DONE",
		3: "ORDER_INQUIRY_STATUS_PART",
		4: "ORDER_INQUIRY_STATUS_EDITABLE",
		5: "ORDER_INQUIRY_STATUS_PART_IN_ORDER",
	}
	OrderInquiryStatus_value = map[string]int32{
		"ORDER_INQUIRY_STATUS_UNSPECIFIED":   0,
		"ORDER_INQUIRY_STATUS_IN_ORDER":      1,
		"ORDER_INQUIRY_STATUS_DONE":          2,
		"ORDER_INQUIRY_STATUS_PART":          3,
		"ORDER_INQUIRY_STATUS_EDITABLE":      4,
		"ORDER_INQUIRY_STATUS_PART_IN_ORDER": 5,
	}
)

func (x OrderInquiryStatus) Enum() *OrderInquiryStatus {
	p := new(OrderInquiryStatus)
	*p = x
	return p
}

func (x OrderInquiryStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderInquiryStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[11].Descriptor()
}

func (OrderInquiryStatus) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[11]
}

func (x OrderInquiryStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderInquiryStatus.Descriptor instead.
func (OrderInquiryStatus) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{11}
}

type ExitTermType int32

const (
	ExitTermType_EXIT_TERM_TYPE_UNSPECIFIED               ExitTermType = 0 // 未指定
	ExitTermType_EXIT_TERM_TYPE_NO_LIMIT                  ExitTermType = 1 // 期限なし
	ExitTermType_EXIT_TERM_TYPE_STANDARD_MARGIN_6M        ExitTermType = 2 // 制度信用6ヶ月
	ExitTermType_EXIT_TERM_TYPE_STANDARD_MARGIN_NO_LIMIT  ExitTermType = 3 // 制度信用無期限
	ExitTermType_EXIT_TERM_TYPE_NEGOTIATE_MARGIN_6M       ExitTermType = 4 // 一般信用6ヶ月
	ExitTermType_EXIT_TERM_TYPE_NEGOTIATE_MARGIN_NO_LIMIT ExitTermType = 5 // 一般信用無期限
)

// Enum value maps for ExitTermType.
var (
	ExitTermType_name = map[int32]string{
		0: "EXIT_TERM_TYPE_UNSPECIFIED",
		1: "EXIT_TERM_TYPE_NO_LIMIT",
		2: "EXIT_TERM_TYPE_STANDARD_MARGIN_6M",
		3: "EXIT_TERM_TYPE_STANDARD_MARGIN_NO_LIMIT",
		4: "EXIT_TERM_TYPE_NEGOTIATE_MARGIN_6M",
		5: "EXIT_TERM_TYPE_NEGOTIATE_MARGIN_NO_LIMIT",
	}
	ExitTermType_value = map[string]int32{
		"EXIT_TERM_TYPE_UNSPECIFIED":               0,
		"EXIT_TERM_TYPE_NO_LIMIT":                  1,
		"EXIT_TERM_TYPE_STANDARD_MARGIN_6M":        2,
		"EXIT_TERM_TYPE_STANDARD_MARGIN_NO_LIMIT":  3,
		"EXIT_TERM_TYPE_NEGOTIATE_MARGIN_6M":       4,
		"EXIT_TERM_TYPE_NEGOTIATE_MARGIN_NO_LIMIT": 5,
	}
)

func (x ExitTermType) Enum() *ExitTermType {
	p := new(ExitTermType)
	*p = x
	return p
}

func (x ExitTermType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExitTermType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[12].Descriptor()
}

func (ExitTermType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[12]
}

func (x ExitTermType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExitTermType.Descriptor instead.
func (ExitTermType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{12}
}

type ExecutionType int32

const (
	ExecutionType_EXECUTION_TYPE_UNSPECIFIED ExecutionType = 0 // 未指定
	ExecutionType_EXECUTION_TYPE_UNUSED      ExecutionType = 1 // 未使用
	ExecutionType_EXECUTION_TYPE_MARKET      ExecutionType = 2 // 成行
	ExecutionType_EXECUTION_TYPE_LIMIT       ExecutionType = 3 // 指値
	ExecutionType_EXECUTION_TYPE_HIGHER      ExecutionType = 4 // 親注文より高い
	ExecutionType_EXECUTION_TYPE_LOWER       ExecutionType = 5 // 親注文より低い
)

// Enum value maps for ExecutionType.
var (
	ExecutionType_name = map[int32]string{
		0: "EXECUTION_TYPE_UNSPECIFIED",
		1: "EXECUTION_TYPE_UNUSED",
		2: "EXECUTION_TYPE_MARKET",
		3: "EXECUTION_TYPE_LIMIT",
		4: "EXECUTION_TYPE_HIGHER",
		5: "EXECUTION_TYPE_LOWER",
	}
	ExecutionType_value = map[string]int32{
		"EXECUTION_TYPE_UNSPECIFIED": 0,
		"EXECUTION_TYPE_UNUSED":      1,
		"EXECUTION_TYPE_MARKET":      2,
		"EXECUTION_TYPE_LIMIT":       3,
		"EXECUTION_TYPE_HIGHER":      4,
		"EXECUTION_TYPE_LOWER":       5,
	}
)

func (x ExecutionType) Enum() *ExecutionType {
	p := new(ExecutionType)
	*p = x
	return p
}

func (x ExecutionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[13].Descriptor()
}

func (ExecutionType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[13]
}

func (x ExecutionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExecutionType.Descriptor instead.
func (ExecutionType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{13}
}

type TriggerType int32

const (
	TriggerType_TRIGGER_TYPE_UNSPECIFIED    TriggerType = 0 // 未指定
	TriggerType_TRIGGER_TYPE_NO_FIRED       TriggerType = 1 // 未発火
	TriggerType_TRIGGER_TYPE_AUTO           TriggerType = 2 // 自動
	TriggerType_TRIGGER_TYPE_MANUAL_ORDER   TriggerType = 3 // 手動発注
	TriggerType_TRIGGER_TYPE_MANUAL_EXPIRED TriggerType = 4 // 手動失効
)

// Enum value maps for TriggerType.
var (
	TriggerType_name = map[int32]string{
		0: "TRIGGER_TYPE_UNSPECIFIED",
		1: "TRIGGER_TYPE_NO_FIRED",
		2: "TRIGGER_TYPE_AUTO",
		3: "TRIGGER_TYPE_MANUAL_ORDER",
		4: "TRIGGER_TYPE_MANUAL_EXPIRED",
	}
	TriggerType_value = map[string]int32{
		"TRIGGER_TYPE_UNSPECIFIED":    0,
		"TRIGGER_TYPE_NO_FIRED":       1,
		"TRIGGER_TYPE_AUTO":           2,
		"TRIGGER_TYPE_MANUAL_ORDER":   3,
		"TRIGGER_TYPE_MANUAL_EXPIRED": 4,
	}
)

func (x TriggerType) Enum() *TriggerType {
	p := new(TriggerType)
	*p = x
	return p
}

func (x TriggerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TriggerType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[14].Descriptor()
}

func (TriggerType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[14]
}

func (x TriggerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TriggerType.Descriptor instead.
func (TriggerType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{14}
}

type PartContractType int32

const (
	PartContractType_PART_CONTRACT_TYPE_UNSPECIFIED PartContractType = 0 // 未指定
	PartContractType_PART_CONTRACT_TYPE_UNUSED      PartContractType = 1 // 未使用
	PartContractType_PART_CONTRACT_TYPE_PART        PartContractType = 2 // 分割約定
)

// Enum value maps for PartContractType.
var (
	PartContractType_name = map[int32]string{
		0: "PART_CONTRACT_TYPE_UNSPECIFIED",
		1: "PART_CONTRACT_TYPE_UNUSED",
		2: "PART_CONTRACT_TYPE_PART",
	}
	PartContractType_value = map[string]int32{
		"PART_CONTRACT_TYPE_UNSPECIFIED": 0,
		"PART_CONTRACT_TYPE_UNUSED":      1,
		"PART_CONTRACT_TYPE_PART":        2,
	}
)

func (x PartContractType) Enum() *PartContractType {
	p := new(PartContractType)
	*p = x
	return p
}

func (x PartContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[15].Descriptor()
}

func (PartContractType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[15]
}

func (x PartContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartContractType.Descriptor instead.
func (PartContractType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{15}
}

type OrderStatus int32

const (
	OrderStatus_ORDER_STATUS_UNSPECIFIED      OrderStatus = 0  // 未指定
	OrderStatus_ORDER_STATUS_RECEIVED         OrderStatus = 1  // 受付未済
	OrderStatus_ORDER_STATUS_IN_ORDER         OrderStatus = 2  // 未約定
	OrderStatus_ORDER_STATUS_ERROR            OrderStatus = 3  // 受付エラー
	OrderStatus_ORDER_STATUS_IN_CORRECT       OrderStatus = 4  // 訂正中
	OrderStatus_ORDER_STATUS_CORRECTED        OrderStatus = 5  // 訂正完了
	OrderStatus_ORDER_STATUS_CORRECT_FAILED   OrderStatus = 6  // 訂正失敗
	OrderStatus_ORDER_STATUS_IN_CANCEL        OrderStatus = 7  // 取消中
	OrderStatus_ORDER_STATUS_CANCELED         OrderStatus = 8  // 取消完了
	OrderStatus_ORDER_STATUS_CANCEL_FAILED    OrderStatus = 9  // 取消失敗
	OrderStatus_ORDER_STATUS_PART             OrderStatus = 10 // 一部約定
	OrderStatus_ORDER_STATUS_DONE             OrderStatus = 11 // 全部約定
	OrderStatus_ORDER_STATUS_PART_EXPIRED     OrderStatus = 12 // 一部失効
	OrderStatus_ORDER_STATUS_EXPIRED          OrderStatus = 13 // 全部失効
	OrderStatus_ORDER_STATUS_WAIT             OrderStatus = 14 // 発注待ち
	OrderStatus_ORDER_STATUS_INVALID          OrderStatus = 15 // 無効
	OrderStatus_ORDER_STATUS_TRIGGER          OrderStatus = 16 // 切替注文・逆指注文(切替中)
	OrderStatus_ORDER_STATUS_TRIGGERED        OrderStatus = 17 // 切替完了・逆指注文(未約定)
	OrderStatus_ORDER_STATUS_TRIGGER_FAILED   OrderStatus = 18 // 切替失敗・逆指注文(失敗)
	OrderStatus_ORDER_STATUS_CARRYOVER_FAILED OrderStatus = 19 // 繰越失効
	OrderStatus_ORDER_STATUS_IN_ORDER_STOP    OrderStatus = 20 // 逆指値発注中
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0:  "ORDER_STATUS_UNSPECIFIED",
		1:  "ORDER_STATUS_RECEIVED",
		2:  "ORDER_STATUS_IN_ORDER",
		3:  "ORDER_STATUS_ERROR",
		4:  "ORDER_STATUS_IN_CORRECT",
		5:  "ORDER_STATUS_CORRECTED",
		6:  "ORDER_STATUS_CORRECT_FAILED",
		7:  "ORDER_STATUS_IN_CANCEL",
		8:  "ORDER_STATUS_CANCELED",
		9:  "ORDER_STATUS_CANCEL_FAILED",
		10: "ORDER_STATUS_PART",
		11: "ORDER_STATUS_DONE",
		12: "ORDER_STATUS_PART_EXPIRED",
		13: "ORDER_STATUS_EXPIRED",
		14: "ORDER_STATUS_WAIT",
		15: "ORDER_STATUS_INVALID",
		16: "ORDER_STATUS_TRIGGER",
		17: "ORDER_STATUS_TRIGGERED",
		18: "ORDER_STATUS_TRIGGER_FAILED",
		19: "ORDER_STATUS_CARRYOVER_FAILED",
		20: "ORDER_STATUS_IN_ORDER_STOP",
	}
	OrderStatus_value = map[string]int32{
		"ORDER_STATUS_UNSPECIFIED":      0,
		"ORDER_STATUS_RECEIVED":         1,
		"ORDER_STATUS_IN_ORDER":         2,
		"ORDER_STATUS_ERROR":            3,
		"ORDER_STATUS_IN_CORRECT":       4,
		"ORDER_STATUS_CORRECTED":        5,
		"ORDER_STATUS_CORRECT_FAILED":   6,
		"ORDER_STATUS_IN_CANCEL":        7,
		"ORDER_STATUS_CANCELED":         8,
		"ORDER_STATUS_CANCEL_FAILED":    9,
		"ORDER_STATUS_PART":             10,
		"ORDER_STATUS_DONE":             11,
		"ORDER_STATUS_PART_EXPIRED":     12,
		"ORDER_STATUS_EXPIRED":          13,
		"ORDER_STATUS_WAIT":             14,
		"ORDER_STATUS_INVALID":          15,
		"ORDER_STATUS_TRIGGER":          16,
		"ORDER_STATUS_TRIGGERED":        17,
		"ORDER_STATUS_TRIGGER_FAILED":   18,
		"ORDER_STATUS_CARRYOVER_FAILED": 19,
		"ORDER_STATUS_IN_ORDER_STOP":    20,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[16].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[16]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{16}
}

type ContractStatus int32

const (
	ContractStatus_CONTRACT_STATUS_UNSPECIFIED ContractStatus = 0 // 未指定
	ContractStatus_CONTRACT_STATUS_IN_ORDER    ContractStatus = 1 // 未約定
	ContractStatus_CONTRACT_STATUS_PART        ContractStatus = 2 // 部分約定
	ContractStatus_CONTRACT_STATUS_DONE        ContractStatus = 3 // 全部約定
	ContractStatus_CONTRACT_STATUS_IN_CONTRACT ContractStatus = 4 // 約定中
)

// Enum value maps for ContractStatus.
var (
	ContractStatus_name = map[int32]string{
		0: "CONTRACT_STATUS_UNSPECIFIED",
		1: "CONTRACT_STATUS_IN_ORDER",
		2: "CONTRACT_STATUS_PART",
		3: "CONTRACT_STATUS_DONE",
		4: "CONTRACT_STATUS_IN_CONTRACT",
	}
	ContractStatus_value = map[string]int32{
		"CONTRACT_STATUS_UNSPECIFIED": 0,
		"CONTRACT_STATUS_IN_ORDER":    1,
		"CONTRACT_STATUS_PART":        2,
		"CONTRACT_STATUS_DONE":        3,
		"CONTRACT_STATUS_IN_CONTRACT": 4,
	}
)

func (x ContractStatus) Enum() *ContractStatus {
	p := new(ContractStatus)
	*p = x
	return p
}

func (x ContractStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[17].Descriptor()
}

func (ContractStatus) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[17]
}

func (x ContractStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractStatus.Descriptor instead.
func (ContractStatus) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{17}
}

type CarryOverType int32

const (
	CarryOverType_CARRY_OVER_TYPE_UNSPECIFIED CarryOverType = 0 // 未指定
	CarryOverType_CARRY_OVER_TYPE_TODAY       CarryOverType = 1 // 当日
	CarryOverType_CARRY_OVER_TYPE_CARRY       CarryOverType = 2 // 繰越注文
	CarryOverType_CARRY_OVER_TYPE_INVALID     CarryOverType = 3 // 無効
)

// Enum value maps for CarryOverType.
var (
	CarryOverType_name = map[int32]string{
		0: "CARRY_OVER_TYPE_UNSPECIFIED",
		1: "CARRY_OVER_TYPE_TODAY",
		2: "CARRY_OVER_TYPE_CARRY",
		3: "CARRY_OVER_TYPE_INVALID",
	}
	CarryOverType_value = map[string]int32{
		"CARRY_OVER_TYPE_UNSPECIFIED": 0,
		"CARRY_OVER_TYPE_TODAY":       1,
		"CARRY_OVER_TYPE_CARRY":       2,
		"CARRY_OVER_TYPE_INVALID":     3,
	}
)

func (x CarryOverType) Enum() *CarryOverType {
	p := new(CarryOverType)
	*p = x
	return p
}

func (x CarryOverType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CarryOverType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[18].Descriptor()
}

func (CarryOverType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[18]
}

func (x CarryOverType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CarryOverType.Descriptor instead.
func (CarryOverType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{18}
}

type CorrectCancelType int32

const (
	CorrectCancelType_CORRECT_CANCEL_TYPE_UNSPECIFIED CorrectCancelType = 0 // 未指定
	CorrectCancelType_CORRECT_CANCEL_TYPE_CORRECTABLE CorrectCancelType = 1 // 訂正・取消可能
	CorrectCancelType_CORRECT_CANCEL_TYPE_CANCELABLE  CorrectCancelType = 2 // 取消可能
	CorrectCancelType_CORRECT_CANCEL_TYPE_INVALID     CorrectCancelType = 3 // 訂正・取消不可
)

// Enum value maps for CorrectCancelType.
var (
	CorrectCancelType_name = map[int32]string{
		0: "CORRECT_CANCEL_TYPE_UNSPECIFIED",
		1: "CORRECT_CANCEL_TYPE_CORRECTABLE",
		2: "CORRECT_CANCEL_TYPE_CANCELABLE",
		3: "CORRECT_CANCEL_TYPE_INVALID",
	}
	CorrectCancelType_value = map[string]int32{
		"CORRECT_CANCEL_TYPE_UNSPECIFIED": 0,
		"CORRECT_CANCEL_TYPE_CORRECTABLE": 1,
		"CORRECT_CANCEL_TYPE_CANCELABLE":  2,
		"CORRECT_CANCEL_TYPE_INVALID":     3,
	}
)

func (x CorrectCancelType) Enum() *CorrectCancelType {
	p := new(CorrectCancelType)
	*p = x
	return p
}

func (x CorrectCancelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CorrectCancelType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[19].Descriptor()
}

func (CorrectCancelType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[19]
}

func (x CorrectCancelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CorrectCancelType.Descriptor instead.
func (CorrectCancelType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{19}
}

type Channel int32

const (
	Channel_CHANNEL_UNSPECIFIED  Channel = 0  // 未指定
	Channel_CHANNEL_MEET         Channel = 1  // 対面
	Channel_CHANNEL_PC           Channel = 2  // PC
	Channel_CHANNEL_CALL_CENTER  Channel = 3  // コールセンター
	Channel_CHANNEL_CALL_CENTER2 Channel = 4  // コールセンター
	Channel_CHANNEL_CALL_CENTER3 Channel = 5  // コールセンター
	Channel_CHANNEL_MOBILE       Channel = 6  // モバイル
	Channel_CHANNEL_RICH         Channel = 7  // リッチ
	Channel_CHANNEL_SMARTPHONE   Channel = 8  // スマホ・タブレット
	Channel_CHANNEL_IPAD_APP     Channel = 9  // iPadアプリ
	Channel_CHANNEL_HOST         Channel = 10 // HOST
)

// Enum value maps for Channel.
var (
	Channel_name = map[int32]string{
		0:  "CHANNEL_UNSPECIFIED",
		1:  "CHANNEL_MEET",
		2:  "CHANNEL_PC",
		3:  "CHANNEL_CALL_CENTER",
		4:  "CHANNEL_CALL_CENTER2",
		5:  "CHANNEL_CALL_CENTER3",
		6:  "CHANNEL_MOBILE",
		7:  "CHANNEL_RICH",
		8:  "CHANNEL_SMARTPHONE",
		9:  "CHANNEL_IPAD_APP",
		10: "CHANNEL_HOST",
	}
	Channel_value = map[string]int32{
		"CHANNEL_UNSPECIFIED":  0,
		"CHANNEL_MEET":         1,
		"CHANNEL_PC":           2,
		"CHANNEL_CALL_CENTER":  3,
		"CHANNEL_CALL_CENTER2": 4,
		"CHANNEL_CALL_CENTER3": 5,
		"CHANNEL_MOBILE":       6,
		"CHANNEL_RICH":         7,
		"CHANNEL_SMARTPHONE":   8,
		"CHANNEL_IPAD_APP":     9,
		"CHANNEL_HOST":         10,
	}
)

func (x Channel) Enum() *Channel {
	p := new(Channel)
	*p = x
	return p
}

func (x Channel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Channel) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[20].Descriptor()
}

func (Channel) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[20]
}

func (x Channel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Channel.Descriptor instead.
func (Channel) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{20}
}

type StockMasterColumn int32

const (
	StockMasterColumn_STOCK_MASTER_COLUMN_UNSPECIFIED            StockMasterColumn = 0  // 銘柄コード
	StockMasterColumn_STOCK_MASTER_COLUMN_ISSUE_CODE             StockMasterColumn = 1  // 銘柄コード
	StockMasterColumn_STOCK_MASTER_COLUMN_NAME                   StockMasterColumn = 2  // 銘柄名
	StockMasterColumn_STOCK_MASTER_COLUMN_SHORT_NAME             StockMasterColumn = 3  // 銘柄名略称
	StockMasterColumn_STOCK_MASTER_COLUMN_KANA                   StockMasterColumn = 4  // 銘柄名(カナ)
	StockMasterColumn_STOCK_MASTER_COLUMN_ALPHABET               StockMasterColumn = 5  // 銘柄名(英語表記)
	StockMasterColumn_STOCK_MASTER_COLUMN_SPECIFIC_TARGET        StockMasterColumn = 6  // 特定口座対象C
	StockMasterColumn_STOCK_MASTER_COLUMN_TAX_FREE               StockMasterColumn = 7  // 非課税対象C
	StockMasterColumn_STOCK_MASTER_COLUMN_SHARED_STOCKS          StockMasterColumn = 8  // 上場発行株数
	StockMasterColumn_STOCK_MASTER_COLUMN_EX_RIGHT               StockMasterColumn = 9  // 権利落ちフラグ
	StockMasterColumn_STOCK_MASTER_COLUMN_LAST_RIGHT_DAY         StockMasterColumn = 10 // 権利付最終日
	StockMasterColumn_STOCK_MASTER_COLUMN_LISTING_TYPE           StockMasterColumn = 11 // 上場・入札C
	StockMasterColumn_STOCK_MASTER_COLUMN_RELEASE_TRADING_DATE   StockMasterColumn = 12 // 入札解除日
	StockMasterColumn_STOCK_MASTER_COLUMN_TRADING_DATE           StockMasterColumn = 13 // 入札日
	StockMasterColumn_STOCK_MASTER_COLUMN_TRADING_UNIT           StockMasterColumn = 14 // 売買単位
	StockMasterColumn_STOCK_MASTER_COLUMN_NEXT_TRADING_UNIT      StockMasterColumn = 15 // 売買単位(翌営業日)
	StockMasterColumn_STOCK_MASTER_COLUMN_STOP_TRADING_TYPE      StockMasterColumn = 16 // 売買停止C
	StockMasterColumn_STOCK_MASTER_COLUMN_START_PUBLICATION_DATE StockMasterColumn = 17 // 発行開始日
	StockMasterColumn_STOCK_MASTER_COLUMN_LAST_PUBLICATION_DATE  StockMasterColumn = 18 // 発行最終日
	StockMasterColumn_STOCK_MASTER_COLUMN_SETTLEMENT_TYPE        StockMasterColumn = 19 // 決算C
	StockMasterColumn_STOCK_MASTER_COLUMN_SETTLEMENT_DATE        StockMasterColumn = 20 // 決算日
	StockMasterColumn_STOCK_MASTER_COLUMN_LISTING_DATE           StockMasterColumn = 21 // 上場応答日
	StockMasterColumn_STOCK_MASTER_COLUMN_EXPIRE_DATE_2_TYPE     StockMasterColumn = 22 // 二類期日C
	StockMasterColumn_STOCK_MASTER_COLUMN_LARGE_UNIT             StockMasterColumn = 23 // 大口株数
	StockMasterColumn_STOCK_MASTER_COLUMN_LARGE_AMOUNT           StockMasterColumn = 24 // 大口金額
	StockMasterColumn_STOCK_MASTER_COLUMN_OUTPUT_TICKET_TYPE     StockMasterColumn = 25 // 場伝票出力有無C
	StockMasterColumn_STOCK_MASTER_COLUMN_DEPOSIT_AMOUNT         StockMasterColumn = 26 // 保証金代用掛目
	StockMasterColumn_STOCK_MASTER_COLUMN_DEPOSIT_VALUATION      StockMasterColumn = 27 // 代用証券評価単価
	StockMasterColumn_STOCK_MASTER_COLUMN_ORGANIZATION_TYPE      StockMasterColumn = 28 // 機構参加C
	StockMasterColumn_STOCK_MASTER_COLUMN_PROVISIONAL_TYPE       StockMasterColumn = 29 // 仮決済C
	StockMasterColumn_STOCK_MASTER_COLUMN_PRIMARY_EXCHANGE       StockMasterColumn = 30 // 優先市場
	StockMasterColumn_STOCK_MASTER_COLUMN_INDEFINITE_PERIOD_TYPE StockMasterColumn = 31 // 無期限対象C
	StockMasterColumn_STOCK_MASTER_COLUMN_INDUSTRY_CODE          StockMasterColumn = 32 // 業種コード
	StockMasterColumn_STOCK_MASTER_COLUMN_INDUSTRY_NAME          StockMasterColumn = 33 // 業種コード名
	StockMasterColumn_STOCK_MASTER_COLUMN_SOR_TARGET_TYPE        StockMasterColumn = 34 // SOR対象銘柄C
	StockMasterColumn_STOCK_MASTER_COLUMN_CREATE_DATETIME        StockMasterColumn = 35 // 作成日時
	StockMasterColumn_STOCK_MASTER_COLUMN_UPDATE_DATETIME        StockMasterColumn = 36 // 更新日時
	StockMasterColumn_STOCK_MASTER_COLUMN_UPDATE_NUMBER          StockMasterColumn = 37 // 更新通番
)

// Enum value maps for StockMasterColumn.
var (
	StockMasterColumn_name = map[int32]string{
		0:  "STOCK_MASTER_COLUMN_UNSPECIFIED",
		1:  "STOCK_MASTER_COLUMN_ISSUE_CODE",
		2:  "STOCK_MASTER_COLUMN_NAME",
		3:  "STOCK_MASTER_COLUMN_SHORT_NAME",
		4:  "STOCK_MASTER_COLUMN_KANA",
		5:  "STOCK_MASTER_COLUMN_ALPHABET",
		6:  "STOCK_MASTER_COLUMN_SPECIFIC_TARGET",
		7:  "STOCK_MASTER_COLUMN_TAX_FREE",
		8:  "STOCK_MASTER_COLUMN_SHARED_STOCKS",
		9:  "STOCK_MASTER_COLUMN_EX_RIGHT",
		10: "STOCK_MASTER_COLUMN_LAST_RIGHT_DAY",
		11: "STOCK_MASTER_COLUMN_LISTING_TYPE",
		12: "STOCK_MASTER_COLUMN_RELEASE_TRADING_DATE",
		13: "STOCK_MASTER_COLUMN_TRADING_DATE",
		14: "STOCK_MASTER_COLUMN_TRADING_UNIT",
		15: "STOCK_MASTER_COLUMN_NEXT_TRADING_UNIT",
		16: "STOCK_MASTER_COLUMN_STOP_TRADING_TYPE",
		17: "STOCK_MASTER_COLUMN_START_PUBLICATION_DATE",
		18: "STOCK_MASTER_COLUMN_LAST_PUBLICATION_DATE",
		19: "STOCK_MASTER_COLUMN_SETTLEMENT_TYPE",
		20: "STOCK_MASTER_COLUMN_SETTLEMENT_DATE",
		21: "STOCK_MASTER_COLUMN_LISTING_DATE",
		22: "STOCK_MASTER_COLUMN_EXPIRE_DATE_2_TYPE",
		23: "STOCK_MASTER_COLUMN_LARGE_UNIT",
		24: "STOCK_MASTER_COLUMN_LARGE_AMOUNT",
		25: "STOCK_MASTER_COLUMN_OUTPUT_TICKET_TYPE",
		26: "STOCK_MASTER_COLUMN_DEPOSIT_AMOUNT",
		27: "STOCK_MASTER_COLUMN_DEPOSIT_VALUATION",
		28: "STOCK_MASTER_COLUMN_ORGANIZATION_TYPE",
		29: "STOCK_MASTER_COLUMN_PROVISIONAL_TYPE",
		30: "STOCK_MASTER_COLUMN_PRIMARY_EXCHANGE",
		31: "STOCK_MASTER_COLUMN_INDEFINITE_PERIOD_TYPE",
		32: "STOCK_MASTER_COLUMN_INDUSTRY_CODE",
		33: "STOCK_MASTER_COLUMN_INDUSTRY_NAME",
		34: "STOCK_MASTER_COLUMN_SOR_TARGET_TYPE",
		35: "STOCK_MASTER_COLUMN_CREATE_DATETIME",
		36: "STOCK_MASTER_COLUMN_UPDATE_DATETIME",
		37: "STOCK_MASTER_COLUMN_UPDATE_NUMBER",
	}
	StockMasterColumn_value = map[string]int32{
		"STOCK_MASTER_COLUMN_UNSPECIFIED":            0,
		"STOCK_MASTER_COLUMN_ISSUE_CODE":             1,
		"STOCK_MASTER_COLUMN_NAME":                   2,
		"STOCK_MASTER_COLUMN_SHORT_NAME":             3,
		"STOCK_MASTER_COLUMN_KANA":                   4,
		"STOCK_MASTER_COLUMN_ALPHABET":               5,
		"STOCK_MASTER_COLUMN_SPECIFIC_TARGET":        6,
		"STOCK_MASTER_COLUMN_TAX_FREE":               7,
		"STOCK_MASTER_COLUMN_SHARED_STOCKS":          8,
		"STOCK_MASTER_COLUMN_EX_RIGHT":               9,
		"STOCK_MASTER_COLUMN_LAST_RIGHT_DAY":         10,
		"STOCK_MASTER_COLUMN_LISTING_TYPE":           11,
		"STOCK_MASTER_COLUMN_RELEASE_TRADING_DATE":   12,
		"STOCK_MASTER_COLUMN_TRADING_DATE":           13,
		"STOCK_MASTER_COLUMN_TRADING_UNIT":           14,
		"STOCK_MASTER_COLUMN_NEXT_TRADING_UNIT":      15,
		"STOCK_MASTER_COLUMN_STOP_TRADING_TYPE":      16,
		"STOCK_MASTER_COLUMN_START_PUBLICATION_DATE": 17,
		"STOCK_MASTER_COLUMN_LAST_PUBLICATION_DATE":  18,
		"STOCK_MASTER_COLUMN_SETTLEMENT_TYPE":        19,
		"STOCK_MASTER_COLUMN_SETTLEMENT_DATE":        20,
		"STOCK_MASTER_COLUMN_LISTING_DATE":           21,
		"STOCK_MASTER_COLUMN_EXPIRE_DATE_2_TYPE":     22,
		"STOCK_MASTER_COLUMN_LARGE_UNIT":             23,
		"STOCK_MASTER_COLUMN_LARGE_AMOUNT":           24,
		"STOCK_MASTER_COLUMN_OUTPUT_TICKET_TYPE":     25,
		"STOCK_MASTER_COLUMN_DEPOSIT_AMOUNT":         26,
		"STOCK_MASTER_COLUMN_DEPOSIT_VALUATION":      27,
		"STOCK_MASTER_COLUMN_ORGANIZATION_TYPE":      28,
		"STOCK_MASTER_COLUMN_PROVISIONAL_TYPE":       29,
		"STOCK_MASTER_COLUMN_PRIMARY_EXCHANGE":       30,
		"STOCK_MASTER_COLUMN_INDEFINITE_PERIOD_TYPE": 31,
		"STOCK_MASTER_COLUMN_INDUSTRY_CODE":          32,
		"STOCK_MASTER_COLUMN_INDUSTRY_NAME":          33,
		"STOCK_MASTER_COLUMN_SOR_TARGET_TYPE":        34,
		"STOCK_MASTER_COLUMN_CREATE_DATETIME":        35,
		"STOCK_MASTER_COLUMN_UPDATE_DATETIME":        36,
		"STOCK_MASTER_COLUMN_UPDATE_NUMBER":          37,
	}
)

func (x StockMasterColumn) Enum() *StockMasterColumn {
	p := new(StockMasterColumn)
	*p = x
	return p
}

func (x StockMasterColumn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockMasterColumn) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[21].Descriptor()
}

func (StockMasterColumn) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[21]
}

func (x StockMasterColumn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StockMasterColumn.Descriptor instead.
func (StockMasterColumn) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{21}
}

type TaxFree int32

const (
	TaxFree_TAX_FREE_UNSPECIFIED TaxFree = 0 // 未指定
	TaxFree_TAX_FREE_UN_USED     TaxFree = 1 // 通常(無)
	TaxFree_TAX_FREE_VALID       TaxFree = 2 // 非課税参加
)

// Enum value maps for TaxFree.
var (
	TaxFree_name = map[int32]string{
		0: "TAX_FREE_UNSPECIFIED",
		1: "TAX_FREE_UN_USED",
		2: "TAX_FREE_VALID",
	}
	TaxFree_value = map[string]int32{
		"TAX_FREE_UNSPECIFIED": 0,
		"TAX_FREE_UN_USED":     1,
		"TAX_FREE_VALID":       2,
	}
)

func (x TaxFree) Enum() *TaxFree {
	p := new(TaxFree)
	*p = x
	return p
}

func (x TaxFree) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaxFree) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[22].Descriptor()
}

func (TaxFree) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[22]
}

func (x TaxFree) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaxFree.Descriptor instead.
func (TaxFree) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{22}
}

type ExRightType int32

const (
	ExRightType_EX_RIGHT_TYPE_UNSPECIFIED                  ExRightType = 0 // 未指定
	ExRightType_EX_RIGHT_TYPE_NOTHING                      ExRightType = 1 // 権利落なし
	ExRightType_EX_RIGHT_TYPE_STOCK_SPLIT                  ExRightType = 2 // 新株権利落ち
	ExRightType_EX_RIGHT_TYPE_DIVIDEND                     ExRightType = 3 // 配当(中間)権利落ち
	ExRightType_EX_RIGHT_TYPE_OTHER                        ExRightType = 4 // その他権利落ち
	ExRightType_EX_RIGHT_TYPE_DIVIDEND_AND_OTHER           ExRightType = 5 // その他・配当(中間)権利落ち
	ExRightType_EX_RIGHT_TYPE_STOCK_SPLIT_AND_OTHER        ExRightType = 6 // 新株・その他権利落ち
	ExRightType_EX_RIGHT_TYPE_STOCK_SPLIT_AND_OTHER_MIDDLE ExRightType = 7 // 新株・その他(中間)権利落ち
)

// Enum value maps for ExRightType.
var (
	ExRightType_name = map[int32]string{
		0: "EX_RIGHT_TYPE_UNSPECIFIED",
		1: "EX_RIGHT_TYPE_NOTHING",
		2: "EX_RIGHT_TYPE_STOCK_SPLIT",
		3: "EX_RIGHT_TYPE_DIVIDEND",
		4: "EX_RIGHT_TYPE_OTHER",
		5: "EX_RIGHT_TYPE_DIVIDEND_AND_OTHER",
		6: "EX_RIGHT_TYPE_STOCK_SPLIT_AND_OTHER",
		7: "EX_RIGHT_TYPE_STOCK_SPLIT_AND_OTHER_MIDDLE",
	}
	ExRightType_value = map[string]int32{
		"EX_RIGHT_TYPE_UNSPECIFIED":                  0,
		"EX_RIGHT_TYPE_NOTHING":                      1,
		"EX_RIGHT_TYPE_STOCK_SPLIT":                  2,
		"EX_RIGHT_TYPE_DIVIDEND":                     3,
		"EX_RIGHT_TYPE_OTHER":                        4,
		"EX_RIGHT_TYPE_DIVIDEND_AND_OTHER":           5,
		"EX_RIGHT_TYPE_STOCK_SPLIT_AND_OTHER":        6,
		"EX_RIGHT_TYPE_STOCK_SPLIT_AND_OTHER_MIDDLE": 7,
	}
)

func (x ExRightType) Enum() *ExRightType {
	p := new(ExRightType)
	*p = x
	return p
}

func (x ExRightType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExRightType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[23].Descriptor()
}

func (ExRightType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[23]
}

func (x ExRightType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExRightType.Descriptor instead.
func (ExRightType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{23}
}

type ListingType int32

const (
	ListingType_LISTING_TYPE_UNSPECIFIED  ListingType = 0 // 未指定
	ListingType_LISTING_TYPE_UN_USED      ListingType = 1 // 通常(無)
	ListingType_LISTING_TYPE_NEWEST       ListingType = 2 // 上場1年未満銘柄
	ListingType_LISTING_TYPE_GENERAL      ListingType = 3 // 一般入札
	ListingType_LISTING_TYPE_RIGHT        ListingType = 4 // 権利入札
	ListingType_LISTING_TYPE_OFFER        ListingType = 5 // 公募入札
	ListingType_LISTING_TYPE_SELLING      ListingType = 6 // 売出し
	ListingType_LISTING_TYPE_OPEN_BUY     ListingType = 7 // 公開買付
	ListingType_LISTING_TYPE_TRANSMISSION ListingType = 8 // 媒介
)

// Enum value maps for ListingType.
var (
	ListingType_name = map[int32]string{
		0: "LISTING_TYPE_UNSPECIFIED",
		1: "LISTING_TYPE_UN_USED",
		2: "LISTING_TYPE_NEWEST",
		3: "LISTING_TYPE_GENERAL",
		4: "LISTING_TYPE_RIGHT",
		5: "LISTING_TYPE_OFFER",
		6: "LISTING_TYPE_SELLING",
		7: "LISTING_TYPE_OPEN_BUY",
		8: "LISTING_TYPE_TRANSMISSION",
	}
	ListingType_value = map[string]int32{
		"LISTING_TYPE_UNSPECIFIED":  0,
		"LISTING_TYPE_UN_USED":      1,
		"LISTING_TYPE_NEWEST":       2,
		"LISTING_TYPE_GENERAL":      3,
		"LISTING_TYPE_RIGHT":        4,
		"LISTING_TYPE_OFFER":        5,
		"LISTING_TYPE_SELLING":      6,
		"LISTING_TYPE_OPEN_BUY":     7,
		"LISTING_TYPE_TRANSMISSION": 8,
	}
)

func (x ListingType) Enum() *ListingType {
	p := new(ListingType)
	*p = x
	return p
}

func (x ListingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListingType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[24].Descriptor()
}

func (ListingType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[24]
}

func (x ListingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListingType.Descriptor instead.
func (ListingType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{24}
}

type StopTradingType int32

const (
	StopTradingType_STOP_TRADING_TYPE_UNSPECIFIED StopTradingType = 0 // 未指定
	StopTradingType_STOP_TRADING_TYPE_UN_USED     StopTradingType = 1 // 通常(無)
	StopTradingType_STOP_TRADING_TYPE_RELEASE     StopTradingType = 2 // 解除
	StopTradingType_STOP_TRADING_TYPE_STOPPING    StopTradingType = 3 // 停止中
)

// Enum value maps for StopTradingType.
var (
	StopTradingType_name = map[int32]string{
		0: "STOP_TRADING_TYPE_UNSPECIFIED",
		1: "STOP_TRADING_TYPE_UN_USED",
		2: "STOP_TRADING_TYPE_RELEASE",
		3: "STOP_TRADING_TYPE_STOPPING",
	}
	StopTradingType_value = map[string]int32{
		"STOP_TRADING_TYPE_UNSPECIFIED": 0,
		"STOP_TRADING_TYPE_UN_USED":     1,
		"STOP_TRADING_TYPE_RELEASE":     2,
		"STOP_TRADING_TYPE_STOPPING":    3,
	}
)

func (x StopTradingType) Enum() *StopTradingType {
	p := new(StopTradingType)
	*p = x
	return p
}

func (x StopTradingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopTradingType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[25].Descriptor()
}

func (StopTradingType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[25]
}

func (x StopTradingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopTradingType.Descriptor instead.
func (StopTradingType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{25}
}

type SettlementType int32

const (
	SettlementType_SETTLEMENT_TYPE_UNSPECIFIED      SettlementType = 0 // 未指定
	SettlementType_SETTLEMENT_TYPE_CAPITAL_INCREASE SettlementType = 1 // 有償割当増資
	SettlementType_SETTLEMENT_TYPE_SPLIT            SettlementType = 2 // 株式分割
	SettlementType_SETTLEMENT_TYPE_ASSIGNMENT       SettlementType = 3 // 無償割当
)

// Enum value maps for SettlementType.
var (
	SettlementType_name = map[int32]string{
		0: "SETTLEMENT_TYPE_UNSPECIFIED",
		1: "SETTLEMENT_TYPE_CAPITAL_INCREASE",
		2: "SETTLEMENT_TYPE_SPLIT",
		3: "SETTLEMENT_TYPE_ASSIGNMENT",
	}
	SettlementType_value = map[string]int32{
		"SETTLEMENT_TYPE_UNSPECIFIED":      0,
		"SETTLEMENT_TYPE_CAPITAL_INCREASE": 1,
		"SETTLEMENT_TYPE_SPLIT":            2,
		"SETTLEMENT_TYPE_ASSIGNMENT":       3,
	}
)

func (x SettlementType) Enum() *SettlementType {
	p := new(SettlementType)
	*p = x
	return p
}

func (x SettlementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettlementType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[26].Descriptor()
}

func (SettlementType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[26]
}

func (x SettlementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettlementType.Descriptor instead.
func (SettlementType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{26}
}

type StockExchangeMasterColumn int32

const (
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_UNSPECIFIED                    StockExchangeMasterColumn = 0  // 銘柄コード
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_ISSUE_CODE                     StockExchangeMasterColumn = 1  // 銘柄コード
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_EXCHANGE                       StockExchangeMasterColumn = 2  // 上場市場
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_STOCK_SYSTEM_TYPE              StockExchangeMasterColumn = 3  // システムC
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_UNDER_LIMIT_PRICE              StockExchangeMasterColumn = 4  // 値幅下限
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_UPPER_LIMIT_PRICE              StockExchangeMasterColumn = 5  // 値幅上限
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_SYMBOL_CATEGORY                StockExchangeMasterColumn = 6  // 銘柄区分C
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_EXCHANGE           StockExchangeMasterColumn = 7  // 値幅市場C
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_MARGIN_TYPE                    StockExchangeMasterColumn = 8  // 信用C
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_LISTING_DATE                   StockExchangeMasterColumn = 9  // 新規上場日
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_DATE               StockExchangeMasterColumn = 10 // 値幅期限日
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_CATEGORY           StockExchangeMasterColumn = 11 // 値幅規制C
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_VALUE              StockExchangeMasterColumn = 12 // 値幅規制値
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_CONFIRM_LIMIT_PRICE            StockExchangeMasterColumn = 13 // 値幅チェック可否C
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_SECTION                        StockExchangeMasterColumn = 14 // 銘柄部別C
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_PREV_CLOSE_PRICE               StockExchangeMasterColumn = 15 // 前日終値
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_CALCULATE_LIMIT_PRICE_EXCHANGE StockExchangeMasterColumn = 16 // 値幅算出市場C
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_REGULATION1                    StockExchangeMasterColumn = 17 // 銘柄規制1C
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_REGULATION2                    StockExchangeMasterColumn = 18 // 銘柄規制2C
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_SECTION_TYPE                   StockExchangeMasterColumn = 19 // 上場区分
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_DELISTING_DATE                 StockExchangeMasterColumn = 20 // 上場廃止日
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_TRADING_UNIT                   StockExchangeMasterColumn = 21 // 売買単位
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_NEXT_TRADING_UNIT              StockExchangeMasterColumn = 22 // 売買単位(翌営業日)
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_TICK_GROUP_TYPE                StockExchangeMasterColumn = 23 // 呼値の単位番号
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_NEXT_TICK_GROUP_TYPE           StockExchangeMasterColumn = 24 // 呼値の単位番号(翌営業日)
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_INFORMATION_SOURCE             StockExchangeMasterColumn = 25 // 情報系ソース
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_INFORMATION_CODE               StockExchangeMasterColumn = 26 // 情報系コード
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_OFFER_PRICE                    StockExchangeMasterColumn = 27 // 公募価格
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_CREATE_DATETIME                StockExchangeMasterColumn = 28 // 作成日時
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_UPDATE_DATETIME                StockExchangeMasterColumn = 29 // 更新日時
	StockExchangeMasterColumn_STOCK_EXCHANGE_MASTER_COLUMN_UPDATE_NUMBER                  StockExchangeMasterColumn = 30 // 更新通番
)

// Enum value maps for StockExchangeMasterColumn.
var (
	StockExchangeMasterColumn_name = map[int32]string{
		0:  "STOCK_EXCHANGE_MASTER_COLUMN_UNSPECIFIED",
		1:  "STOCK_EXCHANGE_MASTER_COLUMN_ISSUE_CODE",
		2:  "STOCK_EXCHANGE_MASTER_COLUMN_EXCHANGE",
		3:  "STOCK_EXCHANGE_MASTER_COLUMN_STOCK_SYSTEM_TYPE",
		4:  "STOCK_EXCHANGE_MASTER_COLUMN_UNDER_LIMIT_PRICE",
		5:  "STOCK_EXCHANGE_MASTER_COLUMN_UPPER_LIMIT_PRICE",
		6:  "STOCK_EXCHANGE_MASTER_COLUMN_SYMBOL_CATEGORY",
		7:  "STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_EXCHANGE",
		8:  "STOCK_EXCHANGE_MASTER_COLUMN_MARGIN_TYPE",
		9:  "STOCK_EXCHANGE_MASTER_COLUMN_LISTING_DATE",
		10: "STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_DATE",
		11: "STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_CATEGORY",
		12: "STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_VALUE",
		13: "STOCK_EXCHANGE_MASTER_COLUMN_CONFIRM_LIMIT_PRICE",
		14: "STOCK_EXCHANGE_MASTER_COLUMN_SECTION",
		15: "STOCK_EXCHANGE_MASTER_COLUMN_PREV_CLOSE_PRICE",
		16: "STOCK_EXCHANGE_MASTER_COLUMN_CALCULATE_LIMIT_PRICE_EXCHANGE",
		17: "STOCK_EXCHANGE_MASTER_COLUMN_REGULATION1",
		18: "STOCK_EXCHANGE_MASTER_COLUMN_REGULATION2",
		19: "STOCK_EXCHANGE_MASTER_COLUMN_SECTION_TYPE",
		20: "STOCK_EXCHANGE_MASTER_COLUMN_DELISTING_DATE",
		21: "STOCK_EXCHANGE_MASTER_COLUMN_TRADING_UNIT",
		22: "STOCK_EXCHANGE_MASTER_COLUMN_NEXT_TRADING_UNIT",
		23: "STOCK_EXCHANGE_MASTER_COLUMN_TICK_GROUP_TYPE",
		24: "STOCK_EXCHANGE_MASTER_COLUMN_NEXT_TICK_GROUP_TYPE",
		25: "STOCK_EXCHANGE_MASTER_COLUMN_INFORMATION_SOURCE",
		26: "STOCK_EXCHANGE_MASTER_COLUMN_INFORMATION_CODE",
		27: "STOCK_EXCHANGE_MASTER_COLUMN_OFFER_PRICE",
		28: "STOCK_EXCHANGE_MASTER_COLUMN_CREATE_DATETIME",
		29: "STOCK_EXCHANGE_MASTER_COLUMN_UPDATE_DATETIME",
		30: "STOCK_EXCHANGE_MASTER_COLUMN_UPDATE_NUMBER",
	}
	StockExchangeMasterColumn_value = map[string]int32{
		"STOCK_EXCHANGE_MASTER_COLUMN_UNSPECIFIED":                    0,
		"STOCK_EXCHANGE_MASTER_COLUMN_ISSUE_CODE":                     1,
		"STOCK_EXCHANGE_MASTER_COLUMN_EXCHANGE":                       2,
		"STOCK_EXCHANGE_MASTER_COLUMN_STOCK_SYSTEM_TYPE":              3,
		"STOCK_EXCHANGE_MASTER_COLUMN_UNDER_LIMIT_PRICE":              4,
		"STOCK_EXCHANGE_MASTER_COLUMN_UPPER_LIMIT_PRICE":              5,
		"STOCK_EXCHANGE_MASTER_COLUMN_SYMBOL_CATEGORY":                6,
		"STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_EXCHANGE":           7,
		"STOCK_EXCHANGE_MASTER_COLUMN_MARGIN_TYPE":                    8,
		"STOCK_EXCHANGE_MASTER_COLUMN_LISTING_DATE":                   9,
		"STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_DATE":               10,
		"STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_CATEGORY":           11,
		"STOCK_EXCHANGE_MASTER_COLUMN_LIMIT_PRICE_VALUE":              12,
		"STOCK_EXCHANGE_MASTER_COLUMN_CONFIRM_LIMIT_PRICE":            13,
		"STOCK_EXCHANGE_MASTER_COLUMN_SECTION":                        14,
		"STOCK_EXCHANGE_MASTER_COLUMN_PREV_CLOSE_PRICE":               15,
		"STOCK_EXCHANGE_MASTER_COLUMN_CALCULATE_LIMIT_PRICE_EXCHANGE": 16,
		"STOCK_EXCHANGE_MASTER_COLUMN_REGULATION1":                    17,
		"STOCK_EXCHANGE_MASTER_COLUMN_REGULATION2":                    18,
		"STOCK_EXCHANGE_MASTER_COLUMN_SECTION_TYPE":                   19,
		"STOCK_EXCHANGE_MASTER_COLUMN_DELISTING_DATE":                 20,
		"STOCK_EXCHANGE_MASTER_COLUMN_TRADING_UNIT":                   21,
		"STOCK_EXCHANGE_MASTER_COLUMN_NEXT_TRADING_UNIT":              22,
		"STOCK_EXCHANGE_MASTER_COLUMN_TICK_GROUP_TYPE":                23,
		"STOCK_EXCHANGE_MASTER_COLUMN_NEXT_TICK_GROUP_TYPE":           24,
		"STOCK_EXCHANGE_MASTER_COLUMN_INFORMATION_SOURCE":             25,
		"STOCK_EXCHANGE_MASTER_COLUMN_INFORMATION_CODE":               26,
		"STOCK_EXCHANGE_MASTER_COLUMN_OFFER_PRICE":                    27,
		"STOCK_EXCHANGE_MASTER_COLUMN_CREATE_DATETIME":                28,
		"STOCK_EXCHANGE_MASTER_COLUMN_UPDATE_DATETIME":                29,
		"STOCK_EXCHANGE_MASTER_COLUMN_UPDATE_NUMBER":                  30,
	}
)

func (x StockExchangeMasterColumn) Enum() *StockExchangeMasterColumn {
	p := new(StockExchangeMasterColumn)
	*p = x
	return p
}

func (x StockExchangeMasterColumn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockExchangeMasterColumn) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[27].Descriptor()
}

func (StockExchangeMasterColumn) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[27]
}

func (x StockExchangeMasterColumn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StockExchangeMasterColumn.Descriptor instead.
func (StockExchangeMasterColumn) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{27}
}

type MarginType int32

const (
	MarginType_MARGIN_TYPE_UNSPECIFIED    MarginType = 0 // 未指定
	MarginType_MARGIN_TYPE_MARGIN_TRADING MarginType = 1 // 貸借銘柄
	MarginType_MARGIN_TYPE_STANDARD       MarginType = 2 // 信用制度銘柄
	MarginType_MARGIN_TYPE_NEGOTIATE      MarginType = 3 // 一般信用銘柄
)

// Enum value maps for MarginType.
var (
	MarginType_name = map[int32]string{
		0: "MARGIN_TYPE_UNSPECIFIED",
		1: "MARGIN_TYPE_MARGIN_TRADING",
		2: "MARGIN_TYPE_STANDARD",
		3: "MARGIN_TYPE_NEGOTIATE",
	}
	MarginType_value = map[string]int32{
		"MARGIN_TYPE_UNSPECIFIED":    0,
		"MARGIN_TYPE_MARGIN_TRADING": 1,
		"MARGIN_TYPE_STANDARD":       2,
		"MARGIN_TYPE_NEGOTIATE":      3,
	}
)

func (x MarginType) Enum() *MarginType {
	p := new(MarginType)
	*p = x
	return p
}

func (x MarginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarginType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[28].Descriptor()
}

func (MarginType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[28]
}

func (x MarginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarginType.Descriptor instead.
func (MarginType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{28}
}

type TickGroupType int32

const (
	TickGroupType_TICK_GROUP_TYPE_UNSPECIFIED TickGroupType = 0 // 未指定
	TickGroupType_TICK_GROUP_TYPE_STOCK1      TickGroupType = 1 // 株式1
	TickGroupType_TICK_GROUP_TYPE_STOCK2      TickGroupType = 2 // 株式2
	TickGroupType_TICK_GROUP_TYPE_STOCK3      TickGroupType = 3 // 株式3
	TickGroupType_TICK_GROUP_TYPE_BOND1       TickGroupType = 4 // 債券1
	TickGroupType_TICK_GROUP_TYPE_BOND2       TickGroupType = 5 // 債券2
	TickGroupType_TICK_GROUP_TYPE_NK225       TickGroupType = 6 // 日経225先物
	TickGroupType_TICK_GROUP_TYPE_NK225_MINI  TickGroupType = 7 // 日経225mini先物
	TickGroupType_TICK_GROUP_TYPE_NK225_OP    TickGroupType = 8 // 日経225OP
)

// Enum value maps for TickGroupType.
var (
	TickGroupType_name = map[int32]string{
		0: "TICK_GROUP_TYPE_UNSPECIFIED",
		1: "TICK_GROUP_TYPE_STOCK1",
		2: "TICK_GROUP_TYPE_STOCK2",
		3: "TICK_GROUP_TYPE_STOCK3",
		4: "TICK_GROUP_TYPE_BOND1",
		5: "TICK_GROUP_TYPE_BOND2",
		6: "TICK_GROUP_TYPE_NK225",
		7: "TICK_GROUP_TYPE_NK225_MINI",
		8: "TICK_GROUP_TYPE_NK225_OP",
	}
	TickGroupType_value = map[string]int32{
		"TICK_GROUP_TYPE_UNSPECIFIED": 0,
		"TICK_GROUP_TYPE_STOCK1":      1,
		"TICK_GROUP_TYPE_STOCK2":      2,
		"TICK_GROUP_TYPE_STOCK3":      3,
		"TICK_GROUP_TYPE_BOND1":       4,
		"TICK_GROUP_TYPE_BOND2":       5,
		"TICK_GROUP_TYPE_NK225":       6,
		"TICK_GROUP_TYPE_NK225_MINI":  7,
		"TICK_GROUP_TYPE_NK225_OP":    8,
	}
)

func (x TickGroupType) Enum() *TickGroupType {
	p := new(TickGroupType)
	*p = x
	return p
}

func (x TickGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TickGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[29].Descriptor()
}

func (TickGroupType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[29]
}

func (x TickGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TickGroupType.Descriptor instead.
func (TickGroupType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{29}
}

type MarketPriceColumn int32

const (
	MarketPriceColumn_MARKET_PRICE_COLUMN_UNSPECIFIED         MarketPriceColumn = 0  // 所属
	MarketPriceColumn_MARKET_PRICE_COLUMN_SECTION             MarketPriceColumn = 1  // 所属
	MarketPriceColumn_MARKET_PRICE_COLUMN_CURRENT_PRICE       MarketPriceColumn = 2  // 現在値
	MarketPriceColumn_MARKET_PRICE_COLUMN_CURRENT_PRICE_TIME  MarketPriceColumn = 3  // 現在値時刻
	MarketPriceColumn_MARKET_PRICE_COLUMN_CHANGE_PRICE_TYPE   MarketPriceColumn = 4  // 現値前値比較
	MarketPriceColumn_MARKET_PRICE_COLUMN_PREV_DAY_RATIO      MarketPriceColumn = 5  // 前日比
	MarketPriceColumn_MARKET_PRICE_COLUMN_PREV_DAY_PERCENT    MarketPriceColumn = 6  // 騰落率
	MarketPriceColumn_MARKET_PRICE_COLUMN_OPEN_PRICE          MarketPriceColumn = 7  // 始値
	MarketPriceColumn_MARKET_PRICE_COLUMN_OPEN_PRICE_TIME     MarketPriceColumn = 8  // 始値時刻
	MarketPriceColumn_MARKET_PRICE_COLUMN_HIGH_PRICE          MarketPriceColumn = 9  // 高値
	MarketPriceColumn_MARKET_PRICE_COLUMN_HIGH_PRICE_TIME     MarketPriceColumn = 10 // 高値時刻
	MarketPriceColumn_MARKET_PRICE_COLUMN_LOW_PRICE           MarketPriceColumn = 11 // 安値
	MarketPriceColumn_MARKET_PRICE_COLUMN_LOW_PRICE_TIME      MarketPriceColumn = 12 // 安値時刻
	MarketPriceColumn_MARKET_PRICE_COLUMN_VOLUME              MarketPriceColumn = 13 // 出来高
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_SIGN            MarketPriceColumn = 14 // 売気配値種類
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE           MarketPriceColumn = 15 // 売気配値
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY        MarketPriceColumn = 16 // 売気配数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_SIGN            MarketPriceColumn = 17 // 買気配値種類
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE           MarketPriceColumn = 18 // 買気配値
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY        MarketPriceColumn = 19 // 買気配数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_EX_RIGHT_TYPE       MarketPriceColumn = 20 // 配当落銘柄区分
	MarketPriceColumn_MARKET_PRICE_COLUMN_DISCONTINUITY_TYPE  MarketPriceColumn = 21 // 不連続要因銘柄区分
	MarketPriceColumn_MARKET_PRICE_COLUMN_STOP_HIGH           MarketPriceColumn = 22 // 日通し高値フラグ
	MarketPriceColumn_MARKET_PRICE_COLUMN_STOP_LOW            MarketPriceColumn = 23 // 日通し安値フラグ
	MarketPriceColumn_MARKET_PRICE_COLUMN_TRADING_AMOUNT      MarketPriceColumn = 24 // 売買代金
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY_MARKET MarketPriceColumn = 25 // 売数量(成行)
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY_MARKET MarketPriceColumn = 26 // 買数量(成行)
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY_OVER   MarketPriceColumn = 27 // 売-OVER
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY10      MarketPriceColumn = 28 // 売-10-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE10         MarketPriceColumn = 29 // 売-10-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY9       MarketPriceColumn = 30 // 売-9-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE9          MarketPriceColumn = 31 // 売-9-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY8       MarketPriceColumn = 32 // 売-8-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE8          MarketPriceColumn = 33 // 売-8-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY7       MarketPriceColumn = 34 // 売-7-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE7          MarketPriceColumn = 35 // 売-7-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY6       MarketPriceColumn = 36 // 売-6-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE6          MarketPriceColumn = 37 // 売-6-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY5       MarketPriceColumn = 38 // 売-5-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE5          MarketPriceColumn = 39 // 売-5-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY4       MarketPriceColumn = 40 // 売-4-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE4          MarketPriceColumn = 41 // 売-4-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY3       MarketPriceColumn = 42 // 売-3-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE3          MarketPriceColumn = 43 // 売-3-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY2       MarketPriceColumn = 44 // 売-2-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE2          MarketPriceColumn = 45 // 売-2-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_QUANTITY1       MarketPriceColumn = 46 // 売-1-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_ASK_PRICE1          MarketPriceColumn = 47 // 売-1-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY1       MarketPriceColumn = 48 // 買-1-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE1          MarketPriceColumn = 49 // 買-1-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY2       MarketPriceColumn = 50 // 買-2-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE2          MarketPriceColumn = 51 // 買-2-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY3       MarketPriceColumn = 52 // 買-3-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE3          MarketPriceColumn = 53 // 買-3-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY4       MarketPriceColumn = 54 // 買-4-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE4          MarketPriceColumn = 55 // 買-4-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY5       MarketPriceColumn = 56 // 買-5-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE5          MarketPriceColumn = 57 // 買-5-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY6       MarketPriceColumn = 58 // 買-6-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE6          MarketPriceColumn = 59 // 買-6-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY7       MarketPriceColumn = 60 // 買-7-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE7          MarketPriceColumn = 61 // 買-7-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY8       MarketPriceColumn = 62 // 買-8-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE8          MarketPriceColumn = 63 // 買-8-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY9       MarketPriceColumn = 64 // 買-9-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE9          MarketPriceColumn = 65 // 買-9-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY10      MarketPriceColumn = 66 // 買-10-数量
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_PRICE10         MarketPriceColumn = 67 // 買-10-値段
	MarketPriceColumn_MARKET_PRICE_COLUMN_BID_QUANTITY_UNDER  MarketPriceColumn = 68 // 買-UNDER
	MarketPriceColumn_MARKET_PRICE_COLUMN_VWAP                MarketPriceColumn = 69 // VWAP
	MarketPriceColumn_MARKET_PRICE_COLUMN_PRP                 MarketPriceColumn = 70 // 前日終値
)

// Enum value maps for MarketPriceColumn.
var (
	MarketPriceColumn_name = map[int32]string{
		0:  "MARKET_PRICE_COLUMN_UNSPECIFIED",
		1:  "MARKET_PRICE_COLUMN_SECTION",
		2:  "MARKET_PRICE_COLUMN_CURRENT_PRICE",
		3:  "MARKET_PRICE_COLUMN_CURRENT_PRICE_TIME",
		4:  "MARKET_PRICE_COLUMN_CHANGE_PRICE_TYPE",
		5:  "MARKET_PRICE_COLUMN_PREV_DAY_RATIO",
		6:  "MARKET_PRICE_COLUMN_PREV_DAY_PERCENT",
		7:  "MARKET_PRICE_COLUMN_OPEN_PRICE",
		8:  "MARKET_PRICE_COLUMN_OPEN_PRICE_TIME",
		9:  "MARKET_PRICE_COLUMN_HIGH_PRICE",
		10: "MARKET_PRICE_COLUMN_HIGH_PRICE_TIME",
		11: "MARKET_PRICE_COLUMN_LOW_PRICE",
		12: "MARKET_PRICE_COLUMN_LOW_PRICE_TIME",
		13: "MARKET_PRICE_COLUMN_VOLUME",
		14: "MARKET_PRICE_COLUMN_ASK_SIGN",
		15: "MARKET_PRICE_COLUMN_ASK_PRICE",
		16: "MARKET_PRICE_COLUMN_ASK_QUANTITY",
		17: "MARKET_PRICE_COLUMN_BID_SIGN",
		18: "MARKET_PRICE_COLUMN_BID_PRICE",
		19: "MARKET_PRICE_COLUMN_BID_QUANTITY",
		20: "MARKET_PRICE_COLUMN_EX_RIGHT_TYPE",
		21: "MARKET_PRICE_COLUMN_DISCONTINUITY_TYPE",
		22: "MARKET_PRICE_COLUMN_STOP_HIGH",
		23: "MARKET_PRICE_COLUMN_STOP_LOW",
		24: "MARKET_PRICE_COLUMN_TRADING_AMOUNT",
		25: "MARKET_PRICE_COLUMN_ASK_QUANTITY_MARKET",
		26: "MARKET_PRICE_COLUMN_BID_QUANTITY_MARKET",
		27: "MARKET_PRICE_COLUMN_ASK_QUANTITY_OVER",
		28: "MARKET_PRICE_COLUMN_ASK_QUANTITY10",
		29: "MARKET_PRICE_COLUMN_ASK_PRICE10",
		30: "MARKET_PRICE_COLUMN_ASK_QUANTITY9",
		31: "MARKET_PRICE_COLUMN_ASK_PRICE9",
		32: "MARKET_PRICE_COLUMN_ASK_QUANTITY8",
		33: "MARKET_PRICE_COLUMN_ASK_PRICE8",
		34: "MARKET_PRICE_COLUMN_ASK_QUANTITY7",
		35: "MARKET_PRICE_COLUMN_ASK_PRICE7",
		36: "MARKET_PRICE_COLUMN_ASK_QUANTITY6",
		37: "MARKET_PRICE_COLUMN_ASK_PRICE6",
		38: "MARKET_PRICE_COLUMN_ASK_QUANTITY5",
		39: "MARKET_PRICE_COLUMN_ASK_PRICE5",
		40: "MARKET_PRICE_COLUMN_ASK_QUANTITY4",
		41: "MARKET_PRICE_COLUMN_ASK_PRICE4",
		42: "MARKET_PRICE_COLUMN_ASK_QUANTITY3",
		43: "MARKET_PRICE_COLUMN_ASK_PRICE3",
		44: "MARKET_PRICE_COLUMN_ASK_QUANTITY2",
		45: "MARKET_PRICE_COLUMN_ASK_PRICE2",
		46: "MARKET_PRICE_COLUMN_ASK_QUANTITY1",
		47: "MARKET_PRICE_COLUMN_ASK_PRICE1",
		48: "MARKET_PRICE_COLUMN_BID_QUANTITY1",
		49: "MARKET_PRICE_COLUMN_BID_PRICE1",
		50: "MARKET_PRICE_COLUMN_BID_QUANTITY2",
		51: "MARKET_PRICE_COLUMN_BID_PRICE2",
		52: "MARKET_PRICE_COLUMN_BID_QUANTITY3",
		53: "MARKET_PRICE_COLUMN_BID_PRICE3",
		54: "MARKET_PRICE_COLUMN_BID_QUANTITY4",
		55: "MARKET_PRICE_COLUMN_BID_PRICE4",
		56: "MARKET_PRICE_COLUMN_BID_QUANTITY5",
		57: "MARKET_PRICE_COLUMN_BID_PRICE5",
		58: "MARKET_PRICE_COLUMN_BID_QUANTITY6",
		59: "MARKET_PRICE_COLUMN_BID_PRICE6",
		60: "MARKET_PRICE_COLUMN_BID_QUANTITY7",
		61: "MARKET_PRICE_COLUMN_BID_PRICE7",
		62: "MARKET_PRICE_COLUMN_BID_QUANTITY8",
		63: "MARKET_PRICE_COLUMN_BID_PRICE8",
		64: "MARKET_PRICE_COLUMN_BID_QUANTITY9",
		65: "MARKET_PRICE_COLUMN_BID_PRICE9",
		66: "MARKET_PRICE_COLUMN_BID_QUANTITY10",
		67: "MARKET_PRICE_COLUMN_BID_PRICE10",
		68: "MARKET_PRICE_COLUMN_BID_QUANTITY_UNDER",
		69: "MARKET_PRICE_COLUMN_VWAP",
		70: "MARKET_PRICE_COLUMN_PRP",
	}
	MarketPriceColumn_value = map[string]int32{
		"MARKET_PRICE_COLUMN_UNSPECIFIED":         0,
		"MARKET_PRICE_COLUMN_SECTION":             1,
		"MARKET_PRICE_COLUMN_CURRENT_PRICE":       2,
		"MARKET_PRICE_COLUMN_CURRENT_PRICE_TIME":  3,
		"MARKET_PRICE_COLUMN_CHANGE_PRICE_TYPE":   4,
		"MARKET_PRICE_COLUMN_PREV_DAY_RATIO":      5,
		"MARKET_PRICE_COLUMN_PREV_DAY_PERCENT":    6,
		"MARKET_PRICE_COLUMN_OPEN_PRICE":          7,
		"MARKET_PRICE_COLUMN_OPEN_PRICE_TIME":     8,
		"MARKET_PRICE_COLUMN_HIGH_PRICE":          9,
		"MARKET_PRICE_COLUMN_HIGH_PRICE_TIME":     10,
		"MARKET_PRICE_COLUMN_LOW_PRICE":           11,
		"MARKET_PRICE_COLUMN_LOW_PRICE_TIME":      12,
		"MARKET_PRICE_COLUMN_VOLUME":              13,
		"MARKET_PRICE_COLUMN_ASK_SIGN":            14,
		"MARKET_PRICE_COLUMN_ASK_PRICE":           15,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY":        16,
		"MARKET_PRICE_COLUMN_BID_SIGN":            17,
		"MARKET_PRICE_COLUMN_BID_PRICE":           18,
		"MARKET_PRICE_COLUMN_BID_QUANTITY":        19,
		"MARKET_PRICE_COLUMN_EX_RIGHT_TYPE":       20,
		"MARKET_PRICE_COLUMN_DISCONTINUITY_TYPE":  21,
		"MARKET_PRICE_COLUMN_STOP_HIGH":           22,
		"MARKET_PRICE_COLUMN_STOP_LOW":            23,
		"MARKET_PRICE_COLUMN_TRADING_AMOUNT":      24,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY_MARKET": 25,
		"MARKET_PRICE_COLUMN_BID_QUANTITY_MARKET": 26,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY_OVER":   27,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY10":      28,
		"MARKET_PRICE_COLUMN_ASK_PRICE10":         29,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY9":       30,
		"MARKET_PRICE_COLUMN_ASK_PRICE9":          31,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY8":       32,
		"MARKET_PRICE_COLUMN_ASK_PRICE8":          33,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY7":       34,
		"MARKET_PRICE_COLUMN_ASK_PRICE7":          35,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY6":       36,
		"MARKET_PRICE_COLUMN_ASK_PRICE6":          37,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY5":       38,
		"MARKET_PRICE_COLUMN_ASK_PRICE5":          39,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY4":       40,
		"MARKET_PRICE_COLUMN_ASK_PRICE4":          41,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY3":       42,
		"MARKET_PRICE_COLUMN_ASK_PRICE3":          43,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY2":       44,
		"MARKET_PRICE_COLUMN_ASK_PRICE2":          45,
		"MARKET_PRICE_COLUMN_ASK_QUANTITY1":       46,
		"MARKET_PRICE_COLUMN_ASK_PRICE1":          47,
		"MARKET_PRICE_COLUMN_BID_QUANTITY1":       48,
		"MARKET_PRICE_COLUMN_BID_PRICE1":          49,
		"MARKET_PRICE_COLUMN_BID_QUANTITY2":       50,
		"MARKET_PRICE_COLUMN_BID_PRICE2":          51,
		"MARKET_PRICE_COLUMN_BID_QUANTITY3":       52,
		"MARKET_PRICE_COLUMN_BID_PRICE3":          53,
		"MARKET_PRICE_COLUMN_BID_QUANTITY4":       54,
		"MARKET_PRICE_COLUMN_BID_PRICE4":          55,
		"MARKET_PRICE_COLUMN_BID_QUANTITY5":       56,
		"MARKET_PRICE_COLUMN_BID_PRICE5":          57,
		"MARKET_PRICE_COLUMN_BID_QUANTITY6":       58,
		"MARKET_PRICE_COLUMN_BID_PRICE6":          59,
		"MARKET_PRICE_COLUMN_BID_QUANTITY7":       60,
		"MARKET_PRICE_COLUMN_BID_PRICE7":          61,
		"MARKET_PRICE_COLUMN_BID_QUANTITY8":       62,
		"MARKET_PRICE_COLUMN_BID_PRICE8":          63,
		"MARKET_PRICE_COLUMN_BID_QUANTITY9":       64,
		"MARKET_PRICE_COLUMN_BID_PRICE9":          65,
		"MARKET_PRICE_COLUMN_BID_QUANTITY10":      66,
		"MARKET_PRICE_COLUMN_BID_PRICE10":         67,
		"MARKET_PRICE_COLUMN_BID_QUANTITY_UNDER":  68,
		"MARKET_PRICE_COLUMN_VWAP":                69,
		"MARKET_PRICE_COLUMN_PRP":                 70,
	}
)

func (x MarketPriceColumn) Enum() *MarketPriceColumn {
	p := new(MarketPriceColumn)
	*p = x
	return p
}

func (x MarketPriceColumn) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketPriceColumn) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[30].Descriptor()
}

func (MarketPriceColumn) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[30]
}

func (x MarketPriceColumn) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketPriceColumn.Descriptor instead.
func (MarketPriceColumn) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{30}
}

type ChangePriceType int32

const (
	ChangePriceType_CHANGE_PRICE_TYPE_UNSPECIFIED         ChangePriceType = 0 // 未指定
	ChangePriceType_CHANGE_PRICE_TYPE_NO_CHANGE           ChangePriceType = 1 // 事象なし
	ChangePriceType_CHANGE_PRICE_TYPE_EQUAL               ChangePriceType = 2 // 現値=前値
	ChangePriceType_CHANGE_PRICE_TYPE_RISE                ChangePriceType = 3 // 現値>前値
	ChangePriceType_CHANGE_PRICE_TYPE_DOWN                ChangePriceType = 4 // 現値<前値
	ChangePriceType_CHANGE_PRICE_TYPE_OPEN_AFTER_STOPPING ChangePriceType = 5 // 中断板寄後の始値
	ChangePriceType_CHANGE_PRICE_TYPE_ZARABA              ChangePriceType = 6 // ザラバ引け
	ChangePriceType_CHANGE_PRICE_TYPE_CLOSE               ChangePriceType = 7 // 板寄引け
	ChangePriceType_CHANGE_PRICE_TYPE_CLOSE_AT_STOPPING   ChangePriceType = 8 // 中断引け
	ChangePriceType_CHANGE_PRICE_TYPE_STOPPING            ChangePriceType = 9 // 売買停止引け
)

// Enum value maps for ChangePriceType.
var (
	ChangePriceType_name = map[int32]string{
		0: "CHANGE_PRICE_TYPE_UNSPECIFIED",
		1: "CHANGE_PRICE_TYPE_NO_CHANGE",
		2: "CHANGE_PRICE_TYPE_EQUAL",
		3: "CHANGE_PRICE_TYPE_RISE",
		4: "CHANGE_PRICE_TYPE_DOWN",
		5: "CHANGE_PRICE_TYPE_OPEN_AFTER_STOPPING",
		6: "CHANGE_PRICE_TYPE_ZARABA",
		7: "CHANGE_PRICE_TYPE_CLOSE",
		8: "CHANGE_PRICE_TYPE_CLOSE_AT_STOPPING",
		9: "CHANGE_PRICE_TYPE_STOPPING",
	}
	ChangePriceType_value = map[string]int32{
		"CHANGE_PRICE_TYPE_UNSPECIFIED":         0,
		"CHANGE_PRICE_TYPE_NO_CHANGE":           1,
		"CHANGE_PRICE_TYPE_EQUAL":               2,
		"CHANGE_PRICE_TYPE_RISE":                3,
		"CHANGE_PRICE_TYPE_DOWN":                4,
		"CHANGE_PRICE_TYPE_OPEN_AFTER_STOPPING": 5,
		"CHANGE_PRICE_TYPE_ZARABA":              6,
		"CHANGE_PRICE_TYPE_CLOSE":               7,
		"CHANGE_PRICE_TYPE_CLOSE_AT_STOPPING":   8,
		"CHANGE_PRICE_TYPE_STOPPING":            9,
	}
)

func (x ChangePriceType) Enum() *ChangePriceType {
	p := new(ChangePriceType)
	*p = x
	return p
}

func (x ChangePriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangePriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[31].Descriptor()
}

func (ChangePriceType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[31]
}

func (x ChangePriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangePriceType.Descriptor instead.
func (ChangePriceType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{31}
}

type IndicationPriceType int32

const (
	IndicationPriceType_INDICATION_PRICE_TYPE_UNSPECIFIED                IndicationPriceType = 0 // 未指定
	IndicationPriceType_INDICATION_PRICE_TYPE_NO_CHANGE                  IndicationPriceType = 1 // 事象なし
	IndicationPriceType_INDICATION_PRICE_TYPE_GENERAL                    IndicationPriceType = 2 // 一般気配
	IndicationPriceType_INDICATION_PRICE_TYPE_SPECIFIC                   IndicationPriceType = 3 // 特別気配
	IndicationPriceType_INDICATION_PRICE_TYPE_BEFORE_OPENING             IndicationPriceType = 4 // 寄前気配
	IndicationPriceType_INDICATION_PRICE_TYPE_BEFORE_CLOSING             IndicationPriceType = 5 // 停止前特別気配
	IndicationPriceType_INDICATION_PRICE_TYPE_CONTINUANCE                IndicationPriceType = 6 // 連続約定気配
	IndicationPriceType_INDICATION_PRICE_TYPE_CONTINUANCE_BEFORE_CLOSING IndicationPriceType = 7 // 停止前の連続約定気配
	IndicationPriceType_INDICATION_PRICE_TYPE_MOVING                     IndicationPriceType = 8 // 一般気配、買上がり・売下がり中
)

// Enum value maps for IndicationPriceType.
var (
	IndicationPriceType_name = map[int32]string{
		0: "INDICATION_PRICE_TYPE_UNSPECIFIED",
		1: "INDICATION_PRICE_TYPE_NO_CHANGE",
		2: "INDICATION_PRICE_TYPE_GENERAL",
		3: "INDICATION_PRICE_TYPE_SPECIFIC",
		4: "INDICATION_PRICE_TYPE_BEFORE_OPENING",
		5: "INDICATION_PRICE_TYPE_BEFORE_CLOSING",
		6: "INDICATION_PRICE_TYPE_CONTINUANCE",
		7: "INDICATION_PRICE_TYPE_CONTINUANCE_BEFORE_CLOSING",
		8: "INDICATION_PRICE_TYPE_MOVING",
	}
	IndicationPriceType_value = map[string]int32{
		"INDICATION_PRICE_TYPE_UNSPECIFIED":                0,
		"INDICATION_PRICE_TYPE_NO_CHANGE":                  1,
		"INDICATION_PRICE_TYPE_GENERAL":                    2,
		"INDICATION_PRICE_TYPE_SPECIFIC":                   3,
		"INDICATION_PRICE_TYPE_BEFORE_OPENING":             4,
		"INDICATION_PRICE_TYPE_BEFORE_CLOSING":             5,
		"INDICATION_PRICE_TYPE_CONTINUANCE":                6,
		"INDICATION_PRICE_TYPE_CONTINUANCE_BEFORE_CLOSING": 7,
		"INDICATION_PRICE_TYPE_MOVING":                     8,
	}
)

func (x IndicationPriceType) Enum() *IndicationPriceType {
	p := new(IndicationPriceType)
	*p = x
	return p
}

func (x IndicationPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndicationPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[32].Descriptor()
}

func (IndicationPriceType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[32]
}

func (x IndicationPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndicationPriceType.Descriptor instead.
func (IndicationPriceType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{32}
}

type CurrentPriceType int32

const (
	CurrentPriceType_CURRENT_PRICE_TYPE_UNSPECIFIED CurrentPriceType = 0 // 未指定
	CurrentPriceType_CURRENT_PRICE_TYPE_NO_CHANGE   CurrentPriceType = 1 // 事象なし
	CurrentPriceType_CURRENT_PRICE_TYPE_STOP_HIGH   CurrentPriceType = 2 // ストップ高
	CurrentPriceType_CURRENT_PRICE_TYPE_STOP_LOW    CurrentPriceType = 3 // ストップ安
)

// Enum value maps for CurrentPriceType.
var (
	CurrentPriceType_name = map[int32]string{
		0: "CURRENT_PRICE_TYPE_UNSPECIFIED",
		1: "CURRENT_PRICE_TYPE_NO_CHANGE",
		2: "CURRENT_PRICE_TYPE_STOP_HIGH",
		3: "CURRENT_PRICE_TYPE_STOP_LOW",
	}
	CurrentPriceType_value = map[string]int32{
		"CURRENT_PRICE_TYPE_UNSPECIFIED": 0,
		"CURRENT_PRICE_TYPE_NO_CHANGE":   1,
		"CURRENT_PRICE_TYPE_STOP_HIGH":   2,
		"CURRENT_PRICE_TYPE_STOP_LOW":    3,
	}
)

func (x CurrentPriceType) Enum() *CurrentPriceType {
	p := new(CurrentPriceType)
	*p = x
	return p
}

func (x CurrentPriceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CurrentPriceType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[33].Descriptor()
}

func (CurrentPriceType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[33]
}

func (x CurrentPriceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CurrentPriceType.Descriptor instead.
func (CurrentPriceType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{33}
}

type DayKey int32

const (
	DayKey_DAY_KEY_UNSPECIFIED DayKey = 0 // 未指定
	DayKey_DAY_KEY_TODAY       DayKey = 1 // 当日基準
	DayKey_DAY_KEY_NEXT_DAY    DayKey = 2 // 翌日基準
)

// Enum value maps for DayKey.
var (
	DayKey_name = map[int32]string{
		0: "DAY_KEY_UNSPECIFIED",
		1: "DAY_KEY_TODAY",
		2: "DAY_KEY_NEXT_DAY",
	}
	DayKey_value = map[string]int32{
		"DAY_KEY_UNSPECIFIED": 0,
		"DAY_KEY_TODAY":       1,
		"DAY_KEY_NEXT_DAY":    2,
	}
)

func (x DayKey) Enum() *DayKey {
	p := new(DayKey)
	*p = x
	return p
}

func (x DayKey) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DayKey) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[34].Descriptor()
}

func (DayKey) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[34]
}

func (x DayKey) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DayKey.Descriptor instead.
func (DayKey) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{34}
}

type EventType int32

const (
	EventType_EVENT_TYPE_UNSPECIFIED  EventType = 0 // 未指定
	EventType_EVENT_TYPE_ERROR_STATUS EventType = 1 // エラーステータス情報配信指定
	//  EVENT_TYPE_KEEPALIVE = 2; // キープアライブ情報配信指定
	EventType_EVENT_TYPE_MARKET_PRICE     EventType = 3 // 時価情報配信指定
	EventType_EVENT_TYPE_CONTRACT         EventType = 4 // 注文約定通知イベント配信指定
	EventType_EVENT_TYPE_NEWS             EventType = 5 // ニュース通知イベント配信指定
	EventType_EVENT_TYPE_SYSTEM_STATUS    EventType = 6 // システムステータス配信指定
	EventType_EVENT_TYPE_OPERATION_STATUS EventType = 7 // 運用ステータス配信指定
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0: "EVENT_TYPE_UNSPECIFIED",
		1: "EVENT_TYPE_ERROR_STATUS",
		3: "EVENT_TYPE_MARKET_PRICE",
		4: "EVENT_TYPE_CONTRACT",
		5: "EVENT_TYPE_NEWS",
		6: "EVENT_TYPE_SYSTEM_STATUS",
		7: "EVENT_TYPE_OPERATION_STATUS",
	}
	EventType_value = map[string]int32{
		"EVENT_TYPE_UNSPECIFIED":      0,
		"EVENT_TYPE_ERROR_STATUS":     1,
		"EVENT_TYPE_MARKET_PRICE":     3,
		"EVENT_TYPE_CONTRACT":         4,
		"EVENT_TYPE_NEWS":             5,
		"EVENT_TYPE_SYSTEM_STATUS":    6,
		"EVENT_TYPE_OPERATION_STATUS": 7,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[35].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[35]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{35}
}

type ApprovalLogin int32

const (
	ApprovalLogin_APPROVAL_LOGIN_UNSPECIFIED    ApprovalLogin = 0 // 未指定
	ApprovalLogin_APPROVAL_LOGIN_UN_APPROVAL    ApprovalLogin = 1 // 不許可
	ApprovalLogin_APPROVAL_LOGIN_APPROVAL       ApprovalLogin = 2 // 許可
	ApprovalLogin_APPROVAL_LOGIN_OUT_OF_SERVICE ApprovalLogin = 3 // 不許可(サービス時間外)
	ApprovalLogin_APPROVAL_LOGIN_TESTING        ApprovalLogin = 4 // 管理者のみ(テスト中)
)

// Enum value maps for ApprovalLogin.
var (
	ApprovalLogin_name = map[int32]string{
		0: "APPROVAL_LOGIN_UNSPECIFIED",
		1: "APPROVAL_LOGIN_UN_APPROVAL",
		2: "APPROVAL_LOGIN_APPROVAL",
		3: "APPROVAL_LOGIN_OUT_OF_SERVICE",
		4: "APPROVAL_LOGIN_TESTING",
	}
	ApprovalLogin_value = map[string]int32{
		"APPROVAL_LOGIN_UNSPECIFIED":    0,
		"APPROVAL_LOGIN_UN_APPROVAL":    1,
		"APPROVAL_LOGIN_APPROVAL":       2,
		"APPROVAL_LOGIN_OUT_OF_SERVICE": 3,
		"APPROVAL_LOGIN_TESTING":        4,
	}
)

func (x ApprovalLogin) Enum() *ApprovalLogin {
	p := new(ApprovalLogin)
	*p = x
	return p
}

func (x ApprovalLogin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalLogin) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[36].Descriptor()
}

func (ApprovalLogin) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[36]
}

func (x ApprovalLogin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalLogin.Descriptor instead.
func (ApprovalLogin) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{36}
}

type SystemStatus int32

const (
	SystemStatus_SYSTEM_STATUS_UNSPECIFIED SystemStatus = 0 // 未指定
	SystemStatus_SYSTEM_STATUS_CLOSING     SystemStatus = 1 // 閉局
	SystemStatus_SYSTEM_STATUS_OPENING     SystemStatus = 2 // 開局
	SystemStatus_SYSTEM_STATUS_PAUSE       SystemStatus = 3 // 一時停止
)

// Enum value maps for SystemStatus.
var (
	SystemStatus_name = map[int32]string{
		0: "SYSTEM_STATUS_UNSPECIFIED",
		1: "SYSTEM_STATUS_CLOSING",
		2: "SYSTEM_STATUS_OPENING",
		3: "SYSTEM_STATUS_PAUSE",
	}
	SystemStatus_value = map[string]int32{
		"SYSTEM_STATUS_UNSPECIFIED": 0,
		"SYSTEM_STATUS_CLOSING":     1,
		"SYSTEM_STATUS_OPENING":     2,
		"SYSTEM_STATUS_PAUSE":       3,
	}
)

func (x SystemStatus) Enum() *SystemStatus {
	p := new(SystemStatus)
	*p = x
	return p
}

func (x SystemStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[37].Descriptor()
}

func (SystemStatus) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[37]
}

func (x SystemStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemStatus.Descriptor instead.
func (SystemStatus) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{37}
}

type StreamOrderType int32

const (
	StreamOrderType_STREAM_ORDER_TYPE_UNSPECIFIED           StreamOrderType = 0  // 未指定
	StreamOrderType_STREAM_ORDER_TYPE_RECEIVE_ORDER         StreamOrderType = 1  // 注文受付
	StreamOrderType_STREAM_ORDER_TYPE_RECEIVE_CORRECT       StreamOrderType = 2  // 訂正受付
	StreamOrderType_STREAM_ORDER_TYPE_RECEIVE_CANCEL        StreamOrderType = 3  // 取消受付
	StreamOrderType_STREAM_ORDER_TYPE_RECEIVE_ERROR         StreamOrderType = 4  // 注文受付エラー
	StreamOrderType_STREAM_ORDER_TYPE_RECEIVE_CORRECT_ERROR StreamOrderType = 5  // 訂正受付エラー
	StreamOrderType_STREAM_ORDER_TYPE_RECEIVE_CANCEL_ERROR  StreamOrderType = 6  // 取消受付エラー
	StreamOrderType_STREAM_ORDER_TYPE_ORDER_ERROR           StreamOrderType = 7  // 新規登録エラー
	StreamOrderType_STREAM_ORDER_TYPE_CORRECT_ERROR         StreamOrderType = 8  // 訂正登録エラー
	StreamOrderType_STREAM_ORDER_TYPE_CANCEL_ERROR          StreamOrderType = 9  // 取消登録エラー
	StreamOrderType_STREAM_ORDER_TYPE_CORRECTED             StreamOrderType = 10 // 訂正完了
	StreamOrderType_STREAM_ORDER_TYPE_CANCELED              StreamOrderType = 11 // 取消完了
	StreamOrderType_STREAM_ORDER_TYPE_CONTRACT              StreamOrderType = 12 // 約定成立
	StreamOrderType_STREAM_ORDER_TYPE_EXPIRE                StreamOrderType = 13 // 失効
	StreamOrderType_STREAM_ORDER_TYPE_EXPIRE_CONTINUE       StreamOrderType = 14 // 失効（連続注文）
	StreamOrderType_STREAM_ORDER_TYPE_CANCEL_CONTRACT       StreamOrderType = 15 // 約定取消
	StreamOrderType_STREAM_ORDER_TYPE_CARRYOVER             StreamOrderType = 16 // 注文繰越
	StreamOrderType_STREAM_ORDER_TYPE_RECEIVED              StreamOrderType = 17 // 注文状態変更
)

// Enum value maps for StreamOrderType.
var (
	StreamOrderType_name = map[int32]string{
		0:  "STREAM_ORDER_TYPE_UNSPECIFIED",
		1:  "STREAM_ORDER_TYPE_RECEIVE_ORDER",
		2:  "STREAM_ORDER_TYPE_RECEIVE_CORRECT",
		3:  "STREAM_ORDER_TYPE_RECEIVE_CANCEL",
		4:  "STREAM_ORDER_TYPE_RECEIVE_ERROR",
		5:  "STREAM_ORDER_TYPE_RECEIVE_CORRECT_ERROR",
		6:  "STREAM_ORDER_TYPE_RECEIVE_CANCEL_ERROR",
		7:  "STREAM_ORDER_TYPE_ORDER_ERROR",
		8:  "STREAM_ORDER_TYPE_CORRECT_ERROR",
		9:  "STREAM_ORDER_TYPE_CANCEL_ERROR",
		10: "STREAM_ORDER_TYPE_CORRECTED",
		11: "STREAM_ORDER_TYPE_CANCELED",
		12: "STREAM_ORDER_TYPE_CONTRACT",
		13: "STREAM_ORDER_TYPE_EXPIRE",
		14: "STREAM_ORDER_TYPE_EXPIRE_CONTINUE",
		15: "STREAM_ORDER_TYPE_CANCEL_CONTRACT",
		16: "STREAM_ORDER_TYPE_CARRYOVER",
		17: "STREAM_ORDER_TYPE_RECEIVED",
	}
	StreamOrderType_value = map[string]int32{
		"STREAM_ORDER_TYPE_UNSPECIFIED":           0,
		"STREAM_ORDER_TYPE_RECEIVE_ORDER":         1,
		"STREAM_ORDER_TYPE_RECEIVE_CORRECT":       2,
		"STREAM_ORDER_TYPE_RECEIVE_CANCEL":        3,
		"STREAM_ORDER_TYPE_RECEIVE_ERROR":         4,
		"STREAM_ORDER_TYPE_RECEIVE_CORRECT_ERROR": 5,
		"STREAM_ORDER_TYPE_RECEIVE_CANCEL_ERROR":  6,
		"STREAM_ORDER_TYPE_ORDER_ERROR":           7,
		"STREAM_ORDER_TYPE_CORRECT_ERROR":         8,
		"STREAM_ORDER_TYPE_CANCEL_ERROR":          9,
		"STREAM_ORDER_TYPE_CORRECTED":             10,
		"STREAM_ORDER_TYPE_CANCELED":              11,
		"STREAM_ORDER_TYPE_CONTRACT":              12,
		"STREAM_ORDER_TYPE_EXPIRE":                13,
		"STREAM_ORDER_TYPE_EXPIRE_CONTINUE":       14,
		"STREAM_ORDER_TYPE_CANCEL_CONTRACT":       15,
		"STREAM_ORDER_TYPE_CARRYOVER":             16,
		"STREAM_ORDER_TYPE_RECEIVED":              17,
	}
)

func (x StreamOrderType) Enum() *StreamOrderType {
	p := new(StreamOrderType)
	*p = x
	return p
}

func (x StreamOrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamOrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[38].Descriptor()
}

func (StreamOrderType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[38]
}

func (x StreamOrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamOrderType.Descriptor instead.
func (StreamOrderType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{38}
}

type ProductType int32

const (
	ProductType_PRODUCT_TYPE_UNSPECIFIED ProductType = 0 // 未指定
	ProductType_PRODUCT_TYPE_STOCK       ProductType = 1 // 株式
	ProductType_PRODUCT_TYPE_FUTURE      ProductType = 2 // 先物
	ProductType_PRODUCT_TYPE_OPTION      ProductType = 3 // オプション
)

// Enum value maps for ProductType.
var (
	ProductType_name = map[int32]string{
		0: "PRODUCT_TYPE_UNSPECIFIED",
		1: "PRODUCT_TYPE_STOCK",
		2: "PRODUCT_TYPE_FUTURE",
		3: "PRODUCT_TYPE_OPTION",
	}
	ProductType_value = map[string]int32{
		"PRODUCT_TYPE_UNSPECIFIED": 0,
		"PRODUCT_TYPE_STOCK":       1,
		"PRODUCT_TYPE_FUTURE":      2,
		"PRODUCT_TYPE_OPTION":      3,
	}
)

func (x ProductType) Enum() *ProductType {
	p := new(ProductType)
	*p = x
	return p
}

func (x ProductType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[39].Descriptor()
}

func (ProductType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[39]
}

func (x ProductType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductType.Descriptor instead.
func (ProductType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{39}
}

type StreamOrderStatus int32

const (
	StreamOrderStatus_STREAM_ORDER_STATUS_UNSPECIFIED        StreamOrderStatus = 0 // 未指定
	StreamOrderStatus_STREAM_ORDER_STATUS_NEW                StreamOrderStatus = 1 // 受付未済
	StreamOrderStatus_STREAM_ORDER_STATUS_RECEIVED           StreamOrderStatus = 2 // 受付済
	StreamOrderStatus_STREAM_ORDER_STATUS_ERROR              StreamOrderStatus = 3 // 受付エラー
	StreamOrderStatus_STREAM_ORDER_STATUS_PART_EXPIRED       StreamOrderStatus = 4 // 一部失効
	StreamOrderStatus_STREAM_ORDER_STATUS_EXPIRED            StreamOrderStatus = 5 // 全部失効
	StreamOrderStatus_STREAM_ORDER_STATUS_CARRY_OVER_EXPIRED StreamOrderStatus = 6 // 繰越失効
)

// Enum value maps for StreamOrderStatus.
var (
	StreamOrderStatus_name = map[int32]string{
		0: "STREAM_ORDER_STATUS_UNSPECIFIED",
		1: "STREAM_ORDER_STATUS_NEW",
		2: "STREAM_ORDER_STATUS_RECEIVED",
		3: "STREAM_ORDER_STATUS_ERROR",
		4: "STREAM_ORDER_STATUS_PART_EXPIRED",
		5: "STREAM_ORDER_STATUS_EXPIRED",
		6: "STREAM_ORDER_STATUS_CARRY_OVER_EXPIRED",
	}
	StreamOrderStatus_value = map[string]int32{
		"STREAM_ORDER_STATUS_UNSPECIFIED":        0,
		"STREAM_ORDER_STATUS_NEW":                1,
		"STREAM_ORDER_STATUS_RECEIVED":           2,
		"STREAM_ORDER_STATUS_ERROR":              3,
		"STREAM_ORDER_STATUS_PART_EXPIRED":       4,
		"STREAM_ORDER_STATUS_EXPIRED":            5,
		"STREAM_ORDER_STATUS_CARRY_OVER_EXPIRED": 6,
	}
)

func (x StreamOrderStatus) Enum() *StreamOrderStatus {
	p := new(StreamOrderStatus)
	*p = x
	return p
}

func (x StreamOrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamOrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[40].Descriptor()
}

func (StreamOrderStatus) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[40]
}

func (x StreamOrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamOrderStatus.Descriptor instead.
func (StreamOrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{40}
}

type CancelOrderStatus int32

const (
	CancelOrderStatus_CANCEL_ORDER_STATUS_UNSPECIFIED    CancelOrderStatus = 0  // 未指定
	CancelOrderStatus_CANCEL_ORDER_STATUS_NO_CORRECT     CancelOrderStatus = 1  // 訂正なし
	CancelOrderStatus_CANCEL_ORDER_STATUS_INCORRECT      CancelOrderStatus = 2  // 訂正中
	CancelOrderStatus_CANCEL_ORDER_STATUS_IN_CANCEL      CancelOrderStatus = 3  // 取消中
	CancelOrderStatus_CANCEL_ORDER_STATUS_CORRECTED      CancelOrderStatus = 4  // 訂正完了
	CancelOrderStatus_CANCEL_ORDER_STATUS_CANCELED       CancelOrderStatus = 5  // 取消完了
	CancelOrderStatus_CANCEL_ORDER_STATUS_CORRECT_FAILED CancelOrderStatus = 6  // 訂正失敗
	CancelOrderStatus_CANCEL_ORDER_STATUS_CANCEL_FAILED  CancelOrderStatus = 7  // 取消失敗
	CancelOrderStatus_CANCEL_ORDER_STATUS_SWITCH         CancelOrderStatus = 8  // 切替注文
	CancelOrderStatus_CANCEL_ORDER_STATUS_SWITCHED       CancelOrderStatus = 9  // 切替完了
	CancelOrderStatus_CANCEL_ORDER_STATUS_SWITCH_FAILED  CancelOrderStatus = 10 // 切替注文失敗
)

// Enum value maps for CancelOrderStatus.
var (
	CancelOrderStatus_name = map[int32]string{
		0:  "CANCEL_ORDER_STATUS_UNSPECIFIED",
		1:  "CANCEL_ORDER_STATUS_NO_CORRECT",
		2:  "CANCEL_ORDER_STATUS_INCORRECT",
		3:  "CANCEL_ORDER_STATUS_IN_CANCEL",
		4:  "CANCEL_ORDER_STATUS_CORRECTED",
		5:  "CANCEL_ORDER_STATUS_CANCELED",
		6:  "CANCEL_ORDER_STATUS_CORRECT_FAILED",
		7:  "CANCEL_ORDER_STATUS_CANCEL_FAILED",
		8:  "CANCEL_ORDER_STATUS_SWITCH",
		9:  "CANCEL_ORDER_STATUS_SWITCHED",
		10: "CANCEL_ORDER_STATUS_SWITCH_FAILED",
	}
	CancelOrderStatus_value = map[string]int32{
		"CANCEL_ORDER_STATUS_UNSPECIFIED":    0,
		"CANCEL_ORDER_STATUS_NO_CORRECT":     1,
		"CANCEL_ORDER_STATUS_INCORRECT":      2,
		"CANCEL_ORDER_STATUS_IN_CANCEL":      3,
		"CANCEL_ORDER_STATUS_CORRECTED":      4,
		"CANCEL_ORDER_STATUS_CANCELED":       5,
		"CANCEL_ORDER_STATUS_CORRECT_FAILED": 6,
		"CANCEL_ORDER_STATUS_CANCEL_FAILED":  7,
		"CANCEL_ORDER_STATUS_SWITCH":         8,
		"CANCEL_ORDER_STATUS_SWITCHED":       9,
		"CANCEL_ORDER_STATUS_SWITCH_FAILED":  10,
	}
)

func (x CancelOrderStatus) Enum() *CancelOrderStatus {
	p := new(CancelOrderStatus)
	*p = x
	return p
}

func (x CancelOrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelOrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[41].Descriptor()
}

func (CancelOrderStatus) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[41]
}

func (x CancelOrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelOrderStatus.Descriptor instead.
func (CancelOrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{41}
}

type CommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No           int64                  `protobuf:"varint,1,opt,name=No,proto3" json:"No,omitempty"`                                                                   // 送信通番
	SendDate     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=send_date,json=sendDate,proto3" json:"send_date,omitempty"`                                        // 送信日時
	ReceiveDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=receive_date,json=receiveDate,proto3" json:"receive_date,omitempty"`                               // 受信日時
	ErrorNo      ErrorNo                `protobuf:"varint,4,opt,name=error_no,json=errorNo,proto3,enum=tachibanapb.ErrorNo" json:"error_no,omitempty"`                 // エラー番号
	ErrorMessage string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                            // エラー文言
	MessageType  MessageType            `protobuf:"varint,6,opt,name=message_type,json=messageType,proto3,enum=tachibanapb.MessageType" json:"message_type,omitempty"` // 機能ID
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResponse) GetNo() int64 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *CommonResponse) GetSendDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SendDate
	}
	return nil
}

func (x *CommonResponse) GetReceiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDate
	}
	return nil
}

func (x *CommonResponse) GetErrorNo() ErrorNo {
	if x != nil {
		return x.ErrorNo
	}
	return ErrorNo_ERROR_NO_UNSPECIFIED
}

func (x *CommonResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CommonResponse) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`             // ユーザID
	Password   string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`                       // パスワード
	ClientName string `protobuf:"bytes,3,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"` // クライアント名
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{1}
}

func (x *LoginRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *LoginRequest) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse            *CommonResponse        `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`                                                                           // レスポンス共通項目
	ResultCode                string                 `protobuf:"bytes,2,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`                                                                                       // 結果コード
	ResultText                string                 `protobuf:"bytes,3,opt,name=result_text,json=resultText,proto3" json:"result_text,omitempty"`                                                                                       // 結果テキスト
	AccountType               AccountType            `protobuf:"varint,4,opt,name=account_type,json=accountType,proto3,enum=tachibanapb.AccountType" json:"account_type,omitempty"`                                                      // 譲渡益課税区分
	SecondPasswordOmit        bool                   `protobuf:"varint,5,opt,name=second_password_omit,json=secondPasswordOmit,proto3" json:"second_password_omit,omitempty"`                                                            // 暗証番号省略有無C
	LastLoginDatetime         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_login_datetime,json=lastLoginDatetime,proto3" json:"last_login_datetime,omitempty"`                                                                // 最終ログイン日時
	GeneralAccount            bool                   `protobuf:"varint,7,opt,name=general_account,json=generalAccount,proto3" json:"general_account,omitempty"`                                                                          // 総合口座開設区分
	SafekeepingAccount        bool                   `protobuf:"varint,8,opt,name=safekeeping_account,json=safekeepingAccount,proto3" json:"safekeeping_account,omitempty"`                                                              // 保護預り口座開設区分
	TransferAccount           bool                   `protobuf:"varint,9,opt,name=transfer_account,json=transferAccount,proto3" json:"transfer_account,omitempty"`                                                                       // 振替決済口座開設区分
	ForeignAccount            bool                   `protobuf:"varint,10,opt,name=foreign_account,json=foreignAccount,proto3" json:"foreign_account,omitempty"`                                                                         // 外国口座開設区分
	MrfAccount                bool                   `protobuf:"varint,11,opt,name=mrf_account,json=mrfAccount,proto3" json:"mrf_account,omitempty"`                                                                                     // MRF口座開設区分
	StockSpecificAccount      SpecificAccountType    `protobuf:"varint,12,opt,name=stock_specific_account,json=stockSpecificAccount,proto3,enum=tachibanapb.SpecificAccountType" json:"stock_specific_account,omitempty"`                // 特定口座区分現物
	MarginSpecificAccount     SpecificAccountType    `protobuf:"varint,13,opt,name=margin_specific_account,json=marginSpecificAccount,proto3,enum=tachibanapb.SpecificAccountType" json:"margin_specific_account,omitempty"`             // 特定口座区分信用
	InvestmentSpecificAccount SpecificAccountType    `protobuf:"varint,14,opt,name=investment_specific_account,json=investmentSpecificAccount,proto3,enum=tachibanapb.SpecificAccountType" json:"investment_specific_account,omitempty"` // 特定口座区分投信
	DividendAccount           bool                   `protobuf:"varint,15,opt,name=dividend_account,json=dividendAccount,proto3" json:"dividend_account,omitempty"`                                                                      // 配当特定口座区分
	SpecificAccount           bool                   `protobuf:"varint,16,opt,name=specific_account,json=specificAccount,proto3" json:"specific_account,omitempty"`                                                                      // 特定管理口座開設区分
	MarginAccount             bool                   `protobuf:"varint,17,opt,name=margin_account,json=marginAccount,proto3" json:"margin_account,omitempty"`                                                                            // 信用取引口座開設区分
	FutureOptionAccount       bool                   `protobuf:"varint,18,opt,name=future_option_account,json=futureOptionAccount,proto3" json:"future_option_account,omitempty"`                                                        // 先物OP口座開設区分
	MmfAccount                bool                   `protobuf:"varint,19,opt,name=mmf_account,json=mmfAccount,proto3" json:"mmf_account,omitempty"`                                                                                     // MMF口座開設区分
	ChinaForeignAccount       bool                   `protobuf:"varint,20,opt,name=china_foreign_account,json=chinaForeignAccount,proto3" json:"china_foreign_account,omitempty"`                                                        // 中国F口座開設区分
	FxAccount                 bool                   `protobuf:"varint,21,opt,name=fx_account,json=fxAccount,proto3" json:"fx_account,omitempty"`                                                                                        // 為替保証金口座開設区分
	NisaAccount               bool                   `protobuf:"varint,22,opt,name=nisa_account,json=nisaAccount,proto3" json:"nisa_account,omitempty"`                                                                                  // 非課税口座開設区分
	UnreadDocument            bool                   `protobuf:"varint,23,opt,name=unread_document,json=unreadDocument,proto3" json:"unread_document,omitempty"`                                                                         // 金商法交付書面未読フラグ
	Token                     string                 `protobuf:"bytes,24,opt,name=token,proto3" json:"token,omitempty"`                                                                                                                  // トークン
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{2}
}

func (x *LoginResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *LoginResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *LoginResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

func (x *LoginResponse) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetSecondPasswordOmit() bool {
	if x != nil {
		return x.SecondPasswordOmit
	}
	return false
}

func (x *LoginResponse) GetLastLoginDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLoginDatetime
	}
	return nil
}

func (x *LoginResponse) GetGeneralAccount() bool {
	if x != nil {
		return x.GeneralAccount
	}
	return false
}

func (x *LoginResponse) GetSafekeepingAccount() bool {
	if x != nil {
		return x.SafekeepingAccount
	}
	return false
}

func (x *LoginResponse) GetTransferAccount() bool {
	if x != nil {
		return x.TransferAccount
	}
	return false
}

func (x *LoginResponse) GetForeignAccount() bool {
	if x != nil {
		return x.ForeignAccount
	}
	return false
}

func (x *LoginResponse) GetMrfAccount() bool {
	if x != nil {
		return x.MrfAccount
	}
	return false
}

func (x *LoginResponse) GetStockSpecificAccount() SpecificAccountType {
	if x != nil {
		return x.StockSpecificAccount
	}
	return SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetMarginSpecificAccount() SpecificAccountType {
	if x != nil {
		return x.MarginSpecificAccount
	}
	return SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetInvestmentSpecificAccount() SpecificAccountType {
	if x != nil {
		return x.InvestmentSpecificAccount
	}
	return SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetDividendAccount() bool {
	if x != nil {
		return x.DividendAccount
	}
	return false
}

func (x *LoginResponse) GetSpecificAccount() bool {
	if x != nil {
		return x.SpecificAccount
	}
	return false
}

func (x *LoginResponse) GetMarginAccount() bool {
	if x != nil {
		return x.MarginAccount
	}
	return false
}

func (x *LoginResponse) GetFutureOptionAccount() bool {
	if x != nil {
		return x.FutureOptionAccount
	}
	return false
}

func (x *LoginResponse) GetMmfAccount() bool {
	if x != nil {
		return x.MmfAccount
	}
	return false
}

func (x *LoginResponse) GetChinaForeignAccount() bool {
	if x != nil {
		return x.ChinaForeignAccount
	}
	return false
}

func (x *LoginResponse) GetFxAccount() bool {
	if x != nil {
		return x.FxAccount
	}
	return false
}

func (x *LoginResponse) GetNisaAccount() bool {
	if x != nil {
		return x.NisaAccount
	}
	return false
}

func (x *LoginResponse) GetUnreadDocument() bool {
	if x != nil {
		return x.UnreadDocument
	}
	return false
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type NewOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountType         AccountType            `protobuf:"varint,1,opt,name=account_type,json=accountType,proto3,enum=tachibanapb.AccountType" json:"account_type,omitempty"`                                   // 譲渡益課税区分
	DeliveryAccountType DeliveryAccountType    `protobuf:"varint,2,opt,name=delivery_account_type,json=deliveryAccountType,proto3,enum=tachibanapb.DeliveryAccountType" json:"delivery_account_type,omitempty"` // 建玉譲渡益課税区分
	IssueCode           string                 `protobuf:"bytes,3,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`                                                                       // 銘柄コード
	Exchange            Exchange               `protobuf:"varint,4,opt,name=exchange,proto3,enum=tachibanapb.Exchange" json:"exchange,omitempty"`                                                               // 市場
	Side                Side                   `protobuf:"varint,5,opt,name=side,proto3,enum=tachibanapb.Side" json:"side,omitempty"`                                                                           // 売買区分
	ExecutionTiming     ExecutionTiming        `protobuf:"varint,6,opt,name=execution_timing,json=executionTiming,proto3,enum=tachibanapb.ExecutionTiming" json:"execution_timing,omitempty"`                   // 執行条件
	OrderPrice          float64                `protobuf:"fixed64,7,opt,name=order_price,json=orderPrice,proto3" json:"order_price,omitempty"`                                                                  // 注文値段
	OrderQuantity       float64                `protobuf:"fixed64,8,opt,name=order_quantity,json=orderQuantity,proto3" json:"order_quantity,omitempty"`                                                         // 注文数量
	TradeType           TradeType              `protobuf:"varint,9,opt,name=trade_type,json=tradeType,proto3,enum=tachibanapb.TradeType" json:"trade_type,omitempty"`                                           // 現金信用区分
	ExpireDate          *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`                                                                   // 注文期日
	ExpireDateIsToday   bool                   `protobuf:"varint,11,opt,name=expire_date_is_today,json=expireDateIsToday,proto3" json:"expire_date_is_today,omitempty"`                                         // 注文期日を当日
	StopOrderType       StopOrderType          `protobuf:"varint,12,opt,name=stop_order_type,json=stopOrderType,proto3,enum=tachibanapb.StopOrderType" json:"stop_order_type,omitempty"`                        // 逆指値注文種別
	TriggerPrice        float64                `protobuf:"fixed64,13,opt,name=trigger_price,json=triggerPrice,proto3" json:"trigger_price,omitempty"`                                                           // 逆指値条件
	StopOrderPrice      float64                `protobuf:"fixed64,14,opt,name=stop_order_price,json=stopOrderPrice,proto3" json:"stop_order_price,omitempty"`                                                   // 逆指値値段
	ExitPositionType    ExitPositionType       `protobuf:"varint,15,opt,name=exit_position_type,json=exitPositionType,proto3,enum=tachibanapb.ExitPositionType" json:"exit_position_type,omitempty"`            // 建日種類(返済ポジション指定方法)
	SecondPassword      string                 `protobuf:"bytes,16,opt,name=second_password,json=secondPassword,proto3" json:"second_password,omitempty"`                                                       // 第二パスワード
	ExitPositions       []*ExitPosition        `protobuf:"bytes,17,rep,name=exit_positions,json=exitPositions,proto3" json:"exit_positions,omitempty"`                                                          // 返済リスト
}

func (x *NewOrderRequest) Reset() {
	*x = NewOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrderRequest) ProtoMessage() {}

func (x *NewOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrderRequest.ProtoReflect.Descriptor instead.
func (*NewOrderRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{3}
}

func (x *NewOrderRequest) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *NewOrderRequest) GetDeliveryAccountType() DeliveryAccountType {
	if x != nil {
		return x.DeliveryAccountType
	}
	return DeliveryAccountType_DELIVERY_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *NewOrderRequest) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *NewOrderRequest) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *NewOrderRequest) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *NewOrderRequest) GetExecutionTiming() ExecutionTiming {
	if x != nil {
		return x.ExecutionTiming
	}
	return ExecutionTiming_EXECUTION_TIMING_UNSPECIFIED
}

func (x *NewOrderRequest) GetOrderPrice() float64 {
	if x != nil {
		return x.OrderPrice
	}
	return 0
}

func (x *NewOrderRequest) GetOrderQuantity() float64 {
	if x != nil {
		return x.OrderQuantity
	}
	return 0
}

func (x *NewOrderRequest) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *NewOrderRequest) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *NewOrderRequest) GetExpireDateIsToday() bool {
	if x != nil {
		return x.ExpireDateIsToday
	}
	return false
}

func (x *NewOrderRequest) GetStopOrderType() StopOrderType {
	if x != nil {
		return x.StopOrderType
	}
	return StopOrderType_STOP_ORDER_TYPE_UNSPECIFIED
}

func (x *NewOrderRequest) GetTriggerPrice() float64 {
	if x != nil {
		return x.TriggerPrice
	}
	return 0
}

func (x *NewOrderRequest) GetStopOrderPrice() float64 {
	if x != nil {
		return x.StopOrderPrice
	}
	return 0
}

func (x *NewOrderRequest) GetExitPositionType() ExitPositionType {
	if x != nil {
		return x.ExitPositionType
	}
	return ExitPositionType_EXIT_POSITION_TYPE_UNSPECIFIED
}

func (x *NewOrderRequest) GetSecondPassword() string {
	if x != nil {
		return x.SecondPassword
	}
	return ""
}

func (x *NewOrderRequest) GetExitPositions() []*ExitPosition {
	if x != nil {
		return x.ExitPositions
	}
	return nil
}

type ExitPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PositionNumber string  `protobuf:"bytes,1,opt,name=position_number,json=positionNumber,proto3" json:"position_number,omitempty"`  // 新規建玉番号
	SequenceNumber int32   `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"` // 建日順位
	OrderQuantity  float64 `protobuf:"fixed64,3,opt,name=order_quantity,json=orderQuantity,proto3" json:"order_quantity,omitempty"`   // 注文数量
}

func (x *ExitPosition) Reset() {
	*x = ExitPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExitPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExitPosition) ProtoMessage() {}

func (x *ExitPosition) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExitPosition.ProtoReflect.Descriptor instead.
func (*ExitPosition) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{4}
}

func (x *ExitPosition) GetPositionNumber() string {
	if x != nil {
		return x.PositionNumber
	}
	return ""
}

func (x *ExitPosition) GetSequenceNumber() int32 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *ExitPosition) GetOrderQuantity() float64 {
	if x != nil {
		return x.OrderQuantity
	}
	return 0
}

type NewOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *CommonResponse        `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`   // レスポンス共通項目
	ResultCode     string                 `protobuf:"bytes,2,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`               // 結果コード
	ResultText     string                 `protobuf:"bytes,3,opt,name=result_text,json=resultText,proto3" json:"result_text,omitempty"`               // 結果テキスト
	WarningCode    string                 `protobuf:"bytes,4,opt,name=warning_code,json=warningCode,proto3" json:"warning_code,omitempty"`            // 警告コード
	WarningText    string                 `protobuf:"bytes,5,opt,name=warning_text,json=warningText,proto3" json:"warning_text,omitempty"`            // 警告テキスト
	OrderNumber    string                 `protobuf:"bytes,6,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`            // 注文番号
	ExecutionDate  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"`      // 営業日
	DeliveryAmount float64                `protobuf:"fixed64,8,opt,name=delivery_amount,json=deliveryAmount,proto3" json:"delivery_amount,omitempty"` // 注文受渡金額
	Commission     float64                `protobuf:"fixed64,9,opt,name=commission,proto3" json:"commission,omitempty"`                               // 注文手数料
	CommissionTax  float64                `protobuf:"fixed64,10,opt,name=commission_tax,json=commissionTax,proto3" json:"commission_tax,omitempty"`   // 注文消費税
	Interest       float64                `protobuf:"fixed64,11,opt,name=interest,proto3" json:"interest,omitempty"`                                  // 金利
	OrderDatetime  *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=order_datetime,json=orderDatetime,proto3" json:"order_datetime,omitempty"`     // 注文日時
}

func (x *NewOrderResponse) Reset() {
	*x = NewOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOrderResponse) ProtoMessage() {}

func (x *NewOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOrderResponse.ProtoReflect.Descriptor instead.
func (*NewOrderResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{5}
}

func (x *NewOrderResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *NewOrderResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *NewOrderResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

func (x *NewOrderResponse) GetWarningCode() string {
	if x != nil {
		return x.WarningCode
	}
	return ""
}

func (x *NewOrderResponse) GetWarningText() string {
	if x != nil {
		return x.WarningText
	}
	return ""
}

func (x *NewOrderResponse) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *NewOrderResponse) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

func (x *NewOrderResponse) GetDeliveryAmount() float64 {
	if x != nil {
		return x.DeliveryAmount
	}
	return 0
}

func (x *NewOrderResponse) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *NewOrderResponse) GetCommissionTax() float64 {
	if x != nil {
		return x.CommissionTax
	}
	return 0
}

func (x *NewOrderResponse) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *NewOrderResponse) GetOrderDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDatetime
	}
	return nil
}

type CancelOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber    string                 `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`          // 注文番号
	ExecutionDate  *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"`    // 営業日
	SecondPassword string                 `protobuf:"bytes,3,opt,name=second_password,json=secondPassword,proto3" json:"second_password,omitempty"` // 第二パスワード
}

func (x *CancelOrderRequest) Reset() {
	*x = CancelOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderRequest) ProtoMessage() {}

func (x *CancelOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderRequest.ProtoReflect.Descriptor instead.
func (*CancelOrderRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{6}
}

func (x *CancelOrderRequest) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *CancelOrderRequest) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

func (x *CancelOrderRequest) GetSecondPassword() string {
	if x != nil {
		return x.SecondPassword
	}
	return ""
}

type CancelOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *CommonResponse        `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`   // レスポンス共通項目
	ResultCode     string                 `protobuf:"bytes,2,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`               // 結果コード
	ResultText     string                 `protobuf:"bytes,3,opt,name=result_text,json=resultText,proto3" json:"result_text,omitempty"`               // 結果テキスト
	OrderNumber    string                 `protobuf:"bytes,4,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`            // 注文番号
	ExecutionDate  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"`      // 営業日
	DeliveryAmount float64                `protobuf:"fixed64,6,opt,name=delivery_amount,json=deliveryAmount,proto3" json:"delivery_amount,omitempty"` // 注文受渡金額
	OrderDatetime  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=order_datetime,json=orderDatetime,proto3" json:"order_datetime,omitempty"`      // 注文日時
}

func (x *CancelOrderResponse) Reset() {
	*x = CancelOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrderResponse) ProtoMessage() {}

func (x *CancelOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrderResponse.ProtoReflect.Descriptor instead.
func (*CancelOrderResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{7}
}

func (x *CancelOrderResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *CancelOrderResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *CancelOrderResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

func (x *CancelOrderResponse) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *CancelOrderResponse) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

func (x *CancelOrderResponse) GetDeliveryAmount() float64 {
	if x != nil {
		return x.DeliveryAmount
	}
	return 0
}

func (x *CancelOrderResponse) GetOrderDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDatetime
	}
	return nil
}

type OrderListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueCode          string                 `protobuf:"bytes,1,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`                                                                   // 銘柄コード
	ExecutionDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"`                                                       // 注文執行予定日
	OrderInquiryStatus OrderInquiryStatus     `protobuf:"varint,3,opt,name=order_inquiry_status,json=orderInquiryStatus,proto3,enum=tachibanapb.OrderInquiryStatus" json:"order_inquiry_status,omitempty"` // 注文照会状態
}

func (x *OrderListRequest) Reset() {
	*x = OrderListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderListRequest) ProtoMessage() {}

func (x *OrderListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderListRequest.ProtoReflect.Descriptor instead.
func (*OrderListRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{8}
}

func (x *OrderListRequest) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *OrderListRequest) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

func (x *OrderListRequest) GetOrderInquiryStatus() OrderInquiryStatus {
	if x != nil {
		return x.OrderInquiryStatus
	}
	return OrderInquiryStatus_ORDER_INQUIRY_STATUS_UNSPECIFIED
}

type OrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse     *CommonResponse        `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`                                                    // レスポンス共通項目
	IssueCode          string                 `protobuf:"bytes,2,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`                                                                   // 銘柄コード
	ExecutionDate      *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"`                                                       // 注文執行予定日
	OrderInquiryStatus OrderInquiryStatus     `protobuf:"varint,4,opt,name=order_inquiry_status,json=orderInquiryStatus,proto3,enum=tachibanapb.OrderInquiryStatus" json:"order_inquiry_status,omitempty"` // 注文照会状態
	ResultCode         string                 `protobuf:"bytes,5,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`                                                                // 結果コード
	ResultText         string                 `protobuf:"bytes,6,opt,name=result_text,json=resultText,proto3" json:"result_text,omitempty"`                                                                // 結果テキスト
	WarningCode        string                 `protobuf:"bytes,7,opt,name=warning_code,json=warningCode,proto3" json:"warning_code,omitempty"`                                                             // 警告コード
	WarningText        string                 `protobuf:"bytes,8,opt,name=warning_text,json=warningText,proto3" json:"warning_text,omitempty"`                                                             // 警告テキスト
	Orders             []*Order               `protobuf:"bytes,9,rep,name=orders,proto3" json:"orders,omitempty"`                                                                                          // 注文リスト
}

func (x *OrderListResponse) Reset() {
	*x = OrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderListResponse) ProtoMessage() {}

func (x *OrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderListResponse.ProtoReflect.Descriptor instead.
func (*OrderListResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{9}
}

func (x *OrderListResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *OrderListResponse) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *OrderListResponse) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

func (x *OrderListResponse) GetOrderInquiryStatus() OrderInquiryStatus {
	if x != nil {
		return x.OrderInquiryStatus
	}
	return OrderInquiryStatus_ORDER_INQUIRY_STATUS_UNSPECIFIED
}

func (x *OrderListResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *OrderListResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

func (x *OrderListResponse) GetWarningCode() string {
	if x != nil {
		return x.WarningCode
	}
	return ""
}

func (x *OrderListResponse) GetWarningText() string {
	if x != nil {
		return x.WarningText
	}
	return ""
}

func (x *OrderListResponse) GetOrders() []*Order {
	if x != nil {
		return x.Orders
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarningCode            string                 `protobuf:"bytes,1,opt,name=warning_code,json=warningCode,proto3" json:"warning_code,omitempty"`                                                                       // 警告コード
	WarningText            string                 `protobuf:"bytes,2,opt,name=warning_text,json=warningText,proto3" json:"warning_text,omitempty"`                                                                       // 警告テキスト
	OrderNumber            string                 `protobuf:"bytes,3,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                                                                       // 注文番号
	IssueCode              string                 `protobuf:"bytes,4,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`                                                                             // 銘柄コード
	Exchange               Exchange               `protobuf:"varint,5,opt,name=exchange,proto3,enum=tachibanapb.Exchange" json:"exchange,omitempty"`                                                                     // 市場
	AccountType            AccountType            `protobuf:"varint,6,opt,name=account_type,json=accountType,proto3,enum=tachibanapb.AccountType" json:"account_type,omitempty"`                                         // 譲渡益課税区分
	TradeType              TradeType              `protobuf:"varint,7,opt,name=trade_type,json=tradeType,proto3,enum=tachibanapb.TradeType" json:"trade_type,omitempty"`                                                 // 現金信用区分
	ExitTermType           ExitTermType           `protobuf:"varint,8,opt,name=exit_term_type,json=exitTermType,proto3,enum=tachibanapb.ExitTermType" json:"exit_term_type,omitempty"`                                   // 弁済区分
	Side                   Side                   `protobuf:"varint,9,opt,name=side,proto3,enum=tachibanapb.Side" json:"side,omitempty"`                                                                                 // 売買区分
	OrderQuantity          float64                `protobuf:"fixed64,10,opt,name=order_quantity,json=orderQuantity,proto3" json:"order_quantity,omitempty"`                                                              // 注文株数
	CurrentQuantity        float64                `protobuf:"fixed64,11,opt,name=current_quantity,json=currentQuantity,proto3" json:"current_quantity,omitempty"`                                                        // 有効株数
	Price                  float64                `protobuf:"fixed64,12,opt,name=price,proto3" json:"price,omitempty"`                                                                                                   // 注文単価
	ExecutionTiming        ExecutionTiming        `protobuf:"varint,13,opt,name=execution_timing,json=executionTiming,proto3,enum=tachibanapb.ExecutionTiming" json:"execution_timing,omitempty"`                        // 執行条件
	ExecutionType          ExecutionType          `protobuf:"varint,14,opt,name=execution_type,json=executionType,proto3,enum=tachibanapb.ExecutionType" json:"execution_type,omitempty"`                                // 注文値段区分
	StopOrderType          StopOrderType          `protobuf:"varint,15,opt,name=stop_order_type,json=stopOrderType,proto3,enum=tachibanapb.StopOrderType" json:"stop_order_type,omitempty"`                              // 逆指値注文種別
	StopTriggerPrice       float64                `protobuf:"fixed64,16,opt,name=StopTriggerPrice,proto3" json:"StopTriggerPrice,omitempty"`                                                                             // 逆指値条件
	StopOrderExecutionType ExecutionType          `protobuf:"varint,17,opt,name=stop_order_execution_type,json=stopOrderExecutionType,proto3,enum=tachibanapb.ExecutionType" json:"stop_order_execution_type,omitempty"` // 逆指値値段区分
	StopOrderPrice         float64                `protobuf:"fixed64,18,opt,name=stop_order_price,json=stopOrderPrice,proto3" json:"stop_order_price,omitempty"`                                                         // 逆指値値段
	TriggerType            TriggerType            `protobuf:"varint,19,opt,name=trigger_type,json=triggerType,proto3,enum=tachibanapb.TriggerType" json:"trigger_type,omitempty"`                                        // トリガータイプ
	ExitPositionType       ExitPositionType       `protobuf:"varint,20,opt,name=exit_position_type,json=exitPositionType,proto3,enum=tachibanapb.ExitPositionType" json:"exit_position_type,omitempty"`                  // 建日種類(返済ポジション指定方法)
	ContractQuantity       float64                `protobuf:"fixed64,21,opt,name=contract_quantity,json=contractQuantity,proto3" json:"contract_quantity,omitempty"`                                                     // 成立株数
	ContractPrice          float64                `protobuf:"fixed64,22,opt,name=contract_price,json=contractPrice,proto3" json:"contract_price,omitempty"`                                                              // 成立単価
	PartContractType       PartContractType       `protobuf:"varint,23,opt,name=part_contract_type,json=partContractType,proto3,enum=tachibanapb.PartContractType" json:"part_contract_type,omitempty"`                  // 内出来区分
	ExecutionDate          *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"`                                                                // 執行日
	OrderStatus            OrderStatus            `protobuf:"varint,25,opt,name=order_status,json=orderStatus,proto3,enum=tachibanapb.OrderStatus" json:"order_status,omitempty"`                                        // 状態コード
	OrderStatusText        string                 `protobuf:"bytes,26,opt,name=order_status_text,json=orderStatusText,proto3" json:"order_status_text,omitempty"`                                                        // 状態
	ContractStatus         ContractStatus         `protobuf:"varint,27,opt,name=contract_status,json=contractStatus,proto3,enum=tachibanapb.ContractStatus" json:"contract_status,omitempty"`                            // 約定ステータス
	OrderDatetime          *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=order_datetime,json=orderDatetime,proto3" json:"order_datetime,omitempty"`                                                                // 注文日付
	ExpireDate             *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`                                                                         // 有効期限
	CarryOverType          CarryOverType          `protobuf:"varint,30,opt,name=carry_over_type,json=carryOverType,proto3,enum=tachibanapb.CarryOverType" json:"carry_over_type,omitempty"`                              // 繰越注文フラグ
	CorrectCancelType      CorrectCancelType      `protobuf:"varint,31,opt,name=correct_cancel_type,json=correctCancelType,proto3,enum=tachibanapb.CorrectCancelType" json:"correct_cancel_type,omitempty"`              // 訂正取消可否フラグ
	EstimationAmount       float64                `protobuf:"fixed64,32,opt,name=estimation_amount,json=estimationAmount,proto3" json:"estimation_amount,omitempty"`                                                     // 概算代金
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{10}
}

func (x *Order) GetWarningCode() string {
	if x != nil {
		return x.WarningCode
	}
	return ""
}

func (x *Order) GetWarningText() string {
	if x != nil {
		return x.WarningText
	}
	return ""
}

func (x *Order) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *Order) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *Order) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *Order) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *Order) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *Order) GetExitTermType() ExitTermType {
	if x != nil {
		return x.ExitTermType
	}
	return ExitTermType_EXIT_TERM_TYPE_UNSPECIFIED
}

func (x *Order) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *Order) GetOrderQuantity() float64 {
	if x != nil {
		return x.OrderQuantity
	}
	return 0
}

func (x *Order) GetCurrentQuantity() float64 {
	if x != nil {
		return x.CurrentQuantity
	}
	return 0
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetExecutionTiming() ExecutionTiming {
	if x != nil {
		return x.ExecutionTiming
	}
	return ExecutionTiming_EXECUTION_TIMING_UNSPECIFIED
}

func (x *Order) GetExecutionType() ExecutionType {
	if x != nil {
		return x.ExecutionType
	}
	return ExecutionType_EXECUTION_TYPE_UNSPECIFIED
}

func (x *Order) GetStopOrderType() StopOrderType {
	if x != nil {
		return x.StopOrderType
	}
	return StopOrderType_STOP_ORDER_TYPE_UNSPECIFIED
}

func (x *Order) GetStopTriggerPrice() float64 {
	if x != nil {
		return x.StopTriggerPrice
	}
	return 0
}

func (x *Order) GetStopOrderExecutionType() ExecutionType {
	if x != nil {
		return x.StopOrderExecutionType
	}
	return ExecutionType_EXECUTION_TYPE_UNSPECIFIED
}

func (x *Order) GetStopOrderPrice() float64 {
	if x != nil {
		return x.StopOrderPrice
	}
	return 0
}

func (x *Order) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *Order) GetExitPositionType() ExitPositionType {
	if x != nil {
		return x.ExitPositionType
	}
	return ExitPositionType_EXIT_POSITION_TYPE_UNSPECIFIED
}

func (x *Order) GetContractQuantity() float64 {
	if x != nil {
		return x.ContractQuantity
	}
	return 0
}

func (x *Order) GetContractPrice() float64 {
	if x != nil {
		return x.ContractPrice
	}
	return 0
}

func (x *Order) GetPartContractType() PartContractType {
	if x != nil {
		return x.PartContractType
	}
	return PartContractType_PART_CONTRACT_TYPE_UNSPECIFIED
}

func (x *Order) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

func (x *Order) GetOrderStatus() OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *Order) GetOrderStatusText() string {
	if x != nil {
		return x.OrderStatusText
	}
	return ""
}

func (x *Order) GetContractStatus() ContractStatus {
	if x != nil {
		return x.ContractStatus
	}
	return ContractStatus_CONTRACT_STATUS_UNSPECIFIED
}

func (x *Order) GetOrderDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDatetime
	}
	return nil
}

func (x *Order) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *Order) GetCarryOverType() CarryOverType {
	if x != nil {
		return x.CarryOverType
	}
	return CarryOverType_CARRY_OVER_TYPE_UNSPECIFIED
}

func (x *Order) GetCorrectCancelType() CorrectCancelType {
	if x != nil {
		return x.CorrectCancelType
	}
	return CorrectCancelType_CORRECT_CANCEL_TYPE_UNSPECIFIED
}

func (x *Order) GetEstimationAmount() float64 {
	if x != nil {
		return x.EstimationAmount
	}
	return 0
}

type OrderDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber   string                 `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`       // 注文番号
	ExecutionDate *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"` // 営業日
}

func (x *OrderDetailRequest) Reset() {
	*x = OrderDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetailRequest) ProtoMessage() {}

func (x *OrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetailRequest.ProtoReflect.Descriptor instead.
func (*OrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{11}
}

func (x *OrderDetailRequest) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *OrderDetailRequest) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

type OrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse         *CommonResponse        `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`                                                              // レスポンス共通項目
	OrderNumber            string                 `protobuf:"bytes,2,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                                                                       // 注文番号
	ExecutionDate          *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"`                                                                 // 営業日
	ResultCode             string                 `protobuf:"bytes,4,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`                                                                          // 結果コード
	ResultText             string                 `protobuf:"bytes,5,opt,name=result_text,json=resultText,proto3" json:"result_text,omitempty"`                                                                          // 結果テキスト
	WarningCode            string                 `protobuf:"bytes,6,opt,name=warning_code,json=warningCode,proto3" json:"warning_code,omitempty"`                                                                       // 警告コード
	WarningText            string                 `protobuf:"bytes,7,opt,name=warning_text,json=warningText,proto3" json:"warning_text,omitempty"`                                                                       // 警告テキスト
	IssueCode              string                 `protobuf:"bytes,8,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`                                                                             // 銘柄CODE
	Exchange               Exchange               `protobuf:"varint,9,opt,name=exchange,proto3,enum=tachibanapb.Exchange" json:"exchange,omitempty"`                                                                     // 市場
	Side                   Side                   `protobuf:"varint,10,opt,name=side,proto3,enum=tachibanapb.Side" json:"side,omitempty"`                                                                                // 売買区分
	TradeType              TradeType              `protobuf:"varint,11,opt,name=trade_type,json=tradeType,proto3,enum=tachibanapb.TradeType" json:"trade_type,omitempty"`                                                // 現金信用区分
	ExitTermType           ExitTermType           `protobuf:"varint,12,opt,name=exit_term_type,json=exitTermType,proto3,enum=tachibanapb.ExitTermType" json:"exit_term_type,omitempty"`                                  // 弁済区分
	ExecutionTiming        ExecutionTiming        `protobuf:"varint,13,opt,name=execution_timing,json=executionTiming,proto3,enum=tachibanapb.ExecutionTiming" json:"execution_timing,omitempty"`                        // 執行条件
	ExecutionType          ExecutionType          `protobuf:"varint,14,opt,name=execution_type,json=executionType,proto3,enum=tachibanapb.ExecutionType" json:"execution_type,omitempty"`                                // 注文値段区分
	Price                  float64                `protobuf:"fixed64,15,opt,name=price,proto3" json:"price,omitempty"`                                                                                                   // 注文単価
	OrderQuantity          float64                `protobuf:"fixed64,16,opt,name=order_quantity,json=orderQuantity,proto3" json:"order_quantity,omitempty"`                                                              // 注文株数
	CurrentQuantity        float64                `protobuf:"fixed64,17,opt,name=current_quantity,json=currentQuantity,proto3" json:"current_quantity,omitempty"`                                                        // 有効株数
	OrderStatus            OrderStatus            `protobuf:"varint,18,opt,name=order_status,json=orderStatus,proto3,enum=tachibanapb.OrderStatus" json:"order_status,omitempty"`                                        // 状態コード
	OrderStatusText        string                 `protobuf:"bytes,19,opt,name=order_status_text,json=orderStatusText,proto3" json:"order_status_text,omitempty"`                                                        // 状態
	OrderDatetime          *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=order_datetime,json=orderDatetime,proto3" json:"order_datetime,omitempty"`                                                                // 注文日付
	ExpireDate             *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`                                                                         // 有効期限
	Channel                Channel                `protobuf:"varint,22,opt,name=channel,proto3,enum=tachibanapb.Channel" json:"channel,omitempty"`                                                                       // チャネル
	StockAccountType       AccountType            `protobuf:"varint,23,opt,name=stock_account_type,json=stockAccountType,proto3,enum=tachibanapb.AccountType" json:"stock_account_type,omitempty"`                       // 現物口座区分
	MarginAccountType      AccountType            `protobuf:"varint,24,opt,name=margin_account_type,json=marginAccountType,proto3,enum=tachibanapb.AccountType" json:"margin_account_type,omitempty"`                    // 建玉口座区分
	StopOrderType          StopOrderType          `protobuf:"varint,25,opt,name=stop_order_type,json=stopOrderType,proto3,enum=tachibanapb.StopOrderType" json:"stop_order_type,omitempty"`                              // 逆指値注文種別
	StopTriggerPrice       float64                `protobuf:"fixed64,26,opt,name=stop_trigger_price,json=stopTriggerPrice,proto3" json:"stop_trigger_price,omitempty"`                                                   // 逆指値条件
	StopOrderExecutionType ExecutionType          `protobuf:"varint,27,opt,name=stop_order_execution_type,json=stopOrderExecutionType,proto3,enum=tachibanapb.ExecutionType" json:"stop_order_execution_type,omitempty"` // 逆指値値段区分
	StopOrderPrice         float64                `protobuf:"fixed64,28,opt,name=stop_order_price,json=stopOrderPrice,proto3" json:"stop_order_price,omitempty"`                                                         // 逆指値値段
	TriggerType            TriggerType            `protobuf:"varint,29,opt,name=trigger_type,json=triggerType,proto3,enum=tachibanapb.TriggerType" json:"trigger_type,omitempty"`                                        // トリガータイプ
	TriggerDatetime        *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=trigger_datetime,json=triggerDatetime,proto3" json:"trigger_datetime,omitempty"`                                                          // トリガー日時
	DeliveryDate           *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=delivery_date,json=deliveryDate,proto3" json:"delivery_date,omitempty"`                                                                   // 受渡日
	ContractPrice          float64                `protobuf:"fixed64,32,opt,name=contract_price,json=contractPrice,proto3" json:"contract_price,omitempty"`                                                              // 約定単価
	ContractQuantity       float64                `protobuf:"fixed64,33,opt,name=contract_quantity,json=contractQuantity,proto3" json:"contract_quantity,omitempty"`                                                     // 約定株数
	TradingAmount          float64                `protobuf:"fixed64,34,opt,name=trading_amount,json=tradingAmount,proto3" json:"trading_amount,omitempty"`                                                              // 売買代金
	PartContractType       PartContractType       `protobuf:"varint,35,opt,name=part_contract_type,json=partContractType,proto3,enum=tachibanapb.PartContractType" json:"part_contract_type,omitempty"`                  // 内出来区分
	EstimationAmount       float64                `protobuf:"fixed64,36,opt,name=estimation_amount,json=estimationAmount,proto3" json:"estimation_amount,omitempty"`                                                     // 概算代金
	Commission             float64                `protobuf:"fixed64,37,opt,name=commission,proto3" json:"commission,omitempty"`                                                                                         // 手数料
	CommissionTax          float64                `protobuf:"fixed64,38,opt,name=commission_tax,json=commissionTax,proto3" json:"commission_tax,omitempty"`                                                              // 消費税
	ExitPositionType       ExitPositionType       `protobuf:"varint,39,opt,name=exit_position_type,json=exitPositionType,proto3,enum=tachibanapb.ExitPositionType" json:"exit_position_type,omitempty"`                  // 建日種類(返済ポジション指定方法)
	ExchangeErrorCode      string                 `protobuf:"bytes,40,opt,name=exchange_error_code,json=exchangeErrorCode,proto3" json:"exchange_error_code,omitempty"`                                                  // 市場/取次ErrorCode
	ExchangeOrderDatetime  *timestamppb.Timestamp `protobuf:"bytes,41,opt,name=exchange_order_datetime,json=exchangeOrderDatetime,proto3" json:"exchange_order_datetime,omitempty"`                                      // 市場注文受付時刻
	Contracts              []*Contract            `protobuf:"bytes,42,rep,name=contracts,proto3" json:"contracts,omitempty"`                                                                                             // 約定失効リスト
	HoldPositions          []*HoldPosition        `protobuf:"bytes,43,rep,name=hold_positions,json=holdPositions,proto3" json:"hold_positions,omitempty"`                                                                // 決済注文建株指定リスト
}

func (x *OrderDetailResponse) Reset() {
	*x = OrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetailResponse) ProtoMessage() {}

func (x *OrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetailResponse.ProtoReflect.Descriptor instead.
func (*OrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{12}
}

func (x *OrderDetailResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *OrderDetailResponse) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *OrderDetailResponse) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

func (x *OrderDetailResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *OrderDetailResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

func (x *OrderDetailResponse) GetWarningCode() string {
	if x != nil {
		return x.WarningCode
	}
	return ""
}

func (x *OrderDetailResponse) GetWarningText() string {
	if x != nil {
		return x.WarningText
	}
	return ""
}

func (x *OrderDetailResponse) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *OrderDetailResponse) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetExitTermType() ExitTermType {
	if x != nil {
		return x.ExitTermType
	}
	return ExitTermType_EXIT_TERM_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetExecutionTiming() ExecutionTiming {
	if x != nil {
		return x.ExecutionTiming
	}
	return ExecutionTiming_EXECUTION_TIMING_UNSPECIFIED
}

func (x *OrderDetailResponse) GetExecutionType() ExecutionType {
	if x != nil {
		return x.ExecutionType
	}
	return ExecutionType_EXECUTION_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderDetailResponse) GetOrderQuantity() float64 {
	if x != nil {
		return x.OrderQuantity
	}
	return 0
}

func (x *OrderDetailResponse) GetCurrentQuantity() float64 {
	if x != nil {
		return x.CurrentQuantity
	}
	return 0
}

func (x *OrderDetailResponse) GetOrderStatus() OrderStatus {
	if x != nil {
		return x.OrderStatus
	}
	return OrderStatus_ORDER_STATUS_UNSPECIFIED
}

func (x *OrderDetailResponse) GetOrderStatusText() string {
	if x != nil {
		return x.OrderStatusText
	}
	return ""
}

func (x *OrderDetailResponse) GetOrderDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.OrderDatetime
	}
	return nil
}

func (x *OrderDetailResponse) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *OrderDetailResponse) GetChannel() Channel {
	if x != nil {
		return x.Channel
	}
	return Channel_CHANNEL_UNSPECIFIED
}

func (x *OrderDetailResponse) GetStockAccountType() AccountType {
	if x != nil {
		return x.StockAccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetMarginAccountType() AccountType {
	if x != nil {
		return x.MarginAccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetStopOrderType() StopOrderType {
	if x != nil {
		return x.StopOrderType
	}
	return StopOrderType_STOP_ORDER_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetStopTriggerPrice() float64 {
	if x != nil {
		return x.StopTriggerPrice
	}
	return 0
}

func (x *OrderDetailResponse) GetStopOrderExecutionType() ExecutionType {
	if x != nil {
		return x.StopOrderExecutionType
	}
	return ExecutionType_EXECUTION_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetStopOrderPrice() float64 {
	if x != nil {
		return x.StopOrderPrice
	}
	return 0
}

func (x *OrderDetailResponse) GetTriggerType() TriggerType {
	if x != nil {
		return x.TriggerType
	}
	return TriggerType_TRIGGER_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetTriggerDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.TriggerDatetime
	}
	return nil
}

func (x *OrderDetailResponse) GetDeliveryDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryDate
	}
	return nil
}

func (x *OrderDetailResponse) GetContractPrice() float64 {
	if x != nil {
		return x.ContractPrice
	}
	return 0
}

func (x *OrderDetailResponse) GetContractQuantity() float64 {
	if x != nil {
		return x.ContractQuantity
	}
	return 0
}

func (x *OrderDetailResponse) GetTradingAmount() float64 {
	if x != nil {
		return x.TradingAmount
	}
	return 0
}

func (x *OrderDetailResponse) GetPartContractType() PartContractType {
	if x != nil {
		return x.PartContractType
	}
	return PartContractType_PART_CONTRACT_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetEstimationAmount() float64 {
	if x != nil {
		return x.EstimationAmount
	}
	return 0
}

func (x *OrderDetailResponse) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *OrderDetailResponse) GetCommissionTax() float64 {
	if x != nil {
		return x.CommissionTax
	}
	return 0
}

func (x *OrderDetailResponse) GetExitPositionType() ExitPositionType {
	if x != nil {
		return x.ExitPositionType
	}
	return ExitPositionType_EXIT_POSITION_TYPE_UNSPECIFIED
}

func (x *OrderDetailResponse) GetExchangeErrorCode() string {
	if x != nil {
		return x.ExchangeErrorCode
	}
	return ""
}

func (x *OrderDetailResponse) GetExchangeOrderDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExchangeOrderDatetime
	}
	return nil
}

func (x *OrderDetailResponse) GetContracts() []*Contract {
	if x != nil {
		return x.Contracts
	}
	return nil
}

func (x *OrderDetailResponse) GetHoldPositions() []*HoldPosition {
	if x != nil {
		return x.HoldPositions
	}
	return nil
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarningCode string                 `protobuf:"bytes,1,opt,name=warning_code,json=warningCode,proto3" json:"warning_code,omitempty"` // 警告コード
	WarningText string                 `protobuf:"bytes,2,opt,name=warning_text,json=warningText,proto3" json:"warning_text,omitempty"` // 警告テキスト
	Quantity    float64                `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                        // 約定数量
	Price       float64                `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`                              // 約定価格
	Datetime    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=datetime,proto3" json:"datetime,omitempty"`                          // 約定日時
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{13}
}

func (x *Contract) GetWarningCode() string {
	if x != nil {
		return x.WarningCode
	}
	return ""
}

func (x *Contract) GetWarningText() string {
	if x != nil {
		return x.WarningText
	}
	return ""
}

func (x *Contract) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *Contract) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Contract) GetDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

type HoldPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WarningCode   string                 `protobuf:"bytes,1,opt,name=warning_code,json=warningCode,proto3" json:"warning_code,omitempty"`          // 警告コード
	WarningText   string                 `protobuf:"bytes,2,opt,name=warning_text,json=warningText,proto3" json:"warning_text,omitempty"`          // 警告テキスト
	SortOrder     int32                  `protobuf:"varint,3,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`               // 順位
	ContractDate  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=contract_date,json=contractDate,proto3" json:"contract_date,omitempty"`       // 建日
	EntryPrice    float64                `protobuf:"fixed64,5,opt,name=entry_price,json=entryPrice,proto3" json:"entry_price,omitempty"`           // 建単価
	HoldQuantity  float64                `protobuf:"fixed64,6,opt,name=hold_quantity,json=holdQuantity,proto3" json:"hold_quantity,omitempty"`     // 返済注文株数
	ExitQuantity  float64                `protobuf:"fixed64,7,opt,name=exit_quantity,json=exitQuantity,proto3" json:"exit_quantity,omitempty"`     // 約定株数
	ExitPrice     float64                `protobuf:"fixed64,8,opt,name=exit_price,json=exitPrice,proto3" json:"exit_price,omitempty"`              // 約定単価
	Commission    float64                `protobuf:"fixed64,9,opt,name=commission,proto3" json:"commission,omitempty"`                             // 建手数料
	Interest      float64                `protobuf:"fixed64,10,opt,name=interest,proto3" json:"interest,omitempty"`                                // 順日歩
	Premiums      float64                `protobuf:"fixed64,11,opt,name=premiums,proto3" json:"premiums,omitempty"`                                // 逆日歩
	RewritingFee  float64                `protobuf:"fixed64,12,opt,name=rewriting_fee,json=rewritingFee,proto3" json:"rewriting_fee,omitempty"`    // 書換料
	ManagementFee float64                `protobuf:"fixed64,13,opt,name=management_fee,json=managementFee,proto3" json:"management_fee,omitempty"` // 管理費
	LendingFee    float64                `protobuf:"fixed64,14,opt,name=lending_fee,json=lendingFee,proto3" json:"lending_fee,omitempty"`          // 貸株料
	OtherFee      float64                `protobuf:"fixed64,15,opt,name=other_fee,json=otherFee,proto3" json:"other_fee,omitempty"`                // その他
	Profit        float64                `protobuf:"fixed64,16,opt,name=profit,proto3" json:"profit,omitempty"`                                    // 決済損益/受渡代金
}

func (x *HoldPosition) Reset() {
	*x = HoldPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HoldPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HoldPosition) ProtoMessage() {}

func (x *HoldPosition) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HoldPosition.ProtoReflect.Descriptor instead.
func (*HoldPosition) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{14}
}

func (x *HoldPosition) GetWarningCode() string {
	if x != nil {
		return x.WarningCode
	}
	return ""
}

func (x *HoldPosition) GetWarningText() string {
	if x != nil {
		return x.WarningText
	}
	return ""
}

func (x *HoldPosition) GetSortOrder() int32 {
	if x != nil {
		return x.SortOrder
	}
	return 0
}

func (x *HoldPosition) GetContractDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ContractDate
	}
	return nil
}

func (x *HoldPosition) GetEntryPrice() float64 {
	if x != nil {
		return x.EntryPrice
	}
	return 0
}

func (x *HoldPosition) GetHoldQuantity() float64 {
	if x != nil {
		return x.HoldQuantity
	}
	return 0
}

func (x *HoldPosition) GetExitQuantity() float64 {
	if x != nil {
		return x.ExitQuantity
	}
	return 0
}

func (x *HoldPosition) GetExitPrice() float64 {
	if x != nil {
		return x.ExitPrice
	}
	return 0
}

func (x *HoldPosition) GetCommission() float64 {
	if x != nil {
		return x.Commission
	}
	return 0
}

func (x *HoldPosition) GetInterest() float64 {
	if x != nil {
		return x.Interest
	}
	return 0
}

func (x *HoldPosition) GetPremiums() float64 {
	if x != nil {
		return x.Premiums
	}
	return 0
}

func (x *HoldPosition) GetRewritingFee() float64 {
	if x != nil {
		return x.RewritingFee
	}
	return 0
}

func (x *HoldPosition) GetManagementFee() float64 {
	if x != nil {
		return x.ManagementFee
	}
	return 0
}

func (x *HoldPosition) GetLendingFee() float64 {
	if x != nil {
		return x.LendingFee
	}
	return 0
}

func (x *HoldPosition) GetOtherFee() float64 {
	if x != nil {
		return x.OtherFee
	}
	return 0
}

func (x *HoldPosition) GetProfit() float64 {
	if x != nil {
		return x.Profit
	}
	return 0
}

type StockMasterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []StockMasterColumn `protobuf:"varint,1,rep,packed,name=columns,proto3,enum=tachibanapb.StockMasterColumn" json:"columns,omitempty"` // 取得したい情報
}

func (x *StockMasterRequest) Reset() {
	*x = StockMasterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockMasterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockMasterRequest) ProtoMessage() {}

func (x *StockMasterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockMasterRequest.ProtoReflect.Descriptor instead.
func (*StockMasterRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{15}
}

func (x *StockMasterRequest) GetColumns() []StockMasterColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type StockMasterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *CommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"` // レスポンス共通項目
	StockMasters   []*StockMaster  `protobuf:"bytes,2,rep,name=stock_masters,json=stockMasters,proto3" json:"stock_masters,omitempty"`       // 株式銘柄マスタ
}

func (x *StockMasterResponse) Reset() {
	*x = StockMasterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockMasterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockMasterResponse) ProtoMessage() {}

func (x *StockMasterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockMasterResponse.ProtoReflect.Descriptor instead.
func (*StockMasterResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{16}
}

func (x *StockMasterResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *StockMasterResponse) GetStockMasters() []*StockMaster {
	if x != nil {
		return x.StockMasters
	}
	return nil
}

type StockMaster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueCode            string                 `protobuf:"bytes,1,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`                                                        // 銘柄コード
	Name                 string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // 銘柄名
	ShortName            string                 `protobuf:"bytes,3,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`                                                        // 銘柄名略称
	Kana                 string                 `protobuf:"bytes,4,opt,name=kana,proto3" json:"kana,omitempty"`                                                                                   // 銘柄名(カナ)
	Alphabet             string                 `protobuf:"bytes,5,opt,name=alphabet,proto3" json:"alphabet,omitempty"`                                                                           // 銘柄名(英語表記)
	SpecificTarget       bool                   `protobuf:"varint,6,opt,name=specific_target,json=specificTarget,proto3" json:"specific_target,omitempty"`                                        // 特定口座対象C
	TaxFree              TaxFree                `protobuf:"varint,7,opt,name=tax_free,json=taxFree,proto3,enum=tachibanapb.TaxFree" json:"tax_free,omitempty"`                                    // 非課税対象C
	SharedStocks         int64                  `protobuf:"varint,8,opt,name=shared_stocks,json=sharedStocks,proto3" json:"shared_stocks,omitempty"`                                              // 上場発行株数
	ExRightType          ExRightType            `protobuf:"varint,9,opt,name=ex_right_type,json=exRightType,proto3,enum=tachibanapb.ExRightType" json:"ex_right_type,omitempty"`                  // 権利落ちフラグ
	LastRightDay         *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_right_day,json=lastRightDay,proto3" json:"last_right_day,omitempty"`                                            // 権利付最終日
	ListingType          ListingType            `protobuf:"varint,11,opt,name=listing_type,json=listingType,proto3,enum=tachibanapb.ListingType" json:"listing_type,omitempty"`                   // 上場・入札C
	ReleaseTradingDate   *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=release_trading_date,json=releaseTradingDate,proto3" json:"release_trading_date,omitempty"`                          // 入札解除日
	TradingDate          *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=trading_date,json=tradingDate,proto3" json:"trading_date,omitempty"`                                                 // 入札日
	TradingUnit          float64                `protobuf:"fixed64,14,opt,name=trading_unit,json=tradingUnit,proto3" json:"trading_unit,omitempty"`                                               // 売買単位
	NextTradingUnit      float64                `protobuf:"fixed64,15,opt,name=next_trading_unit,json=nextTradingUnit,proto3" json:"next_trading_unit,omitempty"`                                 // 売買単位(翌営業日)
	StopTradingType      StopTradingType        `protobuf:"varint,16,opt,name=stop_trading_type,json=stopTradingType,proto3,enum=tachibanapb.StopTradingType" json:"stop_trading_type,omitempty"` // 売買停止C
	StartPublicationDate *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=start_publication_date,json=startPublicationDate,proto3" json:"start_publication_date,omitempty"`                    // 発行開始日
	LastPublicationDate  *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=last_publication_date,json=lastPublicationDate,proto3" json:"last_publication_date,omitempty"`                       // 発行最終日
	SettlementType       SettlementType         `protobuf:"varint,19,opt,name=settlement_type,json=settlementType,proto3,enum=tachibanapb.SettlementType" json:"settlement_type,omitempty"`       // 決算C
	SettlementDate       *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=settlement_date,json=settlementDate,proto3" json:"settlement_date,omitempty"`                                        // 決算日
	ListingDate          *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=listing_date,json=listingDate,proto3" json:"listing_date,omitempty"`                                                 // 上場応答日
	ExpireDate_2Type     string                 `protobuf:"bytes,22,opt,name=expire_date_2_type,json=expireDate2Type,proto3" json:"expire_date_2_type,omitempty"`                                 // 二類期日C
	LargeUnit            float64                `protobuf:"fixed64,23,opt,name=large_unit,json=largeUnit,proto3" json:"large_unit,omitempty"`                                                     // 大口株数
	LargeAmount          float64                `protobuf:"fixed64,24,opt,name=large_amount,json=largeAmount,proto3" json:"large_amount,omitempty"`                                               // 大口金額
	OutputTicketType     string                 `protobuf:"bytes,25,opt,name=output_ticket_type,json=outputTicketType,proto3" json:"output_ticket_type,omitempty"`                                // 場伝票出力有無C
	DepositAmount        float64                `protobuf:"fixed64,26,opt,name=deposit_amount,json=depositAmount,proto3" json:"deposit_amount,omitempty"`                                         // 保証金代用掛目
	DepositValuation     float64                `protobuf:"fixed64,27,opt,name=deposit_valuation,json=depositValuation,proto3" json:"deposit_valuation,omitempty"`                                // 代用証券評価単価
	OrganizationType     string                 `protobuf:"bytes,28,opt,name=organization_type,json=organizationType,proto3" json:"organization_type,omitempty"`                                  // 機構参加C
	ProvisionalType      string                 `protobuf:"bytes,29,opt,name=provisional_type,json=provisionalType,proto3" json:"provisional_type,omitempty"`                                     // 仮決済C
	PrimaryExchange      Exchange               `protobuf:"varint,30,opt,name=primary_exchange,json=primaryExchange,proto3,enum=tachibanapb.Exchange" json:"primary_exchange,omitempty"`          // 優先市場
	IndefinitePeriodType string                 `protobuf:"bytes,31,opt,name=indefinite_period_type,json=indefinitePeriodType,proto3" json:"indefinite_period_type,omitempty"`                    // 無期限対象C
	IndustryCode         string                 `protobuf:"bytes,32,opt,name=industry_code,json=industryCode,proto3" json:"industry_code,omitempty"`                                              // 業種コード
	IndustryName         string                 `protobuf:"bytes,33,opt,name=industry_name,json=industryName,proto3" json:"industry_name,omitempty"`                                              // 業種コード名
	SorTargetType        string                 `protobuf:"bytes,34,opt,name=sor_target_type,json=sorTargetType,proto3" json:"sor_target_type,omitempty"`                                         // SOR対象銘柄C
	CreateDatetime       *timestamppb.Timestamp `protobuf:"bytes,35,opt,name=create_datetime,json=createDatetime,proto3" json:"create_datetime,omitempty"`                                        // 作成日時
	UpdateDatetime       *timestamppb.Timestamp `protobuf:"bytes,36,opt,name=update_datetime,json=updateDatetime,proto3" json:"update_datetime,omitempty"`                                        // 更新日時
	UpdateNumber         string                 `protobuf:"bytes,37,opt,name=update_number,json=updateNumber,proto3" json:"update_number,omitempty"`                                              // 更新通番
}

func (x *StockMaster) Reset() {
	*x = StockMaster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockMaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockMaster) ProtoMessage() {}

func (x *StockMaster) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockMaster.ProtoReflect.Descriptor instead.
func (*StockMaster) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{17}
}

func (x *StockMaster) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *StockMaster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockMaster) GetShortName() string {
	if x != nil {
		return x.ShortName
	}
	return ""
}

func (x *StockMaster) GetKana() string {
	if x != nil {
		return x.Kana
	}
	return ""
}

func (x *StockMaster) GetAlphabet() string {
	if x != nil {
		return x.Alphabet
	}
	return ""
}

func (x *StockMaster) GetSpecificTarget() bool {
	if x != nil {
		return x.SpecificTarget
	}
	return false
}

func (x *StockMaster) GetTaxFree() TaxFree {
	if x != nil {
		return x.TaxFree
	}
	return TaxFree_TAX_FREE_UNSPECIFIED
}

func (x *StockMaster) GetSharedStocks() int64 {
	if x != nil {
		return x.SharedStocks
	}
	return 0
}

func (x *StockMaster) GetExRightType() ExRightType {
	if x != nil {
		return x.ExRightType
	}
	return ExRightType_EX_RIGHT_TYPE_UNSPECIFIED
}

func (x *StockMaster) GetLastRightDay() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRightDay
	}
	return nil
}

func (x *StockMaster) GetListingType() ListingType {
	if x != nil {
		return x.ListingType
	}
	return ListingType_LISTING_TYPE_UNSPECIFIED
}

func (x *StockMaster) GetReleaseTradingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseTradingDate
	}
	return nil
}

func (x *StockMaster) GetTradingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TradingDate
	}
	return nil
}

func (x *StockMaster) GetTradingUnit() float64 {
	if x != nil {
		return x.TradingUnit
	}
	return 0
}

func (x *StockMaster) GetNextTradingUnit() float64 {
	if x != nil {
		return x.NextTradingUnit
	}
	return 0
}

func (x *StockMaster) GetStopTradingType() StopTradingType {
	if x != nil {
		return x.StopTradingType
	}
	return StopTradingType_STOP_TRADING_TYPE_UNSPECIFIED
}

func (x *StockMaster) GetStartPublicationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartPublicationDate
	}
	return nil
}

func (x *StockMaster) GetLastPublicationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LastPublicationDate
	}
	return nil
}

func (x *StockMaster) GetSettlementType() SettlementType {
	if x != nil {
		return x.SettlementType
	}
	return SettlementType_SETTLEMENT_TYPE_UNSPECIFIED
}

func (x *StockMaster) GetSettlementDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SettlementDate
	}
	return nil
}

func (x *StockMaster) GetListingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ListingDate
	}
	return nil
}

func (x *StockMaster) GetExpireDate_2Type() string {
	if x != nil {
		return x.ExpireDate_2Type
	}
	return ""
}

func (x *StockMaster) GetLargeUnit() float64 {
	if x != nil {
		return x.LargeUnit
	}
	return 0
}

func (x *StockMaster) GetLargeAmount() float64 {
	if x != nil {
		return x.LargeAmount
	}
	return 0
}

func (x *StockMaster) GetOutputTicketType() string {
	if x != nil {
		return x.OutputTicketType
	}
	return ""
}

func (x *StockMaster) GetDepositAmount() float64 {
	if x != nil {
		return x.DepositAmount
	}
	return 0
}

func (x *StockMaster) GetDepositValuation() float64 {
	if x != nil {
		return x.DepositValuation
	}
	return 0
}

func (x *StockMaster) GetOrganizationType() string {
	if x != nil {
		return x.OrganizationType
	}
	return ""
}

func (x *StockMaster) GetProvisionalType() string {
	if x != nil {
		return x.ProvisionalType
	}
	return ""
}

func (x *StockMaster) GetPrimaryExchange() Exchange {
	if x != nil {
		return x.PrimaryExchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *StockMaster) GetIndefinitePeriodType() string {
	if x != nil {
		return x.IndefinitePeriodType
	}
	return ""
}

func (x *StockMaster) GetIndustryCode() string {
	if x != nil {
		return x.IndustryCode
	}
	return ""
}

func (x *StockMaster) GetIndustryName() string {
	if x != nil {
		return x.IndustryName
	}
	return ""
}

func (x *StockMaster) GetSorTargetType() string {
	if x != nil {
		return x.SorTargetType
	}
	return ""
}

func (x *StockMaster) GetCreateDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDatetime
	}
	return nil
}

func (x *StockMaster) GetUpdateDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateDatetime
	}
	return nil
}

func (x *StockMaster) GetUpdateNumber() string {
	if x != nil {
		return x.UpdateNumber
	}
	return ""
}

type StockExchangeMasterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Columns []StockExchangeMasterColumn `protobuf:"varint,1,rep,packed,name=columns,proto3,enum=tachibanapb.StockExchangeMasterColumn" json:"columns,omitempty"` // 取得したい情報
}

func (x *StockExchangeMasterRequest) Reset() {
	*x = StockExchangeMasterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockExchangeMasterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockExchangeMasterRequest) ProtoMessage() {}

func (x *StockExchangeMasterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockExchangeMasterRequest.ProtoReflect.Descriptor instead.
func (*StockExchangeMasterRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{18}
}

func (x *StockExchangeMasterRequest) GetColumns() []StockExchangeMasterColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type StockExchangeMasterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse       *CommonResponse        `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`                     // レスポンス共通項目
	StockExchangeMasters []*StockExchangeMaster `protobuf:"bytes,2,rep,name=stock_exchange_masters,json=stockExchangeMasters,proto3" json:"stock_exchange_masters,omitempty"` // 株式銘柄市場マスタ
}

func (x *StockExchangeMasterResponse) Reset() {
	*x = StockExchangeMasterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockExchangeMasterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockExchangeMasterResponse) ProtoMessage() {}

func (x *StockExchangeMasterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockExchangeMasterResponse.ProtoReflect.Descriptor instead.
func (*StockExchangeMasterResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{19}
}

func (x *StockExchangeMasterResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *StockExchangeMasterResponse) GetStockExchangeMasters() []*StockExchangeMaster {
	if x != nil {
		return x.StockExchangeMasters
	}
	return nil
}

type StockExchangeMaster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueCode                   string                 `protobuf:"bytes,1,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`                                                                                       // 銘柄コード
	Exchange                    Exchange               `protobuf:"varint,2,opt,name=exchange,proto3,enum=tachibanapb.Exchange" json:"exchange,omitempty"`                                                                               // 上場市場
	StockSystemType             string                 `protobuf:"bytes,3,opt,name=stock_system_type,json=stockSystemType,proto3" json:"stock_system_type,omitempty"`                                                                   // システムC
	UnderLimitPrice             float64                `protobuf:"fixed64,4,opt,name=under_limit_price,json=underLimitPrice,proto3" json:"under_limit_price,omitempty"`                                                                 // 値幅下限
	UpperLimitPrice             float64                `protobuf:"fixed64,5,opt,name=upper_limit_price,json=upperLimitPrice,proto3" json:"upper_limit_price,omitempty"`                                                                 // 値幅上限
	SymbolCategory              string                 `protobuf:"bytes,6,opt,name=symbol_category,json=symbolCategory,proto3" json:"symbol_category,omitempty"`                                                                        // 銘柄区分C
	LimitPriceExchange          Exchange               `protobuf:"varint,7,opt,name=limit_price_exchange,json=limitPriceExchange,proto3,enum=tachibanapb.Exchange" json:"limit_price_exchange,omitempty"`                               // 値幅市場C
	MarginType                  MarginType             `protobuf:"varint,8,opt,name=margin_type,json=marginType,proto3,enum=tachibanapb.MarginType" json:"margin_type,omitempty"`                                                       // 信用C
	ListingDate                 *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=listing_date,json=listingDate,proto3" json:"listing_date,omitempty"`                                                                                 // 新規上場日
	LimitPriceDate              *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=limit_price_date,json=limitPriceDate,proto3" json:"limit_price_date,omitempty"`                                                                     // 値幅期限日
	LimitPriceCategory          string                 `protobuf:"bytes,11,opt,name=limit_price_category,json=limitPriceCategory,proto3" json:"limit_price_category,omitempty"`                                                         // 値幅規制C
	LimitPriceValue             float64                `protobuf:"fixed64,12,opt,name=limit_price_value,json=limitPriceValue,proto3" json:"limit_price_value,omitempty"`                                                                // 値幅規制値
	ConfirmLimitPrice           bool                   `protobuf:"varint,13,opt,name=confirm_limit_price,json=confirmLimitPrice,proto3" json:"confirm_limit_price,omitempty"`                                                           // 値幅チェック可否C
	Section                     string                 `protobuf:"bytes,14,opt,name=section,proto3" json:"section,omitempty"`                                                                                                           // 銘柄部別C
	PrevClosePrice              float64                `protobuf:"fixed64,15,opt,name=prev_close_price,json=prevClosePrice,proto3" json:"prev_close_price,omitempty"`                                                                   // 前日終値
	CalculateLimitPriceExchange Exchange               `protobuf:"varint,16,opt,name=calculate_limit_price_exchange,json=calculateLimitPriceExchange,proto3,enum=tachibanapb.Exchange" json:"calculate_limit_price_exchange,omitempty"` // 値幅算出市場C
	Regulation1                 string                 `protobuf:"bytes,17,opt,name=regulation1,proto3" json:"regulation1,omitempty"`                                                                                                   // 銘柄規制1C
	Regulation2                 string                 `protobuf:"bytes,18,opt,name=regulation2,proto3" json:"regulation2,omitempty"`                                                                                                   // 銘柄規制2C
	SectionType                 string                 `protobuf:"bytes,19,opt,name=section_type,json=sectionType,proto3" json:"section_type,omitempty"`                                                                                // 上場区分
	DelistingDate               *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=delisting_date,json=delistingDate,proto3" json:"delisting_date,omitempty"`                                                                          // 上場廃止日
	TradingUnit                 float64                `protobuf:"fixed64,21,opt,name=trading_unit,json=tradingUnit,proto3" json:"trading_unit,omitempty"`                                                                              // 売買単位
	NextTradingUnit             float64                `protobuf:"fixed64,22,opt,name=next_trading_unit,json=nextTradingUnit,proto3" json:"next_trading_unit,omitempty"`                                                                // 売買単位(翌営業日)
	TickGroupType               TickGroupType          `protobuf:"varint,23,opt,name=tick_group_type,json=tickGroupType,proto3,enum=tachibanapb.TickGroupType" json:"tick_group_type,omitempty"`                                        // 呼値の単位番号
	NextTickGroupType           TickGroupType          `protobuf:"varint,24,opt,name=next_tick_group_type,json=nextTickGroupType,proto3,enum=tachibanapb.TickGroupType" json:"next_tick_group_type,omitempty"`                          // 呼値の単位番号(翌営業日)
	InformationSource           string                 `protobuf:"bytes,25,opt,name=information_source,json=informationSource,proto3" json:"information_source,omitempty"`                                                              // 情報系ソース
	InformationCode             string                 `protobuf:"bytes,26,opt,name=information_code,json=informationCode,proto3" json:"information_code,omitempty"`                                                                    // 情報系コード
	OfferPrice                  float64                `protobuf:"fixed64,27,opt,name=offer_price,json=offerPrice,proto3" json:"offer_price,omitempty"`                                                                                 // 公募価格
	CreateDatetime              *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=create_datetime,json=createDatetime,proto3" json:"create_datetime,omitempty"`                                                                       // 作成日時
	UpdateDatetime              *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=update_datetime,json=updateDatetime,proto3" json:"update_datetime,omitempty"`                                                                       // 更新日時
	UpdateNumber                string                 `protobuf:"bytes,30,opt,name=update_number,json=updateNumber,proto3" json:"update_number,omitempty"`                                                                             // 更新通番
}

func (x *StockExchangeMaster) Reset() {
	*x = StockExchangeMaster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockExchangeMaster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockExchangeMaster) ProtoMessage() {}

func (x *StockExchangeMaster) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockExchangeMaster.ProtoReflect.Descriptor instead.
func (*StockExchangeMaster) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{20}
}

func (x *StockExchangeMaster) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *StockExchangeMaster) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *StockExchangeMaster) GetStockSystemType() string {
	if x != nil {
		return x.StockSystemType
	}
	return ""
}

func (x *StockExchangeMaster) GetUnderLimitPrice() float64 {
	if x != nil {
		return x.UnderLimitPrice
	}
	return 0
}

func (x *StockExchangeMaster) GetUpperLimitPrice() float64 {
	if x != nil {
		return x.UpperLimitPrice
	}
	return 0
}

func (x *StockExchangeMaster) GetSymbolCategory() string {
	if x != nil {
		return x.SymbolCategory
	}
	return ""
}

func (x *StockExchangeMaster) GetLimitPriceExchange() Exchange {
	if x != nil {
		return x.LimitPriceExchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *StockExchangeMaster) GetMarginType() MarginType {
	if x != nil {
		return x.MarginType
	}
	return MarginType_MARGIN_TYPE_UNSPECIFIED
}

func (x *StockExchangeMaster) GetListingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ListingDate
	}
	return nil
}

func (x *StockExchangeMaster) GetLimitPriceDate() *timestamppb.Timestamp {
	if x != nil {
		return x.LimitPriceDate
	}
	return nil
}

func (x *StockExchangeMaster) GetLimitPriceCategory() string {
	if x != nil {
		return x.LimitPriceCategory
	}
	return ""
}

func (x *StockExchangeMaster) GetLimitPriceValue() float64 {
	if x != nil {
		return x.LimitPriceValue
	}
	return 0
}

func (x *StockExchangeMaster) GetConfirmLimitPrice() bool {
	if x != nil {
		return x.ConfirmLimitPrice
	}
	return false
}

func (x *StockExchangeMaster) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *StockExchangeMaster) GetPrevClosePrice() float64 {
	if x != nil {
		return x.PrevClosePrice
	}
	return 0
}

func (x *StockExchangeMaster) GetCalculateLimitPriceExchange() Exchange {
	if x != nil {
		return x.CalculateLimitPriceExchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *StockExchangeMaster) GetRegulation1() string {
	if x != nil {
		return x.Regulation1
	}
	return ""
}

func (x *StockExchangeMaster) GetRegulation2() string {
	if x != nil {
		return x.Regulation2
	}
	return ""
}

func (x *StockExchangeMaster) GetSectionType() string {
	if x != nil {
		return x.SectionType
	}
	return ""
}

func (x *StockExchangeMaster) GetDelistingDate() *timestamppb.Timestamp {
	if x != nil {
		return x.DelistingDate
	}
	return nil
}

func (x *StockExchangeMaster) GetTradingUnit() float64 {
	if x != nil {
		return x.TradingUnit
	}
	return 0
}

func (x *StockExchangeMaster) GetNextTradingUnit() float64 {
	if x != nil {
		return x.NextTradingUnit
	}
	return 0
}

func (x *StockExchangeMaster) GetTickGroupType() TickGroupType {
	if x != nil {
		return x.TickGroupType
	}
	return TickGroupType_TICK_GROUP_TYPE_UNSPECIFIED
}

func (x *StockExchangeMaster) GetNextTickGroupType() TickGroupType {
	if x != nil {
		return x.NextTickGroupType
	}
	return TickGroupType_TICK_GROUP_TYPE_UNSPECIFIED
}

func (x *StockExchangeMaster) GetInformationSource() string {
	if x != nil {
		return x.InformationSource
	}
	return ""
}

func (x *StockExchangeMaster) GetInformationCode() string {
	if x != nil {
		return x.InformationCode
	}
	return ""
}

func (x *StockExchangeMaster) GetOfferPrice() float64 {
	if x != nil {
		return x.OfferPrice
	}
	return 0
}

func (x *StockExchangeMaster) GetCreateDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDatetime
	}
	return nil
}

func (x *StockExchangeMaster) GetUpdateDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateDatetime
	}
	return nil
}

func (x *StockExchangeMaster) GetUpdateNumber() string {
	if x != nil {
		return x.UpdateNumber
	}
	return ""
}

type MarketPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueCodes []string            `protobuf:"bytes,1,rep,name=issue_codes,json=issueCodes,proto3" json:"issue_codes,omitempty"`                    // 取得したい銘柄コード
	Columns    []MarketPriceColumn `protobuf:"varint,2,rep,packed,name=columns,proto3,enum=tachibanapb.MarketPriceColumn" json:"columns,omitempty"` // 取得したい情報
}

func (x *MarketPriceRequest) Reset() {
	*x = MarketPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceRequest) ProtoMessage() {}

func (x *MarketPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceRequest.ProtoReflect.Descriptor instead.
func (*MarketPriceRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{21}
}

func (x *MarketPriceRequest) GetIssueCodes() []string {
	if x != nil {
		return x.IssueCodes
	}
	return nil
}

func (x *MarketPriceRequest) GetColumns() []MarketPriceColumn {
	if x != nil {
		return x.Columns
	}
	return nil
}

type MarketPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *CommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"` // レスポンス共通項目
	MarketPrices   []*MarketPrice  `protobuf:"bytes,2,rep,name=market_prices,json=marketPrices,proto3" json:"market_prices,omitempty"`       // 時価情報
}

func (x *MarketPriceResponse) Reset() {
	*x = MarketPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceResponse) ProtoMessage() {}

func (x *MarketPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceResponse.ProtoReflect.Descriptor instead.
func (*MarketPriceResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{22}
}

func (x *MarketPriceResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *MarketPriceResponse) GetMarketPrices() []*MarketPrice {
	if x != nil {
		return x.MarketPrices
	}
	return nil
}

type MarketPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueCode         string                 `protobuf:"bytes,1,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`                                                       // 銘柄コード
	Section           string                 `protobuf:"bytes,2,opt,name=section,proto3" json:"section,omitempty"`                                                                            // 所属
	CurrentPrice      float64                `protobuf:"fixed64,3,opt,name=current_price,json=currentPrice,proto3" json:"current_price,omitempty"`                                            // 現在値
	CurrentPriceTime  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=current_price_time,json=currentPriceTime,proto3" json:"current_price_time,omitempty"`                                // 現在値時刻
	ChangePriceType   ChangePriceType        `protobuf:"varint,5,opt,name=change_price_type,json=changePriceType,proto3,enum=tachibanapb.ChangePriceType" json:"change_price_type,omitempty"` // 現値前値比較
	PrevDayRatio      float64                `protobuf:"fixed64,6,opt,name=prev_day_ratio,json=prevDayRatio,proto3" json:"prev_day_ratio,omitempty"`                                          // 前日比
	PrevDayPercent    float64                `protobuf:"fixed64,7,opt,name=prev_day_percent,json=prevDayPercent,proto3" json:"prev_day_percent,omitempty"`                                    // 騰落率
	OpenPrice         float64                `protobuf:"fixed64,8,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`                                                     // 始値
	OpenPriceTime     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=open_price_time,json=openPriceTime,proto3" json:"open_price_time,omitempty"`                                         // 始値時刻
	HighPrice         float64                `protobuf:"fixed64,10,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`                                                    // 高値
	HighPriceTime     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=high_price_time,json=highPriceTime,proto3" json:"high_price_time,omitempty"`                                        // 高値時刻
	LowPrice          float64                `protobuf:"fixed64,12,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`                                                       // 安値
	LowPriceTime      *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=low_price_time,json=lowPriceTime,proto3" json:"low_price_time,omitempty"`                                           // 安値時刻
	Volume            float64                `protobuf:"fixed64,14,opt,name=volume,proto3" json:"volume,omitempty"`                                                                           // 出来高
	AskSign           IndicationPriceType    `protobuf:"varint,15,opt,name=ask_sign,json=askSign,proto3,enum=tachibanapb.IndicationPriceType" json:"ask_sign,omitempty"`                      // 売気配値種類
	AskPrice          float64                `protobuf:"fixed64,16,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`                                                       // 売気配値
	AskQuantity       float64                `protobuf:"fixed64,17,opt,name=ask_quantity,json=askQuantity,proto3" json:"ask_quantity,omitempty"`                                              // 売気配数量
	BidSign           IndicationPriceType    `protobuf:"varint,18,opt,name=bid_sign,json=bidSign,proto3,enum=tachibanapb.IndicationPriceType" json:"bid_sign,omitempty"`                      // 買気配値種類
	BidPrice          float64                `protobuf:"fixed64,19,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`                                                       // 買気配値
	BidQuantity       float64                `protobuf:"fixed64,20,opt,name=bid_quantity,json=bidQuantity,proto3" json:"bid_quantity,omitempty"`                                              // 買気配数量
	ExRightType       string                 `protobuf:"bytes,21,opt,name=ex_right_type,json=exRightType,proto3" json:"ex_right_type,omitempty"`                                              // 配当落銘柄区分
	DiscontinuityType string                 `protobuf:"bytes,22,opt,name=discontinuity_type,json=discontinuityType,proto3" json:"discontinuity_type,omitempty"`                              // 不連続要因銘柄区分
	StopHigh          CurrentPriceType       `protobuf:"varint,23,opt,name=stop_high,json=stopHigh,proto3,enum=tachibanapb.CurrentPriceType" json:"stop_high,omitempty"`                      // 日通し高値フラグ
	StopLow           CurrentPriceType       `protobuf:"varint,24,opt,name=stop_low,json=stopLow,proto3,enum=tachibanapb.CurrentPriceType" json:"stop_low,omitempty"`                         // 日通し安値フラグ
	TradingAmount     float64                `protobuf:"fixed64,25,opt,name=trading_amount,json=tradingAmount,proto3" json:"trading_amount,omitempty"`                                        // 売買代金
	AskQuantityMarket float64                `protobuf:"fixed64,26,opt,name=ask_quantity_market,json=askQuantityMarket,proto3" json:"ask_quantity_market,omitempty"`                          // 売数量(成行)
	BidQuantityMarket float64                `protobuf:"fixed64,27,opt,name=bid_quantity_market,json=bidQuantityMarket,proto3" json:"bid_quantity_market,omitempty"`                          // 買数量(成行)
	AskQuantityOver   float64                `protobuf:"fixed64,28,opt,name=ask_quantity_over,json=askQuantityOver,proto3" json:"ask_quantity_over,omitempty"`                                // 売-OVER
	AskQuantity10     float64                `protobuf:"fixed64,29,opt,name=ask_quantity10,json=askQuantity10,proto3" json:"ask_quantity10,omitempty"`                                        // 売-10-数量
	AskPrice10        float64                `protobuf:"fixed64,30,opt,name=ask_price10,json=askPrice10,proto3" json:"ask_price10,omitempty"`                                                 // 売-10-値段
	AskQuantity9      float64                `protobuf:"fixed64,31,opt,name=ask_quantity9,json=askQuantity9,proto3" json:"ask_quantity9,omitempty"`                                           // 売-9-数量
	AskPrice9         float64                `protobuf:"fixed64,32,opt,name=ask_price9,json=askPrice9,proto3" json:"ask_price9,omitempty"`                                                    // 売-9-値段
	AskQuantity8      float64                `protobuf:"fixed64,33,opt,name=ask_quantity8,json=askQuantity8,proto3" json:"ask_quantity8,omitempty"`                                           // 売-8-数量
	AskPrice8         float64                `protobuf:"fixed64,34,opt,name=ask_price8,json=askPrice8,proto3" json:"ask_price8,omitempty"`                                                    // 売-8-値段
	AskQuantity7      float64                `protobuf:"fixed64,35,opt,name=ask_quantity7,json=askQuantity7,proto3" json:"ask_quantity7,omitempty"`                                           // 売-7-数量
	AskPrice7         float64                `protobuf:"fixed64,36,opt,name=ask_price7,json=askPrice7,proto3" json:"ask_price7,omitempty"`                                                    // 売-7-値段
	AskQuantity6      float64                `protobuf:"fixed64,37,opt,name=ask_quantity6,json=askQuantity6,proto3" json:"ask_quantity6,omitempty"`                                           // 売-6-数量
	AskPrice6         float64                `protobuf:"fixed64,38,opt,name=ask_price6,json=askPrice6,proto3" json:"ask_price6,omitempty"`                                                    // 売-6-値段
	AskQuantity5      float64                `protobuf:"fixed64,39,opt,name=ask_quantity5,json=askQuantity5,proto3" json:"ask_quantity5,omitempty"`                                           // 売-5-数量
	AskPrice5         float64                `protobuf:"fixed64,40,opt,name=ask_price5,json=askPrice5,proto3" json:"ask_price5,omitempty"`                                                    // 売-5-値段
	AskQuantity4      float64                `protobuf:"fixed64,41,opt,name=ask_quantity4,json=askQuantity4,proto3" json:"ask_quantity4,omitempty"`                                           // 売-4-数量
	AskPrice4         float64                `protobuf:"fixed64,42,opt,name=ask_price4,json=askPrice4,proto3" json:"ask_price4,omitempty"`                                                    // 売-4-値段
	AskQuantity3      float64                `protobuf:"fixed64,43,opt,name=ask_quantity3,json=askQuantity3,proto3" json:"ask_quantity3,omitempty"`                                           // 売-3-数量
	AskPrice3         float64                `protobuf:"fixed64,44,opt,name=ask_price3,json=askPrice3,proto3" json:"ask_price3,omitempty"`                                                    // 売-3-値段
	AskQuantity2      float64                `protobuf:"fixed64,45,opt,name=ask_quantity2,json=askQuantity2,proto3" json:"ask_quantity2,omitempty"`                                           // 売-2-数量
	AskPrice2         float64                `protobuf:"fixed64,46,opt,name=ask_price2,json=askPrice2,proto3" json:"ask_price2,omitempty"`                                                    // 売-2-値段
	AskQuantity1      float64                `protobuf:"fixed64,47,opt,name=ask_quantity1,json=askQuantity1,proto3" json:"ask_quantity1,omitempty"`                                           // 売-1-数量
	AskPrice1         float64                `protobuf:"fixed64,48,opt,name=ask_price1,json=askPrice1,proto3" json:"ask_price1,omitempty"`                                                    // 売-1-値段
	BidQuantity1      float64                `protobuf:"fixed64,49,opt,name=bid_quantity1,json=bidQuantity1,proto3" json:"bid_quantity1,omitempty"`                                           // 買-1-数量
	BidPrice1         float64                `protobuf:"fixed64,50,opt,name=bid_price1,json=bidPrice1,proto3" json:"bid_price1,omitempty"`                                                    // 買-1-値段
	BidQuantity2      float64                `protobuf:"fixed64,51,opt,name=bid_quantity2,json=bidQuantity2,proto3" json:"bid_quantity2,omitempty"`                                           // 買-2-数量
	BidPrice2         float64                `protobuf:"fixed64,52,opt,name=bid_price2,json=bidPrice2,proto3" json:"bid_price2,omitempty"`                                                    // 買-2-値段
	BidQuantity3      float64                `protobuf:"fixed64,53,opt,name=bid_quantity3,json=bidQuantity3,proto3" json:"bid_quantity3,omitempty"`                                           // 買-3-数量
	BidPrice3         float64                `protobuf:"fixed64,54,opt,name=bid_price3,json=bidPrice3,proto3" json:"bid_price3,omitempty"`                                                    // 買-3-値段
	BidQuantity4      float64                `protobuf:"fixed64,55,opt,name=bid_quantity4,json=bidQuantity4,proto3" json:"bid_quantity4,omitempty"`                                           // 買-4-数量
	BidPrice4         float64                `protobuf:"fixed64,56,opt,name=bid_price4,json=bidPrice4,proto3" json:"bid_price4,omitempty"`                                                    // 買-4-値段
	BidQuantity5      float64                `protobuf:"fixed64,57,opt,name=bid_quantity5,json=bidQuantity5,proto3" json:"bid_quantity5,omitempty"`                                           // 買-5-数量
	BidPrice5         float64                `protobuf:"fixed64,58,opt,name=bid_price5,json=bidPrice5,proto3" json:"bid_price5,omitempty"`                                                    // 買-5-値段
	BidQuantity6      float64                `protobuf:"fixed64,59,opt,name=bid_quantity6,json=bidQuantity6,proto3" json:"bid_quantity6,omitempty"`                                           // 買-6-数量
	BidPrice6         float64                `protobuf:"fixed64,60,opt,name=bid_price6,json=bidPrice6,proto3" json:"bid_price6,omitempty"`                                                    // 買-6-値段
	BidQuantity7      float64                `protobuf:"fixed64,61,opt,name=bid_quantity7,json=bidQuantity7,proto3" json:"bid_quantity7,omitempty"`                                           // 買-7-数量
	BidPrice7         float64                `protobuf:"fixed64,62,opt,name=bid_price7,json=bidPrice7,proto3" json:"bid_price7,omitempty"`                                                    // 買-7-値段
	BidQuantity8      float64                `protobuf:"fixed64,63,opt,name=bid_quantity8,json=bidQuantity8,proto3" json:"bid_quantity8,omitempty"`                                           // 買-8-数量
	BidPrice8         float64                `protobuf:"fixed64,64,opt,name=bid_price8,json=bidPrice8,proto3" json:"bid_price8,omitempty"`                                                    // 買-8-値段
	BidQuantity9      float64                `protobuf:"fixed64,65,opt,name=bid_quantity9,json=bidQuantity9,proto3" json:"bid_quantity9,omitempty"`                                           // 買-9-数量
	BidPrice9         float64                `protobuf:"fixed64,66,opt,name=bid_price9,json=bidPrice9,proto3" json:"bid_price9,omitempty"`                                                    // 買-9-値段
	BidQuantity10     float64                `protobuf:"fixed64,67,opt,name=bid_quantity10,json=bidQuantity10,proto3" json:"bid_quantity10,omitempty"`                                        // 買-10-数量
	BidPrice10        float64                `protobuf:"fixed64,68,opt,name=bid_price10,json=bidPrice10,proto3" json:"bid_price10,omitempty"`                                                 // 買-10-値段
	BidQuantityUnder  float64                `protobuf:"fixed64,69,opt,name=bid_quantity_under,json=bidQuantityUnder,proto3" json:"bid_quantity_under,omitempty"`                             // 買-UNDER
	Vwap              float64                `protobuf:"fixed64,70,opt,name=vwap,proto3" json:"vwap,omitempty"`                                                                               // VWAP
	Prp               float64                `protobuf:"fixed64,71,opt,name=prp,proto3" json:"prp,omitempty"`                                                                                 // PRP
}

func (x *MarketPrice) Reset() {
	*x = MarketPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPrice) ProtoMessage() {}

func (x *MarketPrice) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPrice.ProtoReflect.Descriptor instead.
func (*MarketPrice) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{23}
}

func (x *MarketPrice) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *MarketPrice) GetSection() string {
	if x != nil {
		return x.Section
	}
	return ""
}

func (x *MarketPrice) GetCurrentPrice() float64 {
	if x != nil {
		return x.CurrentPrice
	}
	return 0
}

func (x *MarketPrice) GetCurrentPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentPriceTime
	}
	return nil
}

func (x *MarketPrice) GetChangePriceType() ChangePriceType {
	if x != nil {
		return x.ChangePriceType
	}
	return ChangePriceType_CHANGE_PRICE_TYPE_UNSPECIFIED
}

func (x *MarketPrice) GetPrevDayRatio() float64 {
	if x != nil {
		return x.PrevDayRatio
	}
	return 0
}

func (x *MarketPrice) GetPrevDayPercent() float64 {
	if x != nil {
		return x.PrevDayPercent
	}
	return 0
}

func (x *MarketPrice) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *MarketPrice) GetOpenPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenPriceTime
	}
	return nil
}

func (x *MarketPrice) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *MarketPrice) GetHighPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.HighPriceTime
	}
	return nil
}

func (x *MarketPrice) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *MarketPrice) GetLowPriceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LowPriceTime
	}
	return nil
}

func (x *MarketPrice) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketPrice) GetAskSign() IndicationPriceType {
	if x != nil {
		return x.AskSign
	}
	return IndicationPriceType_INDICATION_PRICE_TYPE_UNSPECIFIED
}

func (x *MarketPrice) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity() float64 {
	if x != nil {
		return x.AskQuantity
	}
	return 0
}

func (x *MarketPrice) GetBidSign() IndicationPriceType {
	if x != nil {
		return x.BidSign
	}
	return IndicationPriceType_INDICATION_PRICE_TYPE_UNSPECIFIED
}

func (x *MarketPrice) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity() float64 {
	if x != nil {
		return x.BidQuantity
	}
	return 0
}

func (x *MarketPrice) GetExRightType() string {
	if x != nil {
		return x.ExRightType
	}
	return ""
}

func (x *MarketPrice) GetDiscontinuityType() string {
	if x != nil {
		return x.DiscontinuityType
	}
	return ""
}

func (x *MarketPrice) GetStopHigh() CurrentPriceType {
	if x != nil {
		return x.StopHigh
	}
	return CurrentPriceType_CURRENT_PRICE_TYPE_UNSPECIFIED
}

func (x *MarketPrice) GetStopLow() CurrentPriceType {
	if x != nil {
		return x.StopLow
	}
	return CurrentPriceType_CURRENT_PRICE_TYPE_UNSPECIFIED
}

func (x *MarketPrice) GetTradingAmount() float64 {
	if x != nil {
		return x.TradingAmount
	}
	return 0
}

func (x *MarketPrice) GetAskQuantityMarket() float64 {
	if x != nil {
		return x.AskQuantityMarket
	}
	return 0
}

func (x *MarketPrice) GetBidQuantityMarket() float64 {
	if x != nil {
		return x.BidQuantityMarket
	}
	return 0
}

func (x *MarketPrice) GetAskQuantityOver() float64 {
	if x != nil {
		return x.AskQuantityOver
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity10() float64 {
	if x != nil {
		return x.AskQuantity10
	}
	return 0
}

func (x *MarketPrice) GetAskPrice10() float64 {
	if x != nil {
		return x.AskPrice10
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity9() float64 {
	if x != nil {
		return x.AskQuantity9
	}
	return 0
}

func (x *MarketPrice) GetAskPrice9() float64 {
	if x != nil {
		return x.AskPrice9
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity8() float64 {
	if x != nil {
		return x.AskQuantity8
	}
	return 0
}

func (x *MarketPrice) GetAskPrice8() float64 {
	if x != nil {
		return x.AskPrice8
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity7() float64 {
	if x != nil {
		return x.AskQuantity7
	}
	return 0
}

func (x *MarketPrice) GetAskPrice7() float64 {
	if x != nil {
		return x.AskPrice7
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity6() float64 {
	if x != nil {
		return x.AskQuantity6
	}
	return 0
}

func (x *MarketPrice) GetAskPrice6() float64 {
	if x != nil {
		return x.AskPrice6
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity5() float64 {
	if x != nil {
		return x.AskQuantity5
	}
	return 0
}

func (x *MarketPrice) GetAskPrice5() float64 {
	if x != nil {
		return x.AskPrice5
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity4() float64 {
	if x != nil {
		return x.AskQuantity4
	}
	return 0
}

func (x *MarketPrice) GetAskPrice4() float64 {
	if x != nil {
		return x.AskPrice4
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity3() float64 {
	if x != nil {
		return x.AskQuantity3
	}
	return 0
}

func (x *MarketPrice) GetAskPrice3() float64 {
	if x != nil {
		return x.AskPrice3
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity2() float64 {
	if x != nil {
		return x.AskQuantity2
	}
	return 0
}

func (x *MarketPrice) GetAskPrice2() float64 {
	if x != nil {
		return x.AskPrice2
	}
	return 0
}

func (x *MarketPrice) GetAskQuantity1() float64 {
	if x != nil {
		return x.AskQuantity1
	}
	return 0
}

func (x *MarketPrice) GetAskPrice1() float64 {
	if x != nil {
		return x.AskPrice1
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity1() float64 {
	if x != nil {
		return x.BidQuantity1
	}
	return 0
}

func (x *MarketPrice) GetBidPrice1() float64 {
	if x != nil {
		return x.BidPrice1
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity2() float64 {
	if x != nil {
		return x.BidQuantity2
	}
	return 0
}

func (x *MarketPrice) GetBidPrice2() float64 {
	if x != nil {
		return x.BidPrice2
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity3() float64 {
	if x != nil {
		return x.BidQuantity3
	}
	return 0
}

func (x *MarketPrice) GetBidPrice3() float64 {
	if x != nil {
		return x.BidPrice3
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity4() float64 {
	if x != nil {
		return x.BidQuantity4
	}
	return 0
}

func (x *MarketPrice) GetBidPrice4() float64 {
	if x != nil {
		return x.BidPrice4
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity5() float64 {
	if x != nil {
		return x.BidQuantity5
	}
	return 0
}

func (x *MarketPrice) GetBidPrice5() float64 {
	if x != nil {
		return x.BidPrice5
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity6() float64 {
	if x != nil {
		return x.BidQuantity6
	}
	return 0
}

func (x *MarketPrice) GetBidPrice6() float64 {
	if x != nil {
		return x.BidPrice6
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity7() float64 {
	if x != nil {
		return x.BidQuantity7
	}
	return 0
}

func (x *MarketPrice) GetBidPrice7() float64 {
	if x != nil {
		return x.BidPrice7
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity8() float64 {
	if x != nil {
		return x.BidQuantity8
	}
	return 0
}

func (x *MarketPrice) GetBidPrice8() float64 {
	if x != nil {
		return x.BidPrice8
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity9() float64 {
	if x != nil {
		return x.BidQuantity9
	}
	return 0
}

func (x *MarketPrice) GetBidPrice9() float64 {
	if x != nil {
		return x.BidPrice9
	}
	return 0
}

func (x *MarketPrice) GetBidQuantity10() float64 {
	if x != nil {
		return x.BidQuantity10
	}
	return 0
}

func (x *MarketPrice) GetBidPrice10() float64 {
	if x != nil {
		return x.BidPrice10
	}
	return 0
}

func (x *MarketPrice) GetBidQuantityUnder() float64 {
	if x != nil {
		return x.BidQuantityUnder
	}
	return 0
}

func (x *MarketPrice) GetVwap() float64 {
	if x != nil {
		return x.Vwap
	}
	return 0
}

func (x *MarketPrice) GetPrp() float64 {
	if x != nil {
		return x.Prp
	}
	return 0
}

type BusinessDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BusinessDayRequest) Reset() {
	*x = BusinessDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessDayRequest) ProtoMessage() {}

func (x *BusinessDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessDayRequest.ProtoReflect.Descriptor instead.
func (*BusinessDayRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{24}
}

type BusinessDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *CommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"` // レスポンス共通項目
	BusinessDays   []*BusinessDay  `protobuf:"bytes,2,rep,name=business_days,json=businessDays,proto3" json:"business_days,omitempty"`       // 日付情報
}

func (x *BusinessDayResponse) Reset() {
	*x = BusinessDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessDayResponse) ProtoMessage() {}

func (x *BusinessDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessDayResponse.ProtoReflect.Descriptor instead.
func (*BusinessDayResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{25}
}

func (x *BusinessDayResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *BusinessDayResponse) GetBusinessDays() []*BusinessDay {
	if x != nil {
		return x.BusinessDays
	}
	return nil
}

type BusinessDay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DayKey                 DayKey                 `protobuf:"varint,1,opt,name=day_key,json=dayKey,proto3,enum=tachibanapb.DayKey" json:"day_key,omitempty"`                           // 日付KEY
	PrevDay1               *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=prev_day1,json=prevDay1,proto3" json:"prev_day1,omitempty"`                                              // 1営業日前
	PrevDay2               *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=prev_day2,json=prevDay2,proto3" json:"prev_day2,omitempty"`                                              // 2営業日前
	PrevDay3               *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=prev_day3,json=prevDay3,proto3" json:"prev_day3,omitempty"`                                              // 3営業日前
	Today                  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=today,proto3" json:"today,omitempty"`                                                                    // 当日日付
	NextDay1               *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=next_day1,json=nextDay1,proto3" json:"next_day1,omitempty"`                                              // 翌1営業日
	NextDay2               *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=next_day2,json=nextDay2,proto3" json:"next_day2,omitempty"`                                              // 翌2営業日
	NextDay3               *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=next_day3,json=nextDay3,proto3" json:"next_day3,omitempty"`                                              // 翌3営業日
	NextDay4               *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=next_day4,json=nextDay4,proto3" json:"next_day4,omitempty"`                                              // 翌4営業日
	NextDay5               *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=next_day5,json=nextDay5,proto3" json:"next_day5,omitempty"`                                             // 翌5営業日
	NextDay6               *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=next_day6,json=nextDay6,proto3" json:"next_day6,omitempty"`                                             // 翌6営業日
	NextDay7               *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=next_day7,json=nextDay7,proto3" json:"next_day7,omitempty"`                                             // 翌7営業日
	NextDay8               *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=next_day8,json=nextDay8,proto3" json:"next_day8,omitempty"`                                             // 翌8営業日
	NextDay9               *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=next_day9,json=nextDay9,proto3" json:"next_day9,omitempty"`                                             // 翌9営業日
	NextDay10              *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=next_day10,json=nextDay10,proto3" json:"next_day10,omitempty"`                                          // 翌10営業日
	DeliveryDay            *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=delivery_day,json=deliveryDay,proto3" json:"delivery_day,omitempty"`                                    // 株式受渡日
	ProvisionalDeliveryDay *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=provisional_delivery_day,json=provisionalDeliveryDay,proto3" json:"provisional_delivery_day,omitempty"` // 株式仮決受渡日
	BondDeliveryDay        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=bond_delivery_day,json=bondDeliveryDay,proto3" json:"bond_delivery_day,omitempty"`                      // 債券受渡日
}

func (x *BusinessDay) Reset() {
	*x = BusinessDay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BusinessDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BusinessDay) ProtoMessage() {}

func (x *BusinessDay) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BusinessDay.ProtoReflect.Descriptor instead.
func (*BusinessDay) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{26}
}

func (x *BusinessDay) GetDayKey() DayKey {
	if x != nil {
		return x.DayKey
	}
	return DayKey_DAY_KEY_UNSPECIFIED
}

func (x *BusinessDay) GetPrevDay1() *timestamppb.Timestamp {
	if x != nil {
		return x.PrevDay1
	}
	return nil
}

func (x *BusinessDay) GetPrevDay2() *timestamppb.Timestamp {
	if x != nil {
		return x.PrevDay2
	}
	return nil
}

func (x *BusinessDay) GetPrevDay3() *timestamppb.Timestamp {
	if x != nil {
		return x.PrevDay3
	}
	return nil
}

func (x *BusinessDay) GetToday() *timestamppb.Timestamp {
	if x != nil {
		return x.Today
	}
	return nil
}

func (x *BusinessDay) GetNextDay1() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay1
	}
	return nil
}

func (x *BusinessDay) GetNextDay2() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay2
	}
	return nil
}

func (x *BusinessDay) GetNextDay3() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay3
	}
	return nil
}

func (x *BusinessDay) GetNextDay4() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay4
	}
	return nil
}

func (x *BusinessDay) GetNextDay5() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay5
	}
	return nil
}

func (x *BusinessDay) GetNextDay6() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay6
	}
	return nil
}

func (x *BusinessDay) GetNextDay7() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay7
	}
	return nil
}

func (x *BusinessDay) GetNextDay8() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay8
	}
	return nil
}

func (x *BusinessDay) GetNextDay9() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay9
	}
	return nil
}

func (x *BusinessDay) GetNextDay10() *timestamppb.Timestamp {
	if x != nil {
		return x.NextDay10
	}
	return nil
}

func (x *BusinessDay) GetDeliveryDay() *timestamppb.Timestamp {
	if x != nil {
		return x.DeliveryDay
	}
	return nil
}

func (x *BusinessDay) GetProvisionalDeliveryDay() *timestamppb.Timestamp {
	if x != nil {
		return x.ProvisionalDeliveryDay
	}
	return nil
}

func (x *BusinessDay) GetBondDeliveryDay() *timestamppb.Timestamp {
	if x != nil {
		return x.BondDeliveryDay
	}
	return nil
}

type TickGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TickGroupRequest) Reset() {
	*x = TickGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickGroupRequest) ProtoMessage() {}

func (x *TickGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickGroupRequest.ProtoReflect.Descriptor instead.
func (*TickGroupRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{27}
}

type TickGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *CommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"` // レスポンス共通項目
	TickGroups     []*TickGroup    `protobuf:"bytes,2,rep,name=tick_groups,json=tickGroups,proto3" json:"tick_groups,omitempty"`             // 呼値
}

func (x *TickGroupResponse) Reset() {
	*x = TickGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickGroupResponse) ProtoMessage() {}

func (x *TickGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickGroupResponse.ProtoReflect.Descriptor instead.
func (*TickGroupResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{28}
}

func (x *TickGroupResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *TickGroupResponse) GetTickGroups() []*TickGroup {
	if x != nil {
		return x.TickGroups
	}
	return nil
}

type TickGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TickGroupType TickGroupType          `protobuf:"varint,1,opt,name=tick_group_type,json=tickGroupType,proto3,enum=tachibanapb.TickGroupType" json:"tick_group_type,omitempty"` // 呼値の単位番号
	StartDate     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`                                               // 適用日
	TickGroupList []*TickGroupPrice      `protobuf:"bytes,3,rep,name=tick_group_list,json=tickGroupList,proto3" json:"tick_group_list,omitempty"`                                 // 呼値グループリスト
	CreateDate    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`                                            // 作成日時
	UpdateDate    *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=update_date,json=updateDate,proto3" json:"update_date,omitempty"`                                            // 更新日時
}

func (x *TickGroup) Reset() {
	*x = TickGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickGroup) ProtoMessage() {}

func (x *TickGroup) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickGroup.ProtoReflect.Descriptor instead.
func (*TickGroup) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{29}
}

func (x *TickGroup) GetTickGroupType() TickGroupType {
	if x != nil {
		return x.TickGroupType
	}
	return TickGroupType_TICK_GROUP_TYPE_UNSPECIFIED
}

func (x *TickGroup) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *TickGroup) GetTickGroupList() []*TickGroupPrice {
	if x != nil {
		return x.TickGroupList
	}
	return nil
}

func (x *TickGroup) GetCreateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateDate
	}
	return nil
}

func (x *TickGroup) GetUpdateDate() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateDate
	}
	return nil
}

type TickGroupPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number    int32   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`                         // 番号
	BasePrice float64 `protobuf:"fixed64,2,opt,name=base_price,json=basePrice,proto3" json:"base_price,omitempty"` // 基準値段
	UnitPrice float64 `protobuf:"fixed64,3,opt,name=unit_price,json=unitPrice,proto3" json:"unit_price,omitempty"` // 呼値値段
	Digits    int32   `protobuf:"varint,4,opt,name=digits,proto3" json:"digits,omitempty"`                         // 小数点桁数
}

func (x *TickGroupPrice) Reset() {
	*x = TickGroupPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickGroupPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickGroupPrice) ProtoMessage() {}

func (x *TickGroupPrice) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickGroupPrice.ProtoReflect.Descriptor instead.
func (*TickGroupPrice) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{30}
}

func (x *TickGroupPrice) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *TickGroupPrice) GetBasePrice() float64 {
	if x != nil {
		return x.BasePrice
	}
	return 0
}

func (x *TickGroupPrice) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *TickGroupPrice) GetDigits() int32 {
	if x != nil {
		return x.Digits
	}
	return 0
}

type StreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTypes    []EventType    `protobuf:"varint,1,rep,packed,name=event_types,json=eventTypes,proto3,enum=tachibanapb.EventType" json:"event_types,omitempty"` // 通知種別
	ReceiveResend bool           `protobuf:"varint,2,opt,name=receive_resend,json=receiveResend,proto3" json:"receive_resend,omitempty"`                          // 再送イベントを受け取るかどうか
	StreamIssues  []*StreamIssue `protobuf:"bytes,3,rep,name=stream_issues,json=streamIssues,proto3" json:"stream_issues,omitempty"`                              // 株価ボード専用 銘柄情報
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{31}
}

func (x *StreamRequest) GetEventTypes() []EventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *StreamRequest) GetReceiveResend() bool {
	if x != nil {
		return x.ReceiveResend
	}
	return false
}

func (x *StreamRequest) GetStreamIssues() []*StreamIssue {
	if x != nil {
		return x.StreamIssues
	}
	return nil
}

type StreamIssue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueCode string   `protobuf:"bytes,1,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`         // 銘柄コード
	Exchange  Exchange `protobuf:"varint,2,opt,name=exchange,proto3,enum=tachibanapb.Exchange" json:"exchange,omitempty"` // 市場
}

func (x *StreamIssue) Reset() {
	*x = StreamIssue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamIssue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamIssue) ProtoMessage() {}

func (x *StreamIssue) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamIssue.ProtoReflect.Descriptor instead.
func (*StreamIssue) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{32}
}

func (x *StreamIssue) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *StreamIssue) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

type StreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType      EventType              `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=tachibanapb.EventType" json:"event_type,omitempty"` // 通知種別
	StreamNumber   int64                  `protobuf:"varint,2,opt,name=stream_number,json=streamNumber,proto3" json:"stream_number,omitempty"`                   // int64
	StreamDateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=stream_date_time,json=streamDateTime,proto3" json:"stream_date_time,omitempty"`            // 通知日時
	ErrorNo        ErrorNo                `protobuf:"varint,4,opt,name=error_no,json=errorNo,proto3,enum=tachibanapb.ErrorNo" json:"error_no,omitempty"`         // エラー番号
	ErrorMessage   string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                    // エラー文言
	Body           []byte                 `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`                                                        // レスポンス本文
	IsFirstTime    bool                   `protobuf:"varint,7,opt,name=is_first_time,json=isFirstTime,proto3" json:"is_first_time,omitempty"`                    // 初回配信
	// 8は時価情報配信に残しておく
	ContractStreamResponse        *ContractStreamResponse        `protobuf:"bytes,9,opt,name=contract_stream_response,json=contractStreamResponse,proto3" json:"contract_stream_response,omitempty"`                         // 注文約定通知イベント
	NewsStreamResponse            *NewsStreamResponse            `protobuf:"bytes,10,opt,name=news_stream_response,json=newsStreamResponse,proto3" json:"news_stream_response,omitempty"`                                    // ニュース通知イベント
	SystemStatusStreamResponse    *SystemStatusStreamResponse    `protobuf:"bytes,11,opt,name=system_status_stream_response,json=systemStatusStreamResponse,proto3" json:"system_status_stream_response,omitempty"`          // システムステータス
	OperationStatusStreamResponse *OperationStatusStreamResponse `protobuf:"bytes,12,opt,name=operation_status_stream_response,json=operationStatusStreamResponse,proto3" json:"operation_status_stream_response,omitempty"` // 運用ステータス
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{33}
}

func (x *StreamResponse) GetEventType() EventType {
	if x != nil {
		return x.EventType
	}
	return EventType_EVENT_TYPE_UNSPECIFIED
}

func (x *StreamResponse) GetStreamNumber() int64 {
	if x != nil {
		return x.StreamNumber
	}
	return 0
}

func (x *StreamResponse) GetStreamDateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StreamDateTime
	}
	return nil
}

func (x *StreamResponse) GetErrorNo() ErrorNo {
	if x != nil {
		return x.ErrorNo
	}
	return ErrorNo_ERROR_NO_UNSPECIFIED
}

func (x *StreamResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *StreamResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *StreamResponse) GetIsFirstTime() bool {
	if x != nil {
		return x.IsFirstTime
	}
	return false
}

func (x *StreamResponse) GetContractStreamResponse() *ContractStreamResponse {
	if x != nil {
		return x.ContractStreamResponse
	}
	return nil
}

func (x *StreamResponse) GetNewsStreamResponse() *NewsStreamResponse {
	if x != nil {
		return x.NewsStreamResponse
	}
	return nil
}

func (x *StreamResponse) GetSystemStatusStreamResponse() *SystemStatusStreamResponse {
	if x != nil {
		return x.SystemStatusStreamResponse
	}
	return nil
}

func (x *StreamResponse) GetOperationStatusStreamResponse() *OperationStatusStreamResponse {
	if x != nil {
		return x.OperationStatusStreamResponse
	}
	return nil
}

type ContractStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider                 string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`                                                                                                // プロバイダ(情報提供元)
	EventNo                  int64                  `protobuf:"varint,2,opt,name=event_no,json=eventNo,proto3" json:"event_no,omitempty"`                                                                                  // イベント番号
	StreamOrderType          StreamOrderType        `protobuf:"varint,4,opt,name=stream_order_type,json=streamOrderType,proto3,enum=tachibanapb.StreamOrderType" json:"stream_order_type,omitempty"`                       // 通知種別
	OrderNumber              string                 `protobuf:"bytes,5,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`                                                                       // 注文番号
	ExecutionDate            *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=execution_date,json=executionDate,proto3" json:"execution_date,omitempty"`                                                                 // 営業日
	ParentOrderNumber        string                 `protobuf:"bytes,7,opt,name=parent_order_number,json=parentOrderNumber,proto3" json:"parent_order_number,omitempty"`                                                   // 親注文番号
	ParentOrder              bool                   `protobuf:"varint,8,opt,name=parent_order,json=parentOrder,proto3" json:"parent_order,omitempty"`                                                                      // 注文種別
	ProductType              ProductType            `protobuf:"varint,9,opt,name=product_type,json=productType,proto3,enum=tachibanapb.ProductType" json:"product_type,omitempty"`                                         // 商品種別
	IssueCode                string                 `protobuf:"bytes,10,opt,name=issue_code,json=issueCode,proto3" json:"issue_code,omitempty"`                                                                            // 銘柄コード
	Exchange                 Exchange               `protobuf:"varint,11,opt,name=exchange,proto3,enum=tachibanapb.Exchange" json:"exchange,omitempty"`                                                                    // 市場コード
	Side                     Side                   `protobuf:"varint,12,opt,name=side,proto3,enum=tachibanapb.Side" json:"side,omitempty"`                                                                                // 売買区分
	TradeType                TradeType              `protobuf:"varint,13,opt,name=trade_type,json=tradeType,proto3,enum=tachibanapb.TradeType" json:"trade_type,omitempty"`                                                // 取引区分
	ExecutionTiming          ExecutionTiming        `protobuf:"varint,14,opt,name=execution_timing,json=executionTiming,proto3,enum=tachibanapb.ExecutionTiming" json:"execution_timing,omitempty"`                        // 執行条件
	ExecutionType            ExecutionType          `protobuf:"varint,15,opt,name=execution_type,json=executionType,proto3,enum=tachibanapb.ExecutionType" json:"execution_type,omitempty"`                                // 注文値段区分
	Price                    float64                `protobuf:"fixed64,16,opt,name=price,proto3" json:"price,omitempty"`                                                                                                   // 注文値段
	Quantity                 float64                `protobuf:"fixed64,17,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                                                             // 注文数量
	CancelQuantity           float64                `protobuf:"fixed64,18,opt,name=cancel_quantity,json=cancelQuantity,proto3" json:"cancel_quantity,omitempty"`                                                           // 取消数量
	ExpireQuantity           float64                `protobuf:"fixed64,19,opt,name=expire_quantity,json=expireQuantity,proto3" json:"expire_quantity,omitempty"`                                                           // 失効数量
	ContractQuantity         float64                `protobuf:"fixed64,20,opt,name=contract_quantity,json=contractQuantity,proto3" json:"contract_quantity,omitempty"`                                                     // 約定済数量
	StreamOrderStatus        StreamOrderStatus      `protobuf:"varint,21,opt,name=stream_order_status,json=streamOrderStatus,proto3,enum=tachibanapb.StreamOrderStatus" json:"stream_order_status,omitempty"`              // 注文ステータス
	CarryOverType            CarryOverType          `protobuf:"varint,22,opt,name=carry_over_type,json=carryOverType,proto3,enum=tachibanapb.CarryOverType" json:"carry_over_type,omitempty"`                              // 繰越フラグ
	CancelOrderStatus        CancelOrderStatus      `protobuf:"varint,23,opt,name=cancel_order_status,json=cancelOrderStatus,proto3,enum=tachibanapb.CancelOrderStatus" json:"cancel_order_status,omitempty"`              // 訂正取消ステータス
	ContractStatus           ContractStatus         `protobuf:"varint,24,opt,name=contract_status,json=contractStatus,proto3,enum=tachibanapb.ContractStatus" json:"contract_status,omitempty"`                            // 約定ステータス
	ExpireDate               *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`                                                                         // 有効期限
	SecurityExpireReason     string                 `protobuf:"bytes,26,opt,name=security_expire_reason,json=securityExpireReason,proto3" json:"security_expire_reason,omitempty"`                                         // 失効理由コード
	SecurityContractPrice    float64                `protobuf:"fixed64,27,opt,name=security_contract_price,json=securityContractPrice,proto3" json:"security_contract_price,omitempty"`                                    // 約定値段
	SecurityContractQuantity float64                `protobuf:"fixed64,28,opt,name=security_contract_quantity,json=securityContractQuantity,proto3" json:"security_contract_quantity,omitempty"`                           // 約定数量
	SecurityError            string                 `protobuf:"bytes,29,opt,name=security_error,json=securityError,proto3" json:"security_error,omitempty"`                                                                // 取引所エラーコード
	NotifyDatetime           *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=notify_datetime,json=notifyDatetime,proto3" json:"notify_datetime,omitempty"`                                                             // 通知日時
	IssueName                string                 `protobuf:"bytes,31,opt,name=issue_name,json=issueName,proto3" json:"issue_name,omitempty"`                                                                            // 銘柄名称
	CorrectExecutionTiming   ExecutionTiming        `protobuf:"varint,32,opt,name=correct_execution_timing,json=correctExecutionTiming,proto3,enum=tachibanapb.ExecutionTiming" json:"correct_execution_timing,omitempty"` // 訂正執行条件
	CorrectContractQuantity  float64                `protobuf:"fixed64,33,opt,name=correct_contract_quantity,json=correctContractQuantity,proto3" json:"correct_contract_quantity,omitempty"`                              // 訂正執行数量
	CorrectExecutionType     ExecutionType          `protobuf:"varint,34,opt,name=correct_execution_type,json=correctExecutionType,proto3,enum=tachibanapb.ExecutionType" json:"correct_execution_type,omitempty"`         // 訂正注文値段区分
	CorrectPrice             float64                `protobuf:"fixed64,35,opt,name=correct_price,json=correctPrice,proto3" json:"correct_price,omitempty"`                                                                 // 訂正注文値段
	CorrectQuantity          float64                `protobuf:"fixed64,36,opt,name=correct_quantity,json=correctQuantity,proto3" json:"correct_quantity,omitempty"`                                                        // 訂正注文数量
	CorrectExpireDate        *timestamppb.Timestamp `protobuf:"bytes,37,opt,name=correct_expire_date,json=correctExpireDate,proto3" json:"correct_expire_date,omitempty"`                                                  // 訂正注文期限
	CorrectStopOrderType     StopOrderType          `protobuf:"varint,38,opt,name=correct_stop_order_type,json=correctStopOrderType,proto3,enum=tachibanapb.StopOrderType" json:"correct_stop_order_type,omitempty"`       // 訂正逆指値条件
	CorrectTriggerPrice      float64                `protobuf:"fixed64,39,opt,name=correct_trigger_price,json=correctTriggerPrice,proto3" json:"correct_trigger_price,omitempty"`                                          // 訂正逆指値段区分
	CorrectStopOrderPrice    float64                `protobuf:"fixed64,40,opt,name=correct_stop_order_price,json=correctStopOrderPrice,proto3" json:"correct_stop_order_price,omitempty"`                                  // 訂正逆指値段
}

func (x *ContractStreamResponse) Reset() {
	*x = ContractStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractStreamResponse) ProtoMessage() {}

func (x *ContractStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractStreamResponse.ProtoReflect.Descriptor instead.
func (*ContractStreamResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{34}
}

func (x *ContractStreamResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ContractStreamResponse) GetEventNo() int64 {
	if x != nil {
		return x.EventNo
	}
	return 0
}

func (x *ContractStreamResponse) GetStreamOrderType() StreamOrderType {
	if x != nil {
		return x.StreamOrderType
	}
	return StreamOrderType_STREAM_ORDER_TYPE_UNSPECIFIED
}

func (x *ContractStreamResponse) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

func (x *ContractStreamResponse) GetExecutionDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecutionDate
	}
	return nil
}

func (x *ContractStreamResponse) GetParentOrderNumber() string {
	if x != nil {
		return x.ParentOrderNumber
	}
	return ""
}

func (x *ContractStreamResponse) GetParentOrder() bool {
	if x != nil {
		return x.ParentOrder
	}
	return false
}

func (x *ContractStreamResponse) GetProductType() ProductType {
	if x != nil {
		return x.ProductType
	}
	return ProductType_PRODUCT_TYPE_UNSPECIFIED
}

func (x *ContractStreamResponse) GetIssueCode() string {
	if x != nil {
		return x.IssueCode
	}
	return ""
}

func (x *ContractStreamResponse) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *ContractStreamResponse) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_SIDE_UNSPECIFIED
}

func (x *ContractStreamResponse) GetTradeType() TradeType {
	if x != nil {
		return x.TradeType
	}
	return TradeType_TRADE_TYPE_UNSPECIFIED
}

func (x *ContractStreamResponse) GetExecutionTiming() ExecutionTiming {
	if x != nil {
		return x.ExecutionTiming
	}
	return ExecutionTiming_EXECUTION_TIMING_UNSPECIFIED
}

func (x *ContractStreamResponse) GetExecutionType() ExecutionType {
	if x != nil {
		return x.ExecutionType
	}
	return ExecutionType_EXECUTION_TYPE_UNSPECIFIED
}

func (x *ContractStreamResponse) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ContractStreamResponse) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ContractStreamResponse) GetCancelQuantity() float64 {
	if x != nil {
		return x.CancelQuantity
	}
	return 0
}

func (x *ContractStreamResponse) GetExpireQuantity() float64 {
	if x != nil {
		return x.ExpireQuantity
	}
	return 0
}

func (x *ContractStreamResponse) GetContractQuantity() float64 {
	if x != nil {
		return x.ContractQuantity
	}
	return 0
}

func (x *ContractStreamResponse) GetStreamOrderStatus() StreamOrderStatus {
	if x != nil {
		return x.StreamOrderStatus
	}
	return StreamOrderStatus_STREAM_ORDER_STATUS_UNSPECIFIED
}

func (x *ContractStreamResponse) GetCarryOverType() CarryOverType {
	if x != nil {
		return x.CarryOverType
	}
	return CarryOverType_CARRY_OVER_TYPE_UNSPECIFIED
}

func (x *ContractStreamResponse) GetCancelOrderStatus() CancelOrderStatus {
	if x != nil {
		return x.CancelOrderStatus
	}
	return CancelOrderStatus_CANCEL_ORDER_STATUS_UNSPECIFIED
}

func (x *ContractStreamResponse) GetContractStatus() ContractStatus {
	if x != nil {
		return x.ContractStatus
	}
	return ContractStatus_CONTRACT_STATUS_UNSPECIFIED
}

func (x *ContractStreamResponse) GetExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *ContractStreamResponse) GetSecurityExpireReason() string {
	if x != nil {
		return x.SecurityExpireReason
	}
	return ""
}

func (x *ContractStreamResponse) GetSecurityContractPrice() float64 {
	if x != nil {
		return x.SecurityContractPrice
	}
	return 0
}

func (x *ContractStreamResponse) GetSecurityContractQuantity() float64 {
	if x != nil {
		return x.SecurityContractQuantity
	}
	return 0
}

func (x *ContractStreamResponse) GetSecurityError() string {
	if x != nil {
		return x.SecurityError
	}
	return ""
}

func (x *ContractStreamResponse) GetNotifyDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.NotifyDatetime
	}
	return nil
}

func (x *ContractStreamResponse) GetIssueName() string {
	if x != nil {
		return x.IssueName
	}
	return ""
}

func (x *ContractStreamResponse) GetCorrectExecutionTiming() ExecutionTiming {
	if x != nil {
		return x.CorrectExecutionTiming
	}
	return ExecutionTiming_EXECUTION_TIMING_UNSPECIFIED
}

func (x *ContractStreamResponse) GetCorrectContractQuantity() float64 {
	if x != nil {
		return x.CorrectContractQuantity
	}
	return 0
}

func (x *ContractStreamResponse) GetCorrectExecutionType() ExecutionType {
	if x != nil {
		return x.CorrectExecutionType
	}
	return ExecutionType_EXECUTION_TYPE_UNSPECIFIED
}

func (x *ContractStreamResponse) GetCorrectPrice() float64 {
	if x != nil {
		return x.CorrectPrice
	}
	return 0
}

func (x *ContractStreamResponse) GetCorrectQuantity() float64 {
	if x != nil {
		return x.CorrectQuantity
	}
	return 0
}

func (x *ContractStreamResponse) GetCorrectExpireDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CorrectExpireDate
	}
	return nil
}

func (x *ContractStreamResponse) GetCorrectStopOrderType() StopOrderType {
	if x != nil {
		return x.CorrectStopOrderType
	}
	return StopOrderType_STOP_ORDER_TYPE_UNSPECIFIED
}

func (x *ContractStreamResponse) GetCorrectTriggerPrice() float64 {
	if x != nil {
		return x.CorrectTriggerPrice
	}
	return 0
}

func (x *ContractStreamResponse) GetCorrectStopOrderPrice() float64 {
	if x != nil {
		return x.CorrectStopOrderPrice
	}
	return 0
}

type NewsStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider      string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`                                   // プロバイダ(情報提供元)
	EventNo       int64                  `protobuf:"varint,2,opt,name=event_no,json=eventNo,proto3" json:"event_no,omitempty"`                     // イベント番号
	NewsId        string                 `protobuf:"bytes,4,opt,name=news_id,json=newsId,proto3" json:"news_id,omitempty"`                         // ニュースID
	NewsDatetime  *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=news_datetime,json=newsDatetime,proto3" json:"news_datetime,omitempty"`       // ニュース日時
	NumOfCategory int64                  `protobuf:"varint,6,opt,name=num_of_category,json=numOfCategory,proto3" json:"num_of_category,omitempty"` // ニュースカテゴリ数
	Categories    []string               `protobuf:"bytes,7,rep,name=categories,proto3" json:"categories,omitempty"`                               // ニュースカテゴリリスト
	NumOfGenre    int64                  `protobuf:"varint,8,opt,name=num_of_genre,json=numOfGenre,proto3" json:"num_of_genre,omitempty"`          // ニュースジャンル数
	Genres        []string               `protobuf:"bytes,9,rep,name=genres,proto3" json:"genres,omitempty"`                                       // ニュースジャンルリスト
	NumOfIssue    int64                  `protobuf:"varint,10,opt,name=num_of_issue,json=numOfIssue,proto3" json:"num_of_issue,omitempty"`         // 関連銘柄コードリスト
	Issues        []string               `protobuf:"bytes,11,rep,name=issues,proto3" json:"issues,omitempty"`                                      // 関連銘柄コードリスト
	Title         string                 `protobuf:"bytes,12,opt,name=title,proto3" json:"title,omitempty"`                                        // ニュースタイトル
	Content       string                 `protobuf:"bytes,13,opt,name=content,proto3" json:"content,omitempty"`                                    // ニュース本文
}

func (x *NewsStreamResponse) Reset() {
	*x = NewsStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewsStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewsStreamResponse) ProtoMessage() {}

func (x *NewsStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewsStreamResponse.ProtoReflect.Descriptor instead.
func (*NewsStreamResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{35}
}

func (x *NewsStreamResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *NewsStreamResponse) GetEventNo() int64 {
	if x != nil {
		return x.EventNo
	}
	return 0
}

func (x *NewsStreamResponse) GetNewsId() string {
	if x != nil {
		return x.NewsId
	}
	return ""
}

func (x *NewsStreamResponse) GetNewsDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.NewsDatetime
	}
	return nil
}

func (x *NewsStreamResponse) GetNumOfCategory() int64 {
	if x != nil {
		return x.NumOfCategory
	}
	return 0
}

func (x *NewsStreamResponse) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *NewsStreamResponse) GetNumOfGenre() int64 {
	if x != nil {
		return x.NumOfGenre
	}
	return 0
}

func (x *NewsStreamResponse) GetGenres() []string {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *NewsStreamResponse) GetNumOfIssue() int64 {
	if x != nil {
		return x.NumOfIssue
	}
	return 0
}

func (x *NewsStreamResponse) GetIssues() []string {
	if x != nil {
		return x.Issues
	}
	return nil
}

func (x *NewsStreamResponse) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *NewsStreamResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type SystemStatusStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider       string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`                                                                // プロバイダ(情報提供元)
	EventNo        int64                  `protobuf:"varint,2,opt,name=event_no,json=eventNo,proto3" json:"event_no,omitempty"`                                                  // イベント番号
	UpdateDatetime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_datetime,json=updateDatetime,proto3" json:"update_datetime,omitempty"`                              // 情報更新時間
	ApprovalLogin  ApprovalLogin          `protobuf:"varint,5,opt,name=approval_login,json=approvalLogin,proto3,enum=tachibanapb.ApprovalLogin" json:"approval_login,omitempty"` // ログイン許可区分
	SystemStatus   SystemStatus           `protobuf:"varint,6,opt,name=system_status,json=systemStatus,proto3,enum=tachibanapb.SystemStatus" json:"system_status,omitempty"`     // システムステータス
}

func (x *SystemStatusStreamResponse) Reset() {
	*x = SystemStatusStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemStatusStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemStatusStreamResponse) ProtoMessage() {}

func (x *SystemStatusStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemStatusStreamResponse.ProtoReflect.Descriptor instead.
func (*SystemStatusStreamResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{36}
}

func (x *SystemStatusStreamResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *SystemStatusStreamResponse) GetEventNo() int64 {
	if x != nil {
		return x.EventNo
	}
	return 0
}

func (x *SystemStatusStreamResponse) GetUpdateDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateDatetime
	}
	return nil
}

func (x *SystemStatusStreamResponse) GetApprovalLogin() ApprovalLogin {
	if x != nil {
		return x.ApprovalLogin
	}
	return ApprovalLogin_APPROVAL_LOGIN_UNSPECIFIED
}

func (x *SystemStatusStreamResponse) GetSystemStatus() SystemStatus {
	if x != nil {
		return x.SystemStatus
	}
	return SystemStatus_SYSTEM_STATUS_UNSPECIFIED
}

type OperationStatusStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider          string                 `protobuf:"bytes,1,opt,name=provider,proto3" json:"provider,omitempty"`                                            // プロバイダ(情報提供元)
	EventNo           int64                  `protobuf:"varint,2,opt,name=event_no,json=eventNo,proto3" json:"event_no,omitempty"`                              // イベント番号
	UpdateDatetime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_datetime,json=updateDatetime,proto3" json:"update_datetime,omitempty"`          // 情報更新時間
	Exchange          Exchange               `protobuf:"varint,5,opt,name=exchange,proto3,enum=tachibanapb.Exchange" json:"exchange,omitempty"`                 // 市場コード
	AssetCode         string                 `protobuf:"bytes,6,opt,name=asset_code,json=assetCode,proto3" json:"asset_code,omitempty"`                         // 原資産コード
	ProductType       string                 `protobuf:"bytes,7,opt,name=product_type,json=productType,proto3" json:"product_type,omitempty"`                   // 商品種別
	OperationCategory string                 `protobuf:"bytes,8,opt,name=operation_category,json=operationCategory,proto3" json:"operation_category,omitempty"` // 運用カテゴリー
	OperationUnit     string                 `protobuf:"bytes,9,opt,name=operation_unit,json=operationUnit,proto3" json:"operation_unit,omitempty"`             // 運用ユニット
	BusinessDayType   string                 `protobuf:"bytes,10,opt,name=business_day_type,json=businessDayType,proto3" json:"business_day_type,omitempty"`    // 営業日区分
	OperationStatus   string                 `protobuf:"bytes,11,opt,name=operation_status,json=operationStatus,proto3" json:"operation_status,omitempty"`      // 運用ステータス
}

func (x *OperationStatusStreamResponse) Reset() {
	*x = OperationStatusStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperationStatusStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationStatusStreamResponse) ProtoMessage() {}

func (x *OperationStatusStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationStatusStreamResponse.ProtoReflect.Descriptor instead.
func (*OperationStatusStreamResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{37}
}

func (x *OperationStatusStreamResponse) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *OperationStatusStreamResponse) GetEventNo() int64 {
	if x != nil {
		return x.EventNo
	}
	return 0
}

func (x *OperationStatusStreamResponse) GetUpdateDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateDatetime
	}
	return nil
}

func (x *OperationStatusStreamResponse) GetExchange() Exchange {
	if x != nil {
		return x.Exchange
	}
	return Exchange_EXCHANGE_UNSPECIFIED
}

func (x *OperationStatusStreamResponse) GetAssetCode() string {
	if x != nil {
		return x.AssetCode
	}
	return ""
}

func (x *OperationStatusStreamResponse) GetProductType() string {
	if x != nil {
		return x.ProductType
	}
	return ""
}

func (x *OperationStatusStreamResponse) GetOperationCategory() string {
	if x != nil {
		return x.OperationCategory
	}
	return ""
}

func (x *OperationStatusStreamResponse) GetOperationUnit() string {
	if x != nil {
		return x.OperationUnit
	}
	return ""
}

func (x *OperationStatusStreamResponse) GetBusinessDayType() string {
	if x != nil {
		return x.BusinessDayType
	}
	return ""
}

func (x *OperationStatusStreamResponse) GetOperationStatus() string {
	if x != nil {
		return x.OperationStatus
	}
	return ""
}

var File_tachibanapb_tachibana_proto protoreflect.FileDescriptor

var file_tachibanapb_tachibana_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2f, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x4e, 0x6f, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0xbc, 0x09, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6f, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x4f, 0x6d, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x13, 0x73, 0x61, 0x66, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x61, 0x66, 0x65,
	0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x72, 0x66, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x72, 0x66, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x17, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x69, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6d, 0x66, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d,
	0x6d, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x69,
	0x6e, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x46,
	0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x66, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x69, 0x73, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6e, 0x69, 0x73, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9e,
	0x07, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x54, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x47,
	0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x35, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x49, 0x73, 0x54,
	0x6f, 0x64, 0x61, 0x79, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x65, 0x78, 0x69, 0x74, 0x5f,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x65, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a,
	0x0e, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x65, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x87, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x95, 0x04, 0x0a, 0x10, 0x4e, 0x65,
	0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xa3, 0x01, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x0a, 0x0f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xef, 0x02, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x10, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a,
	0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x51, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x71, 0x75, 0x69, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xc2, 0x03, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41,
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x51, 0x0a, 0x14, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x71, 0x75, 0x69,
	0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x0a, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x22, 0xe1, 0x0d, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x29, 0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a,
	0x0f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x53, 0x74, 0x6f,
	0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a,
	0x19, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x73, 0x74,
	0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x65,
	0x78, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x65, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x12,
	0x70, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x63,
	0x61, 0x72, 0x72, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x72, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x63, 0x61, 0x72, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4e, 0x0a, 0x13, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x72, 0x72, 0x65,
	0x63, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x12,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x22, 0x95, 0x12, 0x0a, 0x13, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x35, 0x0a,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x41,
	0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x46, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x13, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x19, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x61, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x78, 0x12, 0x4b, 0x0a, 0x12, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x45, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x10, 0x65, 0x78, 0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x17, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x40,
	0x0a, 0x0e, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x2b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x48, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xba, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb8, 0x04,
	0x0a, 0x0c, 0x48, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x68, 0x6f,
	0x6c, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x70, 0x72,
	0x65, 0x6d, 0x69, 0x75, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46,
	0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6c, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x46, 0x65, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x65, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x22, 0x4e, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xbf, 0x0e, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x72,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x68,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x61, 0x6e, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x61, 0x6e, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x62, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x2f, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x54, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x52, 0x07, 0x74, 0x61, 0x78, 0x46, 0x72, 0x65,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x78, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x78, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x69,
	0x67, 0x68, 0x74, 0x44, 0x61, 0x79, 0x12, 0x3b, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x48, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x70, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x50, 0x0a, 0x16, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x15, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x32, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x32, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x10, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x65, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x73, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x72, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5e, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a,
	0x16, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x14, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xfe, 0x0b, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x14,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44,
	0x0a, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x1e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x1b, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x31, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x64, 0x65, 0x6c,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x74,
	0x69, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4b, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x54,
	0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6f, 0x66, 0x66,
	0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x6f, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x22, 0xae, 0x15, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x11,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64,
	0x61, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x64, 0x61, 0x79, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x6e,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67,
	0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68,
	0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x68, 0x69, 0x67, 0x68,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x68,
	0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c,
	0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x3b, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x62, 0x69, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69,
	0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a,
	0x0d, 0x65, 0x78, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x52, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69,
	0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3a, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x48, 0x69, 0x67, 0x68, 0x12, 0x38, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x77, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x61, 0x73, 0x6b, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2e, 0x0a,
	0x13, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x62, 0x69, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a,
	0x11, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x76,
	0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x73, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x31, 0x30, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x31, 0x30,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x31, 0x30, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31,
	0x30, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x39, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x39, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x39, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x39, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x38, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x38, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73,
	0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x38, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x38, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x37, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x37, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x37, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x37, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x36, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x36, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x36,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x36, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x35, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x35, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x35, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x34, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73,
	0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x34, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x6b,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x33, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x33, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x33, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x33, 0x12, 0x23, 0x0a,
	0x0d, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x32, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x32, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x31, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x31, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x61, 0x73, 0x6b, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x31, 0x18, 0x31, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x69,
	0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x31, 0x18, 0x32, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x32, 0x18, 0x33, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x32, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x32, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x33, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x33, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x33,
	0x18, 0x36, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x33, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x34, 0x18, 0x37, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x34, 0x18, 0x38, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x34, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x35, 0x18, 0x39, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x69,
	0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x35, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x35, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x35, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x36, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x36, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x36, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x36, 0x12, 0x23, 0x0a,
	0x0d, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x37, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x37, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x37,
	0x18, 0x3e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x37, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x38, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x38, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x38, 0x18, 0x40, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x62, 0x69, 0x64, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x38, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x39, 0x18, 0x41, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x62, 0x69,
	0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x39, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69,
	0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x39, 0x18, 0x42, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x39, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x69, 0x64,
	0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x31, 0x30, 0x18, 0x43, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x62, 0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x31, 0x30,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x31, 0x30, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x31,
	0x30, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x69, 0x64, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x45, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x62,
	0x69, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x76, 0x77, 0x61, 0x70, 0x18, 0x46, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76,
	0x77, 0x61, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x72, 0x70, 0x18, 0x47, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x70, 0x72, 0x70, 0x22, 0x14, 0x0a, 0x12, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x13,
	0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x52, 0x0c, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x73, 0x22, 0xb1, 0x08, 0x0a, 0x0b, 0x42, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x61, 0x79, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x06,
	0x64, 0x61, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64,
	0x61, 0x79, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79, 0x31, 0x12,
	0x37, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x64, 0x61, 0x79, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x70, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79, 0x32, 0x12, 0x37, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x64, 0x61, 0x79, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x44, 0x61, 0x79,
	0x33, 0x12, 0x30, 0x0a, 0x05, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x74, 0x6f,
	0x64, 0x61, 0x79, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x31,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x31, 0x12, 0x37, 0x0a, 0x09,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78,
	0x74, 0x44, 0x61, 0x79, 0x32, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61,
	0x79, 0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x33, 0x12, 0x37,
	0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e,
	0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x34, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x64, 0x61, 0x79, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x35,
	0x12, 0x37, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x36, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x36, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x64, 0x61, 0x79, 0x37, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61,
	0x79, 0x37, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x38, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x38, 0x12, 0x37, 0x0a, 0x09, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x39, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6e, 0x65, 0x78, 0x74,
	0x44, 0x61, 0x79, 0x39, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x64, 0x61, 0x79,
	0x31, 0x30, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x44, 0x61, 0x79, 0x31, 0x30, 0x12,
	0x3d, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x12, 0x54,
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x16, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x44, 0x61, 0x79, 0x12, 0x46, 0x0a, 0x11, 0x62, 0x6f, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x62, 0x6f, 0x6e,
	0x64, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x79, 0x22, 0x12, 0x0a, 0x10,
	0x54, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x92, 0x01, 0x0a, 0x11, 0x54, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x74, 0x69, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x09, 0x54, 0x69, 0x63, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x74, 0x69, 0x63, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x22, 0x7e, 0x0a, 0x0e, 0x54, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x64, 0x69, 0x67, 0x69, 0x74,
	0x73, 0x22, 0xae, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x52, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x73, 0x22, 0x5f, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x22, 0xd3, 0x05, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f,
	0x52, 0x07, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x16, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x14, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x4e, 0x65, 0x77, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x6e, 0x65, 0x77, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x1d, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1a, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x1d, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xdc, 0x10, 0x0a, 0x16, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x48, 0x0a, 0x11, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3b,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x69, 0x6e, 0x67, 0x52, 0x0f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x72,
	0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e,
	0x43, 0x61, 0x72, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x63,
	0x61, 0x72, 0x72, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x13,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a,
	0x1a, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x18, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x43, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x18, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63,
	0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x16, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x3a,
	0x0a, 0x19, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x17, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x16, 0x63, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x13,
	0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x37, 0x0a, 0x18, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x15, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x91, 0x03, 0x0a, 0x12, 0x4e, 0x65, 0x77,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x73, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x4f, 0x66,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x66, 0x5f, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x47, 0x65, 0x6e, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x9b, 0x02, 0x0a,
	0x1a, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x4e, 0x6f, 0x12, 0x43, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbd, 0x03, 0x0a, 0x1d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x4e, 0x6f, 0x12, 0x43, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x64, 0x61, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0xd8, 0x02, 0x0a, 0x07, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4e, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x45, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45,
	0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4e, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45,
	0x53, 0x53, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x09,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0a, 0x12, 0x16, 0x0a,
	0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x48, 0x4f,
	0x55, 0x52, 0x53, 0x10, 0x0b, 0x2a, 0xe2, 0x0a, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e,
	0x53, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x07, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x09, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x1e,
	0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x1f,
	0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d,
	0x41, 0x52, 0x59, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x4e, 0x54,
	0x52, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47,
	0x49, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10,
	0x12, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x13,
	0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10,
	0x14, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53,
	0x5f, 0x44, 0x41, 0x59, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x18, 0x12, 0x2d, 0x0a, 0x29,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x19, 0x12, 0x2f, 0x0a, 0x2b, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1a, 0x12, 0x1d, 0x0a, 0x19,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x26, 0x0a, 0x22, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x10, 0x1c, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x24, 0x0a, 0x20,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x1e, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54,
	0x49, 0x54, 0x55, 0x54, 0x45, 0x10, 0x21, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x22, 0x12, 0x23,
	0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f,
	0x4e, 0x10, 0x23, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x24, 0x12, 0x1c, 0x0a,
	0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x25, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x26, 0x2a, 0x77, 0x0a, 0x0b, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43,
	0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x49, 0x53,
	0x41, 0x10, 0x03, 0x2a, 0xa9, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45,
	0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x43, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x48, 0x4f, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a,
	0xc5, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20,
	0x0a, 0x1c, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x43, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x49, 0x53, 0x41, 0x10, 0x04, 0x2a, 0x96, 0x01, 0x0a, 0x08, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x54, 0x4f, 0x55, 0x53, 0x48,
	0x4f, 0x55, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4d, 0x45, 0x49, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x46, 0x55, 0x4b, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x41,
	0x54, 0x53, 0x55, 0x53, 0x48, 0x4f, 0x55, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x05,
	0x2a, 0x5e, 0x0a, 0x04, 0x53, 0x69, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x44, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x42, 0x55, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x04,
	0x2a, 0xc9, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41,
	0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x49, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4d,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x55, 0x4e, 0x41, 0x52, 0x49, 0x10, 0x05, 0x2a, 0xb9, 0x01, 0x0a,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x52,
	0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x52, 0x41, 0x44, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44,
	0x41, 0x52, 0x44, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41,
	0x52, 0x44, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41,
	0x44, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x05, 0x2a, 0x7f, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x02,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x43, 0x4f, 0x10, 0x03, 0x2a, 0x88, 0x02, 0x0a, 0x10, 0x45, 0x78,
	0x69, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x55,
	0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x41, 0x53, 0x43, 0x10, 0x04, 0x12, 0x22, 0x0a,
	0x1e, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x10,
	0x05, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x41,
	0x53, 0x43, 0x10, 0x06, 0x2a, 0xe6, 0x01, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e,
	0x71, 0x75, 0x69, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x51, 0x55, 0x49, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x51, 0x55, 0x49,
	0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x51, 0x55, 0x49, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x51,
	0x55, 0x49, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x51, 0x55,
	0x49, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x44, 0x49, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x51, 0x55, 0x49, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x05, 0x2a, 0xf5, 0x01,
	0x0a, 0x0c, 0x45, 0x78, 0x69, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x1a, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x45,
	0x58, 0x49, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x36, 0x4d,
	0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4d, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12,
	0x26, 0x0a, 0x22, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47,
	0x49, 0x4e, 0x5f, 0x36, 0x4d, 0x10, 0x04, 0x12, 0x2c, 0x0a, 0x28, 0x45, 0x58, 0x49, 0x54, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x47, 0x4f, 0x54, 0x49,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x05, 0x2a, 0xb4, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x55, 0x53, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x45, 0x43, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x45, 0x52,
	0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x05, 0x2a, 0x9d, 0x01, 0x0a,
	0x0b, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52,
	0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x49,
	0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x55, 0x41, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x54,
	0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x55,
	0x41, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x10,
	0x50, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x55, 0x53, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x10, 0x02,
	0x2a, 0xdc, 0x04, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43,
	0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12, 0x1e, 0x0a,
	0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x09, 0x12, 0x15, 0x0a,
	0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41,
	0x52, 0x54, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x10, 0x10, 0x12,
	0x1a, 0x0a, 0x16, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x52, 0x49, 0x47, 0x47, 0x45, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x49, 0x47,
	0x47, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x12, 0x12, 0x21, 0x0a, 0x1d,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x52,
	0x52, 0x59, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x13, 0x12,
	0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x14, 0x2a,
	0xa4, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x10, 0x04, 0x2a, 0x83, 0x01, 0x0a, 0x0d, 0x43, 0x61, 0x72, 0x72, 0x79,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x52, 0x52,
	0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x52,
	0x52, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x4f, 0x44,
	0x41, 0x59, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x52, 0x52, 0x59, 0x5f, 0x4f, 0x56,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x59, 0x10, 0x02, 0x12,
	0x1b, 0x0a, 0x17, 0x43, 0x41, 0x52, 0x52, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x03, 0x2a, 0xa2, 0x01, 0x0a,
	0x11, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e,
	0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x03, 0x2a, 0xf7, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x4d, 0x45, 0x45, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x43, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x4e,
	0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10,
	0x03, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x32, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x43, 0x45, 0x4e, 0x54,
	0x45, 0x52, 0x33, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c,
	0x5f, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x52, 0x49, 0x43, 0x48, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x50, 0x48, 0x4f, 0x4e,
	0x45, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x49,
	0x50, 0x41, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x48, 0x41,
	0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x0a, 0x2a, 0xfb, 0x0b, 0x0a, 0x11,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x49, 0x53,
	0x53, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x4b, 0x41, 0x4e, 0x41, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x41, 0x4c, 0x50, 0x48, 0x41, 0x42, 0x45, 0x54, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x41, 0x58,
	0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x07, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x08, 0x12, 0x20,
	0x0a, 0x1c, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x45, 0x58, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x09,
	0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x0a, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0b, 0x12, 0x2c,
	0x0a, 0x28, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x24, 0x0a, 0x20,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x0d, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x4e, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49,
	0x54, 0x10, 0x0f, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x10, 0x12, 0x2e,
	0x0a, 0x2a, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x11, 0x12, 0x2d,
	0x0a, 0x29, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x12, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x13, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53, 0x45,
	0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x14, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x32, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x16, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x10, 0x17, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x41, 0x52,
	0x47, 0x45, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x18, 0x12, 0x2a, 0x0a, 0x26, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x45, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x19, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x44,
	0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x41, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x1a, 0x12,
	0x29, 0x0a, 0x25, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x4f, 0x52, 0x47, 0x41, 0x4e, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x1c, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x1d, 0x12,
	0x28, 0x0a, 0x24, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x1e, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x49,
	0x4f, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x1f, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x20,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x59,
	0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x21, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53,
	0x4f, 0x52, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x22,
	0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x23, 0x12, 0x27, 0x0a, 0x23, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45,
	0x10, 0x24, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x25, 0x2a, 0x4d, 0x0a, 0x07, 0x54, 0x61, 0x78,
	0x46, 0x72, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x58, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x41, 0x58, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x55, 0x4e, 0x5f, 0x55, 0x53,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x58, 0x5f, 0x46, 0x52, 0x45, 0x45,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02, 0x2a, 0x9a, 0x02, 0x0a, 0x0b, 0x45, 0x78, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x5f, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x5f, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x58, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x45, 0x58, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x10, 0x04, 0x12, 0x24, 0x0a, 0x20, 0x45, 0x58, 0x5f, 0x52, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x44,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x12, 0x27, 0x0a, 0x23,
	0x45, 0x58, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x45, 0x58, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x50, 0x4c,
	0x49, 0x54, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x44,
	0x44, 0x4c, 0x45, 0x10, 0x07, 0x2a, 0xfc, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45,
	0x57, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x03,
	0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x53, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x10, 0x05,
	0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f,
	0x42, 0x55, 0x59, 0x10, 0x07, 0x12, 0x1d, 0x0a, 0x19, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x10, 0x08, 0x2a, 0x92, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x4f, 0x50,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x4f, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x43, 0x52, 0x45, 0x41, 0x53,
	0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x10, 0x02, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0xa7,
	0x0c, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2c, 0x0a, 0x28,
	0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x02, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x03, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x4d,
	0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x30,
	0x0a, 0x2c, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53,
	0x59, 0x4d, 0x42, 0x4f, 0x4c, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x06,
	0x12, 0x35, 0x0a, 0x31, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x07, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x08, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x09, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x10, 0x0b, 0x12, 0x32,
	0x0a, 0x2e, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c,
	0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x10, 0x0c, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x0e, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x10, 0x0f, 0x12, 0x3f, 0x0a, 0x3b, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x10, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x31, 0x10, 0x11, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x32,
	0x10, 0x12, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x13, 0x12, 0x2f, 0x0a, 0x2b, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x14, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10,
	0x15, 0x12, 0x32, 0x0a, 0x2e, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x10, 0x16, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45,
	0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x17, 0x12, 0x35, 0x0a, 0x31, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x49, 0x43,
	0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x18, 0x12, 0x33,
	0x0a, 0x2f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x10, 0x19, 0x12, 0x31, 0x0a, 0x2d, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x10, 0x1a, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4f, 0x46, 0x46, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x10, 0x1b, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x54, 0x49, 0x4d, 0x45, 0x10, 0x1c, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x1d, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x1e, 0x2a, 0x7e, 0x0a, 0x0a, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x47,
	0x4f, 0x54, 0x49, 0x41, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x93, 0x02, 0x0a, 0x0d, 0x54, 0x69, 0x63,
	0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x49,
	0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x31, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x43, 0x4b, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x32, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x33, 0x10, 0x03, 0x12,
	0x19, 0x0a, 0x15, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4e, 0x44, 0x31, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49,
	0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f,
	0x4e, 0x44, 0x32, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52,
	0x4f, 0x55, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4b, 0x32, 0x32, 0x35, 0x10, 0x06,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4b, 0x32, 0x32, 0x35, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x10, 0x07,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4b, 0x32, 0x32, 0x35, 0x5f, 0x4f, 0x50, 0x10, 0x08, 0x2a, 0x90,
	0x15, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x53, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10,
	0x02, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x12, 0x29, 0x0a,
	0x25, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x04, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x50, 0x52, 0x45, 0x56, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x10, 0x05,
	0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x44, 0x41, 0x59,
	0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x27,
	0x0a, 0x23, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x09, 0x12, 0x27, 0x0a, 0x23, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x4f, 0x57, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c,
	0x4f, 0x57, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x0c, 0x12,
	0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0x0d, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10,
	0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f,
	0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x10, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x11, 0x12, 0x21, 0x0a, 0x1d,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x12, 0x12,
	0x24, 0x0a, 0x20, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x10, 0x13, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x45, 0x58, 0x5f,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x14, 0x12, 0x2a, 0x0a, 0x26,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x15, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x53, 0x54, 0x4f, 0x50, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x16, 0x12, 0x20, 0x0a, 0x1c, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x17, 0x12, 0x26, 0x0a,
	0x22, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x10, 0x18, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b,
	0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x10, 0x19, 0x12, 0x2b, 0x0a, 0x27, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55,
	0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x10, 0x1a, 0x12,
	0x29, 0x0a, 0x25, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x31, 0x30,
	0x10, 0x1c, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x31, 0x30, 0x10, 0x1d, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41,
	0x53, 0x4b, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x39, 0x10, 0x1e, 0x12, 0x22,
	0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x39,
	0x10, 0x1f, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x51, 0x55,
	0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x38, 0x10, 0x20, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x38, 0x10, 0x21, 0x12, 0x25, 0x0a,
	0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x37, 0x10, 0x22, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x37, 0x10, 0x23, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x41, 0x53, 0x4b, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x36, 0x10, 0x24, 0x12,
	0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x36, 0x10, 0x25, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x51,
	0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x35, 0x10, 0x26, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x35, 0x10, 0x27, 0x12, 0x25,
	0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49,
	0x54, 0x59, 0x34, 0x10, 0x28, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x34, 0x10, 0x29, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x33, 0x10, 0x2a,
	0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x33, 0x10, 0x2b, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f,
	0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x32, 0x10, 0x2c, 0x12, 0x22, 0x0a, 0x1e, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x10, 0x2d, 0x12,
	0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f,
	0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x31, 0x10, 0x2e, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x41, 0x53,
	0x4b, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x31, 0x10, 0x2f, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x31, 0x10,
	0x30, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x31, 0x10, 0x31, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44,
	0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x32, 0x10, 0x32, 0x12, 0x22, 0x0a, 0x1e,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x10, 0x33,
	0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e,
	0x54, 0x49, 0x54, 0x59, 0x33, 0x10, 0x34, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42,
	0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x33, 0x10, 0x35, 0x12, 0x25, 0x0a, 0x21, 0x4d,
	0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55,
	0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x34,
	0x10, 0x36, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x34, 0x10, 0x37, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x35, 0x10, 0x38, 0x12, 0x22, 0x0a,
	0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x35, 0x10,
	0x39, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41,
	0x4e, 0x54, 0x49, 0x54, 0x59, 0x36, 0x10, 0x3a, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b,
	0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f,
	0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x36, 0x10, 0x3b, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c,
	0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x37, 0x10, 0x3c, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52,
	0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x37, 0x10, 0x3d, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42,
	0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x38, 0x10, 0x3e, 0x12, 0x22,
	0x0a, 0x1e, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x38,
	0x10, 0x3f, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55,
	0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x39, 0x10, 0x40, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x41, 0x52,
	0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e,
	0x5f, 0x42, 0x49, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x39, 0x10, 0x41, 0x12, 0x26, 0x0a,
	0x22, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54,
	0x59, 0x31, 0x30, 0x10, 0x42, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x42, 0x49, 0x44,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x31, 0x30, 0x10, 0x43, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x41,
	0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d,
	0x4e, 0x5f, 0x42, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x55,
	0x4e, 0x44, 0x45, 0x52, 0x10, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x56, 0x57,
	0x41, 0x50, 0x10, 0x45, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x50, 0x52, 0x50, 0x10,
	0x46, 0x2a, 0xd9, 0x02, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x48, 0x41, 0x4e,
	0x47, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x49, 0x53, 0x45,
	0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x29,
	0x0a, 0x25, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5a,
	0x41, 0x52, 0x41, 0x42, 0x41, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50,
	0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x5f,
	0x41, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x1e, 0x0a,
	0x1a, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x09, 0x2a, 0xfb, 0x02,
	0x0a, 0x13, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10, 0x03, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x44, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x45, 0x46, 0x4f,
	0x52, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21,
	0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x06, 0x12, 0x34, 0x0a, 0x30, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x49, 0x4e, 0x55, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f,
	0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x44,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x2a, 0x9b, 0x01, 0x0a, 0x10,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x22, 0x0a, 0x1e, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f,
	0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x50, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x50, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x06, 0x44, 0x61, 0x79,
	0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x41, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x41, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x54, 0x4f, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x44, 0x41, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f,
	0x44, 0x41, 0x59, 0x10, 0x02, 0x2a, 0xce, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4e, 0x45, 0x57, 0x53, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x07, 0x2a, 0xab, 0x01, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x55, 0x4e, 0x5f, 0x41, 0x50,
	0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41,
	0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x50, 0x50, 0x52,
	0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x2a, 0x7c, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x50, 0x45, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45,
	0x10, 0x03, 0x2a, 0x9e, 0x05, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49,
	0x56, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04,
	0x12, 0x2b, 0x0a, 0x27, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f,
	0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x2a, 0x0a,
	0x26, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x08, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x10, 0x0c, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d,
	0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49,
	0x52, 0x45, 0x10, 0x0d, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x49, 0x4e, 0x55, 0x45, 0x10, 0x0e, 0x12, 0x25, 0x0a, 0x21, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x59, 0x4f, 0x56, 0x45,
	0x52, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45,
	0x44, 0x10, 0x11, 0x2a, 0x75, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x44,
	0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x89, 0x02, 0x0a, 0x11, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57,
	0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x52,
	0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x59, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x06, 0x2a, 0x9f, 0x03, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x1f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43,
	0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x26, 0x0a, 0x22, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x10, 0x08, 0x12,
	0x20, 0x0a, 0x1c, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x45, 0x44, 0x10,
	0x09, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x0a, 0x32, 0xfc, 0x06, 0x0a, 0x10, 0x54, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x08, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x27, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x44, 0x61, 0x79, 0x12, 0x1f, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x62, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x54, 0x69, 0x63, 0x6b, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x1d, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x62, 0x2e, 0x54, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x54, 0x69, 0x63, 0x6b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1a, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tachibanapb_tachibana_proto_rawDescOnce sync.Once
	file_tachibanapb_tachibana_proto_rawDescData = file_tachibanapb_tachibana_proto_rawDesc
)

func file_tachibanapb_tachibana_proto_rawDescGZIP() []byte {
	file_tachibanapb_tachibana_proto_rawDescOnce.Do(func() {
		file_tachibanapb_tachibana_proto_rawDescData = protoimpl.X.CompressGZIP(file_tachibanapb_tachibana_proto_rawDescData)
	})
	return file_tachibanapb_tachibana_proto_rawDescData
}

var file_tachibanapb_tachibana_proto_enumTypes = make([]protoimpl.EnumInfo, 42)
var file_tachibanapb_tachibana_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_tachibanapb_tachibana_proto_goTypes = []interface{}{
	(ErrorNo)(0),                          // 0: tachibanapb.ErrorNo
	(MessageType)(0),                      // 1: tachibanapb.MessageType
	(AccountType)(0),                      // 2: tachibanapb.AccountType
	(SpecificAccountType)(0),              // 3: tachibanapb.SpecificAccountType
	(DeliveryAccountType)(0),              // 4: tachibanapb.DeliveryAccountType
	(Exchange)(0),                         // 5: tachibanapb.Exchange
	(Side)(0),                             // 6: tachibanapb.Side
	(ExecutionTiming)(0),                  // 7: tachibanapb.ExecutionTiming
	(TradeType)(0),                        // 8: tachibanapb.TradeType
	(StopOrderType)(0),                    // 9: tachibanapb.StopOrderType
	(ExitPositionType)(0),                 // 10: tachibanapb.ExitPositionType
	(OrderInquiryStatus)(0),               // 11: tachibanapb.OrderInquiryStatus
	(ExitTermType)(0),                     // 12: tachibanapb.ExitTermType
	(ExecutionType)(0),                    // 13: tachibanapb.ExecutionType
	(TriggerType)(0),                      // 14: tachibanapb.TriggerType
	(PartContractType)(0),                 // 15: tachibanapb.PartContractType
	(OrderStatus)(0),                      // 16: tachibanapb.OrderStatus
	(ContractStatus)(0),                   // 17: tachibanapb.ContractStatus
	(CarryOverType)(0),                    // 18: tachibanapb.CarryOverType
	(CorrectCancelType)(0),                // 19: tachibanapb.CorrectCancelType
	(Channel)(0),                          // 20: tachibanapb.Channel
	(StockMasterColumn)(0),                // 21: tachibanapb.StockMasterColumn
	(TaxFree)(0),                          // 22: tachibanapb.TaxFree
	(ExRightType)(0),                      // 23: tachibanapb.ExRightType
	(ListingType)(0),                      // 24: tachibanapb.ListingType
	(StopTradingType)(0),                  // 25: tachibanapb.StopTradingType
	(SettlementType)(0),                   // 26: tachibanapb.SettlementType
	(StockExchangeMasterColumn)(0),        // 27: tachibanapb.StockExchangeMasterColumn
	(MarginType)(0),                       // 28: tachibanapb.MarginType
	(TickGroupType)(0),                    // 29: tachibanapb.TickGroupType
	(MarketPriceColumn)(0),                // 30: tachibanapb.MarketPriceColumn
	(ChangePriceType)(0),                  // 31: tachibanapb.ChangePriceType
	(IndicationPriceType)(0),              // 32: tachibanapb.IndicationPriceType
	(CurrentPriceType)(0),                 // 33: tachibanapb.CurrentPriceType
	(DayKey)(0),                           // 34: tachibanapb.DayKey
	(EventType)(0),                        // 35: tachibanapb.EventType
	(ApprovalLogin)(0),                    // 36: tachibanapb.ApprovalLogin
	(SystemStatus)(0),                     // 37: tachibanapb.SystemStatus
	(StreamOrderType)(0),                  // 38: tachibanapb.StreamOrderType
	(ProductType)(0),                      // 39: tachibanapb.ProductType
	(StreamOrderStatus)(0),                // 40: tachibanapb.StreamOrderStatus
	(CancelOrderStatus)(0),                // 41: tachibanapb.CancelOrderStatus
	(*CommonResponse)(nil),                // 42: tachibanapb.CommonResponse
	(*LoginRequest)(nil),                  // 43: tachibanapb.LoginRequest
	(*LoginResponse)(nil),                 // 44: tachibanapb.LoginResponse
	(*NewOrderRequest)(nil),               // 45: tachibanapb.NewOrderRequest
	(*ExitPosition)(nil),                  // 46: tachibanapb.ExitPosition
	(*NewOrderResponse)(nil),              // 47: tachibanapb.NewOrderResponse
	(*CancelOrderRequest)(nil),            // 48: tachibanapb.CancelOrderRequest
	(*CancelOrderResponse)(nil),           // 49: tachibanapb.CancelOrderResponse
	(*OrderListRequest)(nil),              // 50: tachibanapb.OrderListRequest
	(*OrderListResponse)(nil),             // 51: tachibanapb.OrderListResponse
	(*Order)(nil),                         // 52: tachibanapb.Order
	(*OrderDetailRequest)(nil),            // 53: tachibanapb.OrderDetailRequest
	(*OrderDetailResponse)(nil),           // 54: tachibanapb.OrderDetailResponse
	(*Contract)(nil),                      // 55: tachibanapb.Contract
	(*HoldPosition)(nil),                  // 56: tachibanapb.HoldPosition
	(*StockMasterRequest)(nil),            // 57: tachibanapb.StockMasterRequest
	(*StockMasterResponse)(nil),           // 58: tachibanapb.StockMasterResponse
	(*StockMaster)(nil),                   // 59: tachibanapb.StockMaster
	(*StockExchangeMasterRequest)(nil),    // 60: tachibanapb.StockExchangeMasterRequest
	(*StockExchangeMasterResponse)(nil),   // 61: tachibanapb.StockExchangeMasterResponse
	(*StockExchangeMaster)(nil),           // 62: tachibanapb.StockExchangeMaster
	(*MarketPriceRequest)(nil),            // 63: tachibanapb.MarketPriceRequest
	(*MarketPriceResponse)(nil),           // 64: tachibanapb.MarketPriceResponse
	(*MarketPrice)(nil),                   // 65: tachibanapb.MarketPrice
	(*BusinessDayRequest)(nil),            // 66: tachibanapb.BusinessDayRequest
	(*BusinessDayResponse)(nil),           // 67: tachibanapb.BusinessDayResponse
	(*BusinessDay)(nil),                   // 68: tachibanapb.BusinessDay
	(*TickGroupRequest)(nil),              // 69: tachibanapb.TickGroupRequest
	(*TickGroupResponse)(nil),             // 70: tachibanapb.TickGroupResponse
	(*TickGroup)(nil),                     // 71: tachibanapb.TickGroup
	(*TickGroupPrice)(nil),                // 72: tachibanapb.TickGroupPrice
	(*StreamRequest)(nil),                 // 73: tachibanapb.StreamRequest
	(*StreamIssue)(nil),                   // 74: tachibanapb.StreamIssue
	(*StreamResponse)(nil),                // 75: tachibanapb.StreamResponse
	(*ContractStreamResponse)(nil),        // 76: tachibanapb.ContractStreamResponse
	(*NewsStreamResponse)(nil),            // 77: tachibanapb.NewsStreamResponse
	(*SystemStatusStreamResponse)(nil),    // 78: tachibanapb.SystemStatusStreamResponse
	(*OperationStatusStreamResponse)(nil), // 79: tachibanapb.OperationStatusStreamResponse
	(*timestamppb.Timestamp)(nil),         // 80: google.protobuf.Timestamp
}
var file_tachibanapb_tachibana_proto_depIdxs = []int32{
	80,  // 0: tachibanapb.CommonResponse.send_date:type_name -> google.protobuf.Timestamp
	80,  // 1: tachibanapb.CommonResponse.receive_date:type_name -> google.protobuf.Timestamp
	0,   // 2: tachibanapb.CommonResponse.error_no:type_name -> tachibanapb.ErrorNo
	1,   // 3: tachibanapb.CommonResponse.message_type:type_name -> tachibanapb.MessageType
	42,  // 4: tachibanapb.LoginResponse.common_response:type_name -> tachibanapb.CommonResponse
	2,   // 5: tachibanapb.LoginResponse.account_type:type_name -> tachibanapb.AccountType
	80,  // 6: tachibanapb.LoginResponse.last_login_datetime:type_name -> google.protobuf.Timestamp
	3,   // 7: tachibanapb.LoginResponse.stock_specific_account:type_name -> tachibanapb.SpecificAccountType
	3,   // 8: tachibanapb.LoginResponse.margin_specific_account:type_name -> tachibanapb.SpecificAccountType
	3,   // 9: tachibanapb.LoginResponse.investment_specific_account:type_name -> tachibanapb.SpecificAccountType
	2,   // 10: tachibanapb.NewOrderRequest.account_type:type_name -> tachibanapb.AccountType
	4,   // 11: tachibanapb.NewOrderRequest.delivery_account_type:type_name -> tachibanapb.DeliveryAccountType
	5,   // 12: tachibanapb.NewOrderRequest.exchange:type_name -> tachibanapb.Exchange
	6,   // 13: tachibanapb.NewOrderRequest.side:type_name -> tachibanapb.Side
	7,   // 14: tachibanapb.NewOrderRequest.execution_timing:type_name -> tachibanapb.ExecutionTiming
	8,   // 15: tachibanapb.NewOrderRequest.trade_type:type_name -> tachibanapb.TradeType
	80,  // 16: tachibanapb.NewOrderRequest.expire_date:type_name -> google.protobuf.Timestamp
	9,   // 17: tachibanapb.NewOrderRequest.stop_order_type:type_name -> tachibanapb.StopOrderType
	10,  // 18: tachibanapb.NewOrderRequest.exit_position_type:type_name -> tachibanapb.ExitPositionType
	46,  // 19: tachibanapb.NewOrderRequest.exit_positions:type_name -> tachibanapb.ExitPosition
	42,  // 20: tachibanapb.NewOrderResponse.common_response:type_name -> tachibanapb.CommonResponse
	80,  // 21: tachibanapb.NewOrderResponse.execution_date:type_name -> google.protobuf.Timestamp
	80,  // 22: tachibanapb.NewOrderResponse.order_datetime:type_name -> google.protobuf.Timestamp
	80,  // 23: tachibanapb.CancelOrderRequest.execution_date:type_name -> google.protobuf.Timestamp
	42,  // 24: tachibanapb.CancelOrderResponse.common_response:type_name -> tachibanapb.CommonResponse
	80,  // 25: tachibanapb.CancelOrderResponse.execution_date:type_name -> google.protobuf.Timestamp
	80,  // 26: tachibanapb.CancelOrderResponse.order_datetime:type_name -> google.protobuf.Timestamp
	80,  // 27: tachibanapb.OrderListRequest.execution_date:type_name -> google.protobuf.Timestamp
	11,  // 28: tachibanapb.OrderListRequest.order_inquiry_status:type_name -> tachibanapb.OrderInquiryStatus
	42,  // 29: tachibanapb.OrderListResponse.common_response:type_name -> tachibanapb.CommonResponse
	80,  // 30: tachibanapb.OrderListResponse.execution_date:type_name -> google.protobuf.Timestamp
	11,  // 31: tachibanapb.OrderListResponse.order_inquiry_status:type_name -> tachibanapb.OrderInquiryStatus
	52,  // 32: tachibanapb.OrderListResponse.orders:type_name -> tachibanapb.Order
	5,   // 33: tachibanapb.Order.exchange:type_name -> tachibanapb.Exchange
	2,   // 34: tachibanapb.Order.account_type:type_name -> tachibanapb.AccountType
	8,   // 35: tachibanapb.Order.trade_type:type_name -> tachibanapb.TradeType
	12,  // 36: tachibanapb.Order.exit_term_type:type_name -> tachibanapb.ExitTermType
	6,   // 37: tachibanapb.Order.side:type_name -> tachibanapb.Side
	7,   // 38: tachibanapb.Order.execution_timing:type_name -> tachibanapb.ExecutionTiming
	13,  // 39: tachibanapb.Order.execution_type:type_name -> tachibanapb.ExecutionType
	9,   // 40: tachibanapb.Order.stop_order_type:type_name -> tachibanapb.StopOrderType
	13,  // 41: tachibanapb.Order.stop_order_execution_type:type_name -> tachibanapb.ExecutionType
	14,  // 42: tachibanapb.Order.trigger_type:type_name -> tachibanapb.TriggerType
	10,  // 43: tachibanapb.Order.exit_position_type:type_name -> tachibanapb.ExitPositionType
	15,  // 44: tachibanapb.Order.part_contract_type:type_name -> tachibanapb.PartContractType
	80,  // 45: tachibanapb.Order.execution_date:type_name -> google.protobuf.Timestamp
	16,  // 46: tachibanapb.Order.order_status:type_name -> tachibanapb.OrderStatus
	17,  // 47: tachibanapb.Order.contract_status:type_name -> tachibanapb.ContractStatus
	80,  // 48: tachibanapb.Order.order_datetime:type_name -> google.protobuf.Timestamp
	80,  // 49: tachibanapb.Order.expire_date:type_name -> google.protobuf.Timestamp
	18,  // 50: tachibanapb.Order.carry_over_type:type_name -> tachibanapb.CarryOverType
	19,  // 51: tachibanapb.Order.correct_cancel_type:type_name -> tachibanapb.CorrectCancelType
	80,  // 52: tachibanapb.OrderDetailRequest.execution_date:type_name -> google.protobuf.Timestamp
	42,  // 53: tachibanapb.OrderDetailResponse.common_response:type_name -> tachibanapb.CommonResponse
	80,  // 54: tachibanapb.OrderDetailResponse.execution_date:type_name -> google.protobuf.Timestamp
	5,   // 55: tachibanapb.OrderDetailResponse.exchange:type_name -> tachibanapb.Exchange
	6,   // 56: tachibanapb.OrderDetailResponse.side:type_name -> tachibanapb.Side
	8,   // 57: tachibanapb.OrderDetailResponse.trade_type:type_name -> tachibanapb.TradeType
	12,  // 58: tachibanapb.OrderDetailResponse.exit_term_type:type_name -> tachibanapb.ExitTermType
	7,   // 59: tachibanapb.OrderDetailResponse.execution_timing:type_name -> tachibanapb.ExecutionTiming
	13,  // 60: tachibanapb.OrderDetailResponse.execution_type:type_name -> tachibanapb.ExecutionType
	16,  // 61: tachibanapb.OrderDetailResponse.order_status:type_name -> tachibanapb.OrderStatus
	80,  // 62: tachibanapb.OrderDetailResponse.order_datetime:type_name -> google.protobuf.Timestamp
	80,  // 63: tachibanapb.OrderDetailResponse.expire_date:type_name -> google.protobuf.Timestamp
	20,  // 64: tachibanapb.OrderDetailResponse.channel:type_name -> tachibanapb.Channel
	2,   // 65: tachibanapb.OrderDetailResponse.stock_account_type:type_name -> tachibanapb.AccountType
	2,   // 66: tachibanapb.OrderDetailResponse.margin_account_type:type_name -> tachibanapb.AccountType
	9,   // 67: tachibanapb.OrderDetailResponse.stop_order_type:type_name -> tachibanapb.StopOrderType
	13,  // 68: tachibanapb.OrderDetailResponse.stop_order_execution_type:type_name -> tachibanapb.ExecutionType
	14,  // 69: tachibanapb.OrderDetailResponse.trigger_type:type_name -> tachibanapb.TriggerType
	80,  // 70: tachibanapb.OrderDetailResponse.trigger_datetime:type_name -> google.protobuf.Timestamp
	80,  // 71: tachibanapb.OrderDetailResponse.delivery_date:type_name -> google.protobuf.Timestamp
	15,  // 72: tachibanapb.OrderDetailResponse.part_contract_type:type_name -> tachibanapb.PartContractType
	10,  // 73: tachibanapb.OrderDetailResponse.exit_position_type:type_name -> tachibanapb.ExitPositionType
	80,  // 74: tachibanapb.OrderDetailResponse.exchange_order_datetime:type_name -> google.protobuf.Timestamp
	55,  // 75: tachibanapb.OrderDetailResponse.contracts:type_name -> tachibanapb.Contract
	56,  // 76: tachibanapb.OrderDetailResponse.hold_positions:type_name -> tachibanapb.HoldPosition
	80,  // 77: tachibanapb.Contract.datetime:type_name -> google.protobuf.Timestamp
	80,  // 78: tachibanapb.HoldPosition.contract_date:type_name -> google.protobuf.Timestamp
	21,  // 79: tachibanapb.StockMasterRequest.columns:type_name -> tachibanapb.StockMasterColumn
	42,  // 80: tachibanapb.StockMasterResponse.common_response:type_name -> tachibanapb.CommonResponse
	59,  // 81: tachibanapb.StockMasterResponse.stock_masters:type_name -> tachibanapb.StockMaster
	22,  // 82: tachibanapb.StockMaster.tax_free:type_name -> tachibanapb.TaxFree
	23,  // 83: tachibanapb.StockMaster.ex_right_type:type_name -> tachibanapb.ExRightType
	80,  // 84: tachibanapb.StockMaster.last_right_day:type_name -> google.protobuf.Timestamp
	24,  // 85: tachibanapb.StockMaster.listing_type:type_name -> tachibanapb.ListingType
	80,  // 86: tachibanapb.StockMaster.release_trading_date:type_name -> google.protobuf.Timestamp
	80,  // 87: tachibanapb.StockMaster.trading_date:type_name -> google.protobuf.Timestamp
	25,  // 88: tachibanapb.StockMaster.stop_trading_type:type_name -> tachibanapb.StopTradingType
	80,  // 89: tachibanapb.StockMaster.start_publication_date:type_name -> google.protobuf.Timestamp
	80,  // 90: tachibanapb.StockMaster.last_publication_date:type_name -> google.protobuf.Timestamp
	26,  // 91: tachibanapb.StockMaster.settlement_type:type_name -> tachibanapb.SettlementType
	80,  // 92: tachibanapb.StockMaster.settlement_date:type_name -> google.protobuf.Timestamp
	80,  // 93: tachibanapb.StockMaster.listing_date:type_name -> google.protobuf.Timestamp
	5,   // 94: tachibanapb.StockMaster.primary_exchange:type_name -> tachibanapb.Exchange
	80,  // 95: tachibanapb.StockMaster.create_datetime:type_name -> google.protobuf.Timestamp
	80,  // 96: tachibanapb.StockMaster.update_datetime:type_name -> google.protobuf.Timestamp
	27,  // 97: tachibanapb.StockExchangeMasterRequest.columns:type_name -> tachibanapb.StockExchangeMasterColumn
	42,  // 98: tachibanapb.StockExchangeMasterResponse.common_response:type_name -> tachibanapb.CommonResponse
	62,  // 99: tachibanapb.StockExchangeMasterResponse.stock_exchange_masters:type_name -> tachibanapb.StockExchangeMaster
	5,   // 100: tachibanapb.StockExchangeMaster.exchange:type_name -> tachibanapb.Exchange
	5,   // 101: tachibanapb.StockExchangeMaster.limit_price_exchange:type_name -> tachibanapb.Exchange
	28,  // 102: tachibanapb.StockExchangeMaster.margin_type:type_name -> tachibanapb.MarginType
	80,  // 103: tachibanapb.StockExchangeMaster.listing_date:type_name -> google.protobuf.Timestamp
	80,  // 104: tachibanapb.StockExchangeMaster.limit_price_date:type_name -> google.protobuf.Timestamp
	5,   // 105: tachibanapb.StockExchangeMaster.calculate_limit_price_exchange:type_name -> tachibanapb.Exchange
	80,  // 106: tachibanapb.StockExchangeMaster.delisting_date:type_name -> google.protobuf.Timestamp
	29,  // 107: tachibanapb.StockExchangeMaster.tick_group_type:type_name -> tachibanapb.TickGroupType
	29,  // 108: tachibanapb.StockExchangeMaster.next_tick_group_type:type_name -> tachibanapb.TickGroupType
	80,  // 109: tachibanapb.StockExchangeMaster.create_datetime:type_name -> google.protobuf.Timestamp
	80,  // 110: tachibanapb.StockExchangeMaster.update_datetime:type_name -> google.protobuf.Timestamp
	30,  // 111: tachibanapb.MarketPriceRequest.columns:type_name -> tachibanapb.MarketPriceColumn
	42,  // 112: tachibanapb.MarketPriceResponse.common_response:type_name -> tachibanapb.CommonResponse
	65,  // 113: tachibanapb.MarketPriceResponse.market_prices:type_name -> tachibanapb.MarketPrice
	80,  // 114: tachibanapb.MarketPrice.current_price_time:type_name -> google.protobuf.Timestamp
	31,  // 115: tachibanapb.MarketPrice.change_price_type:type_name -> tachibanapb.ChangePriceType
	80,  // 116: tachibanapb.MarketPrice.open_price_time:type_name -> google.protobuf.Timestamp
	80,  // 117: tachibanapb.MarketPrice.high_price_time:type_name -> google.protobuf.Timestamp
	80,  // 118: tachibanapb.MarketPrice.low_price_time:type_name -> google.protobuf.Timestamp
	32,  // 119: tachibanapb.MarketPrice.ask_sign:type_name -> tachibanapb.IndicationPriceType
	32,  // 120: tachibanapb.MarketPrice.bid_sign:type_name -> tachibanapb.IndicationPriceType
	33,  // 121: tachibanapb.MarketPrice.stop_high:type_name -> tachibanapb.CurrentPriceType
	33,  // 122: tachibanapb.MarketPrice.stop_low:type_name -> tachibanapb.CurrentPriceType
	42,  // 123: tachibanapb.BusinessDayResponse.common_response:type_name -> tachibanapb.CommonResponse
	68,  // 124: tachibanapb.BusinessDayResponse.business_days:type_name -> tachibanapb.BusinessDay
	34,  // 125: tachibanapb.BusinessDay.day_key:type_name -> tachibanapb.DayKey
	80,  // 126: tachibanapb.BusinessDay.prev_day1:type_name -> google.protobuf.Timestamp
	80,  // 127: tachibanapb.BusinessDay.prev_day2:type_name -> google.protobuf.Timestamp
	80,  // 128: tachibanapb.BusinessDay.prev_day3:type_name -> google.protobuf.Timestamp
	80,  // 129: tachibanapb.BusinessDay.today:type_name -> google.protobuf.Timestamp
	80,  // 130: tachibanapb.BusinessDay.next_day1:type_name -> google.protobuf.Timestamp
	80,  // 131: tachibanapb.BusinessDay.next_day2:type_name -> google.protobuf.Timestamp
	80,  // 132: tachibanapb.BusinessDay.next_day3:type_name -> google.protobuf.Timestamp
	80,  // 133: tachibanapb.BusinessDay.next_day4:type_name -> google.protobuf.Timestamp
	80,  // 134: tachibanapb.BusinessDay.next_day5:type_name -> google.protobuf.Timestamp
	80,  // 135: tachibanapb.BusinessDay.next_day6:type_name -> google.protobuf.Timestamp
	80,  // 136: tachibanapb.BusinessDay.next_day7:type_name -> google.protobuf.Timestamp
	80,  // 137: tachibanapb.BusinessDay.next_day8:type_name -> google.protobuf.Timestamp
	80,  // 138: tachibanapb.BusinessDay.next_day9:type_name -> google.protobuf.Timestamp
	80,  // 139: tachibanapb.BusinessDay.next_day10:type_name -> google.protobuf.Timestamp
	80,  // 140: tachibanapb.BusinessDay.delivery_day:type_name -> google.protobuf.Timestamp
	80,  // 141: tachibanapb.BusinessDay.provisional_delivery_day:type_name -> google.protobuf.Timestamp
	80,  // 142: tachibanapb.BusinessDay.bond_delivery_day:type_name -> google.protobuf.Timestamp
	42,  // 143: tachibanapb.TickGroupResponse.common_response:type_name -> tachibanapb.CommonResponse
	71,  // 144: tachibanapb.TickGroupResponse.tick_groups:type_name -> tachibanapb.TickGroup
	29,  // 145: tachibanapb.TickGroup.tick_group_type:type_name -> tachibanapb.TickGroupType
	80,  // 146: tachibanapb.TickGroup.start_date:type_name -> google.protobuf.Timestamp
	72,  // 147: tachibanapb.TickGroup.tick_group_list:type_name -> tachibanapb.TickGroupPrice
	80,  // 148: tachibanapb.TickGroup.create_date:type_name -> google.protobuf.Timestamp
	80,  // 149: tachibanapb.TickGroup.update_date:type_name -> google.protobuf.Timestamp
	35,  // 150: tachibanapb.StreamRequest.event_types:type_name -> tachibanapb.EventType
	74,  // 151: tachibanapb.StreamRequest.stream_issues:type_name -> tachibanapb.StreamIssue
	5,   // 152: tachibanapb.StreamIssue.exchange:type_name -> tachibanapb.Exchange
	35,  // 153: tachibanapb.StreamResponse.event_type:type_name -> tachibanapb.EventType
	80,  // 154: tachibanapb.StreamResponse.stream_date_time:type_name -> google.protobuf.Timestamp
	0,   // 155: tachibanapb.StreamResponse.error_no:type_name -> tachibanapb.ErrorNo
	76,  // 156: tachibanapb.StreamResponse.contract_stream_response:type_name -> tachibanapb.ContractStreamResponse
	77,  // 157: tachibanapb.StreamResponse.news_stream_response:type_name -> tachibanapb.NewsStreamResponse
	78,  // 158: tachibanapb.StreamResponse.system_status_stream_response:type_name -> tachibanapb.SystemStatusStreamResponse
	79,  // 159: tachibanapb.StreamResponse.operation_status_stream_response:type_name -> tachibanapb.OperationStatusStreamResponse
	38,  // 160: tachibanapb.ContractStreamResponse.stream_order_type:type_name -> tachibanapb.StreamOrderType
	80,  // 161: tachibanapb.ContractStreamResponse.execution_date:type_name -> google.protobuf.Timestamp
	39,  // 162: tachibanapb.ContractStreamResponse.product_type:type_name -> tachibanapb.ProductType
	5,   // 163: tachibanapb.ContractStreamResponse.exchange:type_name -> tachibanapb.Exchange
	6,   // 164: tachibanapb.ContractStreamResponse.side:type_name -> tachibanapb.Side
	8,   // 165: tachibanapb.ContractStreamResponse.trade_type:type_name -> tachibanapb.TradeType
	7,   // 166: tachibanapb.ContractStreamResponse.execution_timing:type_name -> tachibanapb.ExecutionTiming
	13,  // 167: tachibanapb.ContractStreamResponse.execution_type:type_name -> tachibanapb.ExecutionType
	40,  // 168: tachibanapb.ContractStreamResponse.stream_order_status:type_name -> tachibanapb.StreamOrderStatus
	18,  // 169: tachibanapb.ContractStreamResponse.carry_over_type:type_name -> tachibanapb.CarryOverType
	41,  // 170: tachibanapb.ContractStreamResponse.cancel_order_status:type_name -> tachibanapb.CancelOrderStatus
	17,  // 171: tachibanapb.ContractStreamResponse.contract_status:type_name -> tachibanapb.ContractStatus
	80,  // 172: tachibanapb.ContractStreamResponse.expire_date:type_name -> google.protobuf.Timestamp
	80,  // 173: tachibanapb.ContractStreamResponse.notify_datetime:type_name -> google.protobuf.Timestamp
	7,   // 174: tachibanapb.ContractStreamResponse.correct_execution_timing:type_name -> tachibanapb.ExecutionTiming
	13,  // 175: tachibanapb.ContractStreamResponse.correct_execution_type:type_name -> tachibanapb.ExecutionType
	80,  // 176: tachibanapb.ContractStreamResponse.correct_expire_date:type_name -> google.protobuf.Timestamp
	9,   // 177: tachibanapb.ContractStreamResponse.correct_stop_order_type:type_name -> tachibanapb.StopOrderType
	80,  // 178: tachibanapb.NewsStreamResponse.news_datetime:type_name -> google.protobuf.Timestamp
	80,  // 179: tachibanapb.SystemStatusStreamResponse.update_datetime:type_name -> google.protobuf.Timestamp
	36,  // 180: tachibanapb.SystemStatusStreamResponse.approval_login:type_name -> tachibanapb.ApprovalLogin
	37,  // 181: tachibanapb.SystemStatusStreamResponse.system_status:type_name -> tachibanapb.SystemStatus
	80,  // 182: tachibanapb.OperationStatusStreamResponse.update_datetime:type_name -> google.protobuf.Timestamp
	5,   // 183: tachibanapb.OperationStatusStreamResponse.exchange:type_name -> tachibanapb.Exchange
	43,  // 184: tachibanapb.TachibanaService.Login:input_type -> tachibanapb.LoginRequest
	45,  // 185: tachibanapb.TachibanaService.NewOrder:input_type -> tachibanapb.NewOrderRequest
	48,  // 186: tachibanapb.TachibanaService.CancelOrder:input_type -> tachibanapb.CancelOrderRequest
	50,  // 187: tachibanapb.TachibanaService.OrderList:input_type -> tachibanapb.OrderListRequest
	53,  // 188: tachibanapb.TachibanaService.OrderDetail:input_type -> tachibanapb.OrderDetailRequest
	57,  // 189: tachibanapb.TachibanaService.StockMaster:input_type -> tachibanapb.StockMasterRequest
	60,  // 190: tachibanapb.TachibanaService.StockExchangeMaster:input_type -> tachibanapb.StockExchangeMasterRequest
	63,  // 191: tachibanapb.TachibanaService.MarketPrice:input_type -> tachibanapb.MarketPriceRequest
	66,  // 192: tachibanapb.TachibanaService.BusinessDay:input_type -> tachibanapb.BusinessDayRequest
	69,  // 193: tachibanapb.TachibanaService.TickGroup:input_type -> tachibanapb.TickGroupRequest
	73,  // 194: tachibanapb.TachibanaService.Stream:input_type -> tachibanapb.StreamRequest
	44,  // 195: tachibanapb.TachibanaService.Login:output_type -> tachibanapb.LoginResponse
	47,  // 196: tachibanapb.TachibanaService.NewOrder:output_type -> tachibanapb.NewOrderResponse
	49,  // 197: tachibanapb.TachibanaService.CancelOrder:output_type -> tachibanapb.CancelOrderResponse
	51,  // 198: tachibanapb.TachibanaService.OrderList:output_type -> tachibanapb.OrderListResponse
	54,  // 199: tachibanapb.TachibanaService.OrderDetail:output_type -> tachibanapb.OrderDetailResponse
	58,  // 200: tachibanapb.TachibanaService.StockMaster:output_type -> tachibanapb.StockMasterResponse
	61,  // 201: tachibanapb.TachibanaService.StockExchangeMaster:output_type -> tachibanapb.StockExchangeMasterResponse
	64,  // 202: tachibanapb.TachibanaService.MarketPrice:output_type -> tachibanapb.MarketPriceResponse
	67,  // 203: tachibanapb.TachibanaService.BusinessDay:output_type -> tachibanapb.BusinessDayResponse
	70,  // 204: tachibanapb.TachibanaService.TickGroup:output_type -> tachibanapb.TickGroupResponse
	75,  // 205: tachibanapb.TachibanaService.Stream:output_type -> tachibanapb.StreamResponse
	195, // [195:206] is the sub-list for method output_type
	184, // [184:195] is the sub-list for method input_type
	184, // [184:184] is the sub-list for extension type_name
	184, // [184:184] is the sub-list for extension extendee
	0,   // [0:184] is the sub-list for field type_name
}

func init() { file_tachibanapb_tachibana_proto_init() }
func file_tachibanapb_tachibana_proto_init() {
	if File_tachibanapb_tachibana_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tachibanapb_tachibana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExitPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HoldPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockMasterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockMasterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockMaster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockExchangeMasterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockExchangeMasterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockExchangeMaster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BusinessDay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickGroupPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamIssue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewsStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemStatusStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperationStatusStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tachibanapb_tachibana_proto_rawDesc,
			NumEnums:      42,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tachibanapb_tachibana_proto_goTypes,
		DependencyIndexes: file_tachibanapb_tachibana_proto_depIdxs,
		EnumInfos:         file_tachibanapb_tachibana_proto_enumTypes,
		MessageInfos:      file_tachibanapb_tachibana_proto_msgTypes,
	}.Build()
	File_tachibanapb_tachibana_proto = out.File
	file_tachibanapb_tachibana_proto_rawDesc = nil
	file_tachibanapb_tachibana_proto_goTypes = nil
	file_tachibanapb_tachibana_proto_depIdxs = nil
}

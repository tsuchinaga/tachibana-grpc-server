// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: tachibanapb/tachibana.proto

package tachibanapb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorNo int32

const (
	ErrorNo_ERROR_NO_UNSPECIFIED       ErrorNo = 0  // 未指定
	ErrorNo_ERROR_NO_NO_PROBLEM        ErrorNo = 1  // 問題なし
	ErrorNo_ERROR_NO_NO_DATA           ErrorNo = 2  // データなし
	ErrorNo_ERROR_NO_SESSION_INACTIVE  ErrorNo = 3  // 無効なセッション
	ErrorNo_ERROR_NO_PROGRESSED_NUMBER ErrorNo = 4  // 処理済みの送信通番
	ErrorNo_ERROR_NO_EXCEED_LIMIT_TIME ErrorNo = 5  // 送信日時からみたタイムアウト
	ErrorNo_ERROR_NO_SERVICE_OFFLINE   ErrorNo = 6  // サービス停止中
	ErrorNo_ERROR_NO_BAD_REQUEST       ErrorNo = 7  // 引数エラー
	ErrorNo_ERROR_NO_DATABASE_ACCESS   ErrorNo = 8  // データベースへのアクセスエラー
	ErrorNo_ERROR_NO_SERVER_ACCESS     ErrorNo = 9  // サーバへのアクセスエラー
	ErrorNo_ERROR_NO_SYSTEM_OFFLINE    ErrorNo = 10 // システム停止中
	ErrorNo_ERROR_NO_OFF_HOURS         ErrorNo = 11 // 情報提供時間外
)

// Enum value maps for ErrorNo.
var (
	ErrorNo_name = map[int32]string{
		0:  "ERROR_NO_UNSPECIFIED",
		1:  "ERROR_NO_NO_PROBLEM",
		2:  "ERROR_NO_NO_DATA",
		3:  "ERROR_NO_SESSION_INACTIVE",
		4:  "ERROR_NO_PROGRESSED_NUMBER",
		5:  "ERROR_NO_EXCEED_LIMIT_TIME",
		6:  "ERROR_NO_SERVICE_OFFLINE",
		7:  "ERROR_NO_BAD_REQUEST",
		8:  "ERROR_NO_DATABASE_ACCESS",
		9:  "ERROR_NO_SERVER_ACCESS",
		10: "ERROR_NO_SYSTEM_OFFLINE",
		11: "ERROR_NO_OFF_HOURS",
	}
	ErrorNo_value = map[string]int32{
		"ERROR_NO_UNSPECIFIED":       0,
		"ERROR_NO_NO_PROBLEM":        1,
		"ERROR_NO_NO_DATA":           2,
		"ERROR_NO_SESSION_INACTIVE":  3,
		"ERROR_NO_PROGRESSED_NUMBER": 4,
		"ERROR_NO_EXCEED_LIMIT_TIME": 5,
		"ERROR_NO_SERVICE_OFFLINE":   6,
		"ERROR_NO_BAD_REQUEST":       7,
		"ERROR_NO_DATABASE_ACCESS":   8,
		"ERROR_NO_SERVER_ACCESS":     9,
		"ERROR_NO_SYSTEM_OFFLINE":    10,
		"ERROR_NO_OFF_HOURS":         11,
	}
)

func (x ErrorNo) Enum() *ErrorNo {
	p := new(ErrorNo)
	*p = x
	return p
}

func (x ErrorNo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorNo) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[0].Descriptor()
}

func (ErrorNo) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[0]
}

func (x ErrorNo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorNo.Descriptor instead.
func (ErrorNo) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{0}
}

type MessageType int32

const (
	MessageType_MESSAGE_TYPE_UNSPECIFIED                    MessageType = 0  // 未指定
	MessageType_MESSAGE_TYPE_LOGIN_REQUEST                  MessageType = 1  // ログインリクエスト
	MessageType_MESSAGE_TYPE_LOGIN_RESPONSE                 MessageType = 2  // ログインレスポンス
	MessageType_MESSAGE_TYPE_LOGOUT_REQUEST                 MessageType = 3  // ログアウトリクエスト
	MessageType_MESSAGE_TYPE_LOGOUT_RESPONSE                MessageType = 4  // ログアウトレスポンス
	MessageType_MESSAGE_TYPE_NEW_ORDER                      MessageType = 5  // 新規注文
	MessageType_MESSAGE_TYPE_CORRECT_ORDER                  MessageType = 6  // 訂正注文
	MessageType_MESSAGE_TYPE_CANCEL_ORDER                   MessageType = 7  // 取消注文
	MessageType_MESSAGE_TYPE_STOCK_POSITION_LIST            MessageType = 8  // 現物保有銘柄一覧
	MessageType_MESSAGE_TYPE_MARGIN_POSITION_LIST           MessageType = 9  // 信用建玉一覧
	MessageType_MESSAGE_TYPE_STOCK_WALLET                   MessageType = 10 // 買余力
	MessageType_MESSAGE_TYPE_MARGIN_WALLET                  MessageType = 11 // 建余力&本日維持率
	MessageType_MESSAGE_TYPE_STOCK_SELLABLE                 MessageType = 12 // 売却可能数量
	MessageType_MESSAGE_TYPE_ORDER_LIST                     MessageType = 13 // 注文一覧
	MessageType_MESSAGE_TYPE_ORDER_DETAIL                   MessageType = 14 // 注文約定一覧(詳細)
	MessageType_MESSAGE_TYPE_SUMMARY                        MessageType = 15 // 可能額サマリー
	MessageType_MESSAGE_TYPE_SUMMARY_RECORD                 MessageType = 16 // 可能額推移
	MessageType_MESSAGE_TYPE_STOCK_ENTRY_DETAIL             MessageType = 17 // 現物株式買付可能額詳細
	MessageType_MESSAGE_TYPE_MARGIN_ENTRY_DETAIL            MessageType = 18 // 信用新規建て可能額詳細
	MessageType_MESSAGE_TYPE_DEPOSIT_RATE                   MessageType = 19 // リアル保証金率
	MessageType_MESSAGE_TYPE_EVENT_DOWNLOAD                 MessageType = 20 // マスタ情報ダウンロード
	MessageType_MESSAGE_TYPE_EVENT_SYSTEM_STATUS            MessageType = 21 // システムステータス
	MessageType_MESSAGE_TYPE_BUSINESS_DAY                   MessageType = 22 // 日付情報
	MessageType_MESSAGE_TYPE_TICK_GROUP                     MessageType = 23 // 呼値
	MessageType_MESSAGE_TYPE_EVENT_OPERATION_STATUS         MessageType = 24 // 運用ステータス別状態
	MessageType_MESSAGE_TYPE_EVENT_STOCK_OPERATION_STATUS   MessageType = 25 // 運用ステータス(株式)
	MessageType_MESSAGE_TYPE_EVENT_PRODUCT_OPERATION_STATUS MessageType = 26 // 運用運用ステータス(派生)
	MessageType_MESSAGE_TYPE_STOCK_MASTER                   MessageType = 27 // 株式銘柄マスタ
	MessageType_MESSAGE_TYPE_STOCK_EXCHANGE_MASTER          MessageType = 28 // 株式銘柄市場マスタ
	MessageType_MESSAGE_TYPE_EVENT_STOCK_REGULATION         MessageType = 29 // 株式銘柄別・市場別規制
	MessageType_MESSAGE_TYPE_EVENT_FUTURE_MASTER            MessageType = 30 // 先物銘柄マスタ
	MessageType_MESSAGE_TYPE_EVENT_OPTION_MASTER            MessageType = 31 // オプション銘柄マスタ
	MessageType_MESSAGE_TYPE_EVENT_EXCHANGE_REGULATION      MessageType = 32 // 派生銘柄別・市場別規制
	MessageType_MESSAGE_TYPE_EVENT_SUBSTITUTE               MessageType = 33 // 代用掛目
	MessageType_MESSAGE_TYPE_EVENT_DEPOSIT_MASTER           MessageType = 34 // 保証金マスタ
	MessageType_MESSAGE_TYPE_EVENT_ERROR_REASON             MessageType = 35 // 取引所エラー等理由コード
	MessageType_MESSAGE_TYPE_EVENT_DOWNLOAD_COMPLETE        MessageType = 36 // 初期ダウンロード終了通知
	MessageType_MESSAGE_TYPE_MASTER_DATA                    MessageType = 37 // マスタ情報
	MessageType_MESSAGE_TYPE_MARKET_PRICE                   MessageType = 38 // 時価関連情報
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0:  "MESSAGE_TYPE_UNSPECIFIED",
		1:  "MESSAGE_TYPE_LOGIN_REQUEST",
		2:  "MESSAGE_TYPE_LOGIN_RESPONSE",
		3:  "MESSAGE_TYPE_LOGOUT_REQUEST",
		4:  "MESSAGE_TYPE_LOGOUT_RESPONSE",
		5:  "MESSAGE_TYPE_NEW_ORDER",
		6:  "MESSAGE_TYPE_CORRECT_ORDER",
		7:  "MESSAGE_TYPE_CANCEL_ORDER",
		8:  "MESSAGE_TYPE_STOCK_POSITION_LIST",
		9:  "MESSAGE_TYPE_MARGIN_POSITION_LIST",
		10: "MESSAGE_TYPE_STOCK_WALLET",
		11: "MESSAGE_TYPE_MARGIN_WALLET",
		12: "MESSAGE_TYPE_STOCK_SELLABLE",
		13: "MESSAGE_TYPE_ORDER_LIST",
		14: "MESSAGE_TYPE_ORDER_DETAIL",
		15: "MESSAGE_TYPE_SUMMARY",
		16: "MESSAGE_TYPE_SUMMARY_RECORD",
		17: "MESSAGE_TYPE_STOCK_ENTRY_DETAIL",
		18: "MESSAGE_TYPE_MARGIN_ENTRY_DETAIL",
		19: "MESSAGE_TYPE_DEPOSIT_RATE",
		20: "MESSAGE_TYPE_EVENT_DOWNLOAD",
		21: "MESSAGE_TYPE_EVENT_SYSTEM_STATUS",
		22: "MESSAGE_TYPE_BUSINESS_DAY",
		23: "MESSAGE_TYPE_TICK_GROUP",
		24: "MESSAGE_TYPE_EVENT_OPERATION_STATUS",
		25: "MESSAGE_TYPE_EVENT_STOCK_OPERATION_STATUS",
		26: "MESSAGE_TYPE_EVENT_PRODUCT_OPERATION_STATUS",
		27: "MESSAGE_TYPE_STOCK_MASTER",
		28: "MESSAGE_TYPE_STOCK_EXCHANGE_MASTER",
		29: "MESSAGE_TYPE_EVENT_STOCK_REGULATION",
		30: "MESSAGE_TYPE_EVENT_FUTURE_MASTER",
		31: "MESSAGE_TYPE_EVENT_OPTION_MASTER",
		32: "MESSAGE_TYPE_EVENT_EXCHANGE_REGULATION",
		33: "MESSAGE_TYPE_EVENT_SUBSTITUTE",
		34: "MESSAGE_TYPE_EVENT_DEPOSIT_MASTER",
		35: "MESSAGE_TYPE_EVENT_ERROR_REASON",
		36: "MESSAGE_TYPE_EVENT_DOWNLOAD_COMPLETE",
		37: "MESSAGE_TYPE_MASTER_DATA",
		38: "MESSAGE_TYPE_MARKET_PRICE",
	}
	MessageType_value = map[string]int32{
		"MESSAGE_TYPE_UNSPECIFIED":                    0,
		"MESSAGE_TYPE_LOGIN_REQUEST":                  1,
		"MESSAGE_TYPE_LOGIN_RESPONSE":                 2,
		"MESSAGE_TYPE_LOGOUT_REQUEST":                 3,
		"MESSAGE_TYPE_LOGOUT_RESPONSE":                4,
		"MESSAGE_TYPE_NEW_ORDER":                      5,
		"MESSAGE_TYPE_CORRECT_ORDER":                  6,
		"MESSAGE_TYPE_CANCEL_ORDER":                   7,
		"MESSAGE_TYPE_STOCK_POSITION_LIST":            8,
		"MESSAGE_TYPE_MARGIN_POSITION_LIST":           9,
		"MESSAGE_TYPE_STOCK_WALLET":                   10,
		"MESSAGE_TYPE_MARGIN_WALLET":                  11,
		"MESSAGE_TYPE_STOCK_SELLABLE":                 12,
		"MESSAGE_TYPE_ORDER_LIST":                     13,
		"MESSAGE_TYPE_ORDER_DETAIL":                   14,
		"MESSAGE_TYPE_SUMMARY":                        15,
		"MESSAGE_TYPE_SUMMARY_RECORD":                 16,
		"MESSAGE_TYPE_STOCK_ENTRY_DETAIL":             17,
		"MESSAGE_TYPE_MARGIN_ENTRY_DETAIL":            18,
		"MESSAGE_TYPE_DEPOSIT_RATE":                   19,
		"MESSAGE_TYPE_EVENT_DOWNLOAD":                 20,
		"MESSAGE_TYPE_EVENT_SYSTEM_STATUS":            21,
		"MESSAGE_TYPE_BUSINESS_DAY":                   22,
		"MESSAGE_TYPE_TICK_GROUP":                     23,
		"MESSAGE_TYPE_EVENT_OPERATION_STATUS":         24,
		"MESSAGE_TYPE_EVENT_STOCK_OPERATION_STATUS":   25,
		"MESSAGE_TYPE_EVENT_PRODUCT_OPERATION_STATUS": 26,
		"MESSAGE_TYPE_STOCK_MASTER":                   27,
		"MESSAGE_TYPE_STOCK_EXCHANGE_MASTER":          28,
		"MESSAGE_TYPE_EVENT_STOCK_REGULATION":         29,
		"MESSAGE_TYPE_EVENT_FUTURE_MASTER":            30,
		"MESSAGE_TYPE_EVENT_OPTION_MASTER":            31,
		"MESSAGE_TYPE_EVENT_EXCHANGE_REGULATION":      32,
		"MESSAGE_TYPE_EVENT_SUBSTITUTE":               33,
		"MESSAGE_TYPE_EVENT_DEPOSIT_MASTER":           34,
		"MESSAGE_TYPE_EVENT_ERROR_REASON":             35,
		"MESSAGE_TYPE_EVENT_DOWNLOAD_COMPLETE":        36,
		"MESSAGE_TYPE_MASTER_DATA":                    37,
		"MESSAGE_TYPE_MARKET_PRICE":                   38,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

func (x MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[1].Descriptor()
}

func (MessageType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[1]
}

func (x MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageType.Descriptor instead.
func (MessageType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{1}
}

type AccountType int32

const (
	AccountType_ACCOUNT_TYPE_UNSPECIFIED AccountType = 0 // 未指定
	AccountType_ACCOUNT_TYPE_SPECIFIC    AccountType = 1 // 特定
	AccountType_ACCOUNT_TYPE_GENERAL     AccountType = 2 // 一般
	AccountType_ACCOUNT_TYPE_NISA        AccountType = 3 // NISA
)

// Enum value maps for AccountType.
var (
	AccountType_name = map[int32]string{
		0: "ACCOUNT_TYPE_UNSPECIFIED",
		1: "ACCOUNT_TYPE_SPECIFIC",
		2: "ACCOUNT_TYPE_GENERAL",
		3: "ACCOUNT_TYPE_NISA",
	}
	AccountType_value = map[string]int32{
		"ACCOUNT_TYPE_UNSPECIFIED": 0,
		"ACCOUNT_TYPE_SPECIFIC":    1,
		"ACCOUNT_TYPE_GENERAL":     2,
		"ACCOUNT_TYPE_NISA":        3,
	}
)

func (x AccountType) Enum() *AccountType {
	p := new(AccountType)
	*p = x
	return p
}

func (x AccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[2].Descriptor()
}

func (AccountType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[2]
}

func (x AccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AccountType.Descriptor instead.
func (AccountType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{2}
}

type SpecificAccountType int32

const (
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED SpecificAccountType = 0 // 未指定
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_GENERAL     SpecificAccountType = 1 // 一般
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_NOTHING     SpecificAccountType = 2 // 特定源泉徴収なし
	SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_WITHHOLDING SpecificAccountType = 3 // 特定源泉徴収あり
)

// Enum value maps for SpecificAccountType.
var (
	SpecificAccountType_name = map[int32]string{
		0: "SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED",
		1: "SPECIFIC_ACCOUNT_TYPE_GENERAL",
		2: "SPECIFIC_ACCOUNT_TYPE_NOTHING",
		3: "SPECIFIC_ACCOUNT_TYPE_WITHHOLDING",
	}
	SpecificAccountType_value = map[string]int32{
		"SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED": 0,
		"SPECIFIC_ACCOUNT_TYPE_GENERAL":     1,
		"SPECIFIC_ACCOUNT_TYPE_NOTHING":     2,
		"SPECIFIC_ACCOUNT_TYPE_WITHHOLDING": 3,
	}
)

func (x SpecificAccountType) Enum() *SpecificAccountType {
	p := new(SpecificAccountType)
	*p = x
	return p
}

func (x SpecificAccountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpecificAccountType) Descriptor() protoreflect.EnumDescriptor {
	return file_tachibanapb_tachibana_proto_enumTypes[3].Descriptor()
}

func (SpecificAccountType) Type() protoreflect.EnumType {
	return &file_tachibanapb_tachibana_proto_enumTypes[3]
}

func (x SpecificAccountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpecificAccountType.Descriptor instead.
func (SpecificAccountType) EnumDescriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{3}
}

type CommonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No           int64                  `protobuf:"varint,1,opt,name=No,proto3" json:"No,omitempty"`                                                                   // 送信通番
	SendDate     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=send_date,json=sendDate,proto3" json:"send_date,omitempty"`                                        // 送信日時
	ReceiveDate  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=receive_date,json=receiveDate,proto3" json:"receive_date,omitempty"`                               // 受信日時
	ErrorNo      ErrorNo                `protobuf:"varint,4,opt,name=error_no,json=errorNo,proto3,enum=tachibanapb.ErrorNo" json:"error_no,omitempty"`                 // エラー番号
	ErrorMessage string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                            // エラー文言
	MessageType  MessageType            `protobuf:"varint,6,opt,name=message_type,json=messageType,proto3,enum=tachibanapb.MessageType" json:"message_type,omitempty"` // 機能ID
}

func (x *CommonResponse) Reset() {
	*x = CommonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResponse) ProtoMessage() {}

func (x *CommonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResponse.ProtoReflect.Descriptor instead.
func (*CommonResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResponse) GetNo() int64 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *CommonResponse) GetSendDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SendDate
	}
	return nil
}

func (x *CommonResponse) GetReceiveDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceiveDate
	}
	return nil
}

func (x *CommonResponse) GetErrorNo() ErrorNo {
	if x != nil {
		return x.ErrorNo
	}
	return ErrorNo_ERROR_NO_UNSPECIFIED
}

func (x *CommonResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *CommonResponse) GetMessageType() MessageType {
	if x != nil {
		return x.MessageType
	}
	return MessageType_MESSAGE_TYPE_UNSPECIFIED
}

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // ユーザID
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`           // パスワード
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{1}
}

func (x *LoginRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse            *CommonResponse        `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"`                                                                           // レスポンス共通項目
	ResultCode                string                 `protobuf:"bytes,2,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`                                                                                       // 結果コード
	ResultText                string                 `protobuf:"bytes,3,opt,name=result_text,json=resultText,proto3" json:"result_text,omitempty"`                                                                                       // 結果テキスト
	AccountType               AccountType            `protobuf:"varint,4,opt,name=account_type,json=accountType,proto3,enum=tachibanapb.AccountType" json:"account_type,omitempty"`                                                      // 譲渡益課税区分
	SecondPasswordOmit        bool                   `protobuf:"varint,5,opt,name=second_password_omit,json=secondPasswordOmit,proto3" json:"second_password_omit,omitempty"`                                                            // 暗証番号省略有無C
	LastLoginDatetime         *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_login_datetime,json=lastLoginDatetime,proto3" json:"last_login_datetime,omitempty"`                                                                // 最終ログイン日時
	GeneralAccount            bool                   `protobuf:"varint,7,opt,name=general_account,json=generalAccount,proto3" json:"general_account,omitempty"`                                                                          // 総合口座開設区分
	SafekeepingAccount        bool                   `protobuf:"varint,8,opt,name=safekeeping_account,json=safekeepingAccount,proto3" json:"safekeeping_account,omitempty"`                                                              // 保護預り口座開設区分
	TransferAccount           bool                   `protobuf:"varint,9,opt,name=transfer_account,json=transferAccount,proto3" json:"transfer_account,omitempty"`                                                                       // 振替決済口座開設区分
	ForeignAccount            bool                   `protobuf:"varint,10,opt,name=foreign_account,json=foreignAccount,proto3" json:"foreign_account,omitempty"`                                                                         // 外国口座開設区分
	MrfAccount                bool                   `protobuf:"varint,11,opt,name=mrf_account,json=mrfAccount,proto3" json:"mrf_account,omitempty"`                                                                                     // MRF口座開設区分
	StockSpecificAccount      SpecificAccountType    `protobuf:"varint,12,opt,name=stock_specific_account,json=stockSpecificAccount,proto3,enum=tachibanapb.SpecificAccountType" json:"stock_specific_account,omitempty"`                // 特定口座区分現物
	MarginSpecificAccount     SpecificAccountType    `protobuf:"varint,13,opt,name=margin_specific_account,json=marginSpecificAccount,proto3,enum=tachibanapb.SpecificAccountType" json:"margin_specific_account,omitempty"`             // 特定口座区分信用
	InvestmentSpecificAccount SpecificAccountType    `protobuf:"varint,14,opt,name=investment_specific_account,json=investmentSpecificAccount,proto3,enum=tachibanapb.SpecificAccountType" json:"investment_specific_account,omitempty"` // 特定口座区分投信
	DividendAccount           bool                   `protobuf:"varint,15,opt,name=dividend_account,json=dividendAccount,proto3" json:"dividend_account,omitempty"`                                                                      // 配当特定口座区分
	SpecificAccount           bool                   `protobuf:"varint,16,opt,name=specific_account,json=specificAccount,proto3" json:"specific_account,omitempty"`                                                                      // 特定管理口座開設区分
	MarginAccount             bool                   `protobuf:"varint,17,opt,name=margin_account,json=marginAccount,proto3" json:"margin_account,omitempty"`                                                                            // 信用取引口座開設区分
	FutureOptionAccount       bool                   `protobuf:"varint,18,opt,name=future_option_account,json=futureOptionAccount,proto3" json:"future_option_account,omitempty"`                                                        // 先物OP口座開設区分
	MmfAccount                bool                   `protobuf:"varint,19,opt,name=mmf_account,json=mmfAccount,proto3" json:"mmf_account,omitempty"`                                                                                     // MMF口座開設区分
	ChinaForeignAccount       bool                   `protobuf:"varint,20,opt,name=china_foreign_account,json=chinaForeignAccount,proto3" json:"china_foreign_account,omitempty"`                                                        // 中国F口座開設区分
	FxAccount                 bool                   `protobuf:"varint,21,opt,name=fx_account,json=fxAccount,proto3" json:"fx_account,omitempty"`                                                                                        // 為替保証金口座開設区分
	NisaAccount               bool                   `protobuf:"varint,22,opt,name=nisa_account,json=nisaAccount,proto3" json:"nisa_account,omitempty"`                                                                                  // 非課税口座開設区分
	UnreadDocument            bool                   `protobuf:"varint,23,opt,name=unread_document,json=unreadDocument,proto3" json:"unread_document,omitempty"`                                                                         // 金商法交付書面未読フラグ
	Token                     string                 `protobuf:"bytes,24,opt,name=token,proto3" json:"token,omitempty"`                                                                                                                  // トークン
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{2}
}

func (x *LoginResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *LoginResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *LoginResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

func (x *LoginResponse) GetAccountType() AccountType {
	if x != nil {
		return x.AccountType
	}
	return AccountType_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetSecondPasswordOmit() bool {
	if x != nil {
		return x.SecondPasswordOmit
	}
	return false
}

func (x *LoginResponse) GetLastLoginDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastLoginDatetime
	}
	return nil
}

func (x *LoginResponse) GetGeneralAccount() bool {
	if x != nil {
		return x.GeneralAccount
	}
	return false
}

func (x *LoginResponse) GetSafekeepingAccount() bool {
	if x != nil {
		return x.SafekeepingAccount
	}
	return false
}

func (x *LoginResponse) GetTransferAccount() bool {
	if x != nil {
		return x.TransferAccount
	}
	return false
}

func (x *LoginResponse) GetForeignAccount() bool {
	if x != nil {
		return x.ForeignAccount
	}
	return false
}

func (x *LoginResponse) GetMrfAccount() bool {
	if x != nil {
		return x.MrfAccount
	}
	return false
}

func (x *LoginResponse) GetStockSpecificAccount() SpecificAccountType {
	if x != nil {
		return x.StockSpecificAccount
	}
	return SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetMarginSpecificAccount() SpecificAccountType {
	if x != nil {
		return x.MarginSpecificAccount
	}
	return SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetInvestmentSpecificAccount() SpecificAccountType {
	if x != nil {
		return x.InvestmentSpecificAccount
	}
	return SpecificAccountType_SPECIFIC_ACCOUNT_TYPE_UNSPECIFIED
}

func (x *LoginResponse) GetDividendAccount() bool {
	if x != nil {
		return x.DividendAccount
	}
	return false
}

func (x *LoginResponse) GetSpecificAccount() bool {
	if x != nil {
		return x.SpecificAccount
	}
	return false
}

func (x *LoginResponse) GetMarginAccount() bool {
	if x != nil {
		return x.MarginAccount
	}
	return false
}

func (x *LoginResponse) GetFutureOptionAccount() bool {
	if x != nil {
		return x.FutureOptionAccount
	}
	return false
}

func (x *LoginResponse) GetMmfAccount() bool {
	if x != nil {
		return x.MmfAccount
	}
	return false
}

func (x *LoginResponse) GetChinaForeignAccount() bool {
	if x != nil {
		return x.ChinaForeignAccount
	}
	return false
}

func (x *LoginResponse) GetFxAccount() bool {
	if x != nil {
		return x.FxAccount
	}
	return false
}

func (x *LoginResponse) GetNisaAccount() bool {
	if x != nil {
		return x.NisaAccount
	}
	return false
}

func (x *LoginResponse) GetUnreadDocument() bool {
	if x != nil {
		return x.UnreadDocument
	}
	return false
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type LogoutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LogoutRequest) Reset() {
	*x = LogoutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutRequest) ProtoMessage() {}

func (x *LogoutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutRequest.ProtoReflect.Descriptor instead.
func (*LogoutRequest) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{3}
}

type LogoutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommonResponse *CommonResponse `protobuf:"bytes,1,opt,name=common_response,json=commonResponse,proto3" json:"common_response,omitempty"` // レスポンス共通項目
	ResultCode     string          `protobuf:"bytes,2,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`             // 結果コード
	ResultText     string          `protobuf:"bytes,3,opt,name=result_text,json=resultText,proto3" json:"result_text,omitempty"`             // 結果テキスト
}

func (x *LogoutResponse) Reset() {
	*x = LogoutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tachibanapb_tachibana_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogoutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogoutResponse) ProtoMessage() {}

func (x *LogoutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tachibanapb_tachibana_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogoutResponse.ProtoReflect.Descriptor instead.
func (*LogoutResponse) Descriptor() ([]byte, []int) {
	return file_tachibanapb_tachibana_proto_rawDescGZIP(), []int{4}
}

func (x *LogoutResponse) GetCommonResponse() *CommonResponse {
	if x != nil {
		return x.CommonResponse
	}
	return nil
}

func (x *LogoutResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *LogoutResponse) GetResultText() string {
	if x != nil {
		return x.ResultText
	}
	return ""
}

var File_tachibanapb_tachibana_proto protoreflect.FileDescriptor

var file_tachibanapb_tachibana_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2f, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x0e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x4e, 0x6f, 0x12, 0x37,
	0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f,
	0x6e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x52, 0x07,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0c,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xbc,
	0x09, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x6f, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x4f, 0x6d, 0x69, 0x74, 0x12, 0x4a, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13,
	0x73, 0x61, 0x66, 0x65, 0x6b, 0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x73, 0x61, 0x66, 0x65, 0x6b,
	0x65, 0x65, 0x70, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x72, 0x66, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x72, 0x66, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62,
	0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x17, 0x6d, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61,
	0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x6d,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x1b, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x19, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x64, 0x69, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6d, 0x66, 0x5f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x6d,
	0x66, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x68, 0x69, 0x6e,
	0x61, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x68, 0x69, 0x6e, 0x61, 0x46, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x78, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x66, 0x78, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x69, 0x73, 0x61, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6e, 0x69, 0x73, 0x61, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x0f, 0x0a,
	0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x98,
	0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x78, 0x74, 0x2a, 0xd8, 0x02, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
	0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x5f, 0x50,
	0x52, 0x4f, 0x42, 0x4c, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4e, 0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12, 0x1d,
	0x0a, 0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x45, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x04, 0x12, 0x1e, 0x0a,
	0x1a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e,
	0x4f, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x09, 0x12,
	0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x53, 0x10, 0x0b, 0x2a, 0xe2, 0x0a, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53,
	0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x50,
	0x4f, 0x4e, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x57, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x07, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x09, 0x12, 0x1d,
	0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x0a, 0x12, 0x1e, 0x0a,
	0x1a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x52, 0x47, 0x49, 0x4e, 0x5f, 0x57, 0x41, 0x4c, 0x4c, 0x45, 0x54, 0x10, 0x0b, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x1b,
	0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x0d, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41,
	0x52, 0x59, 0x10, 0x0f, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x52, 0x44, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x45, 0x4e, 0x54, 0x52,
	0x59, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x11, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x47, 0x49,
	0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x10, 0x12,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x13, 0x12,
	0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x14,
	0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f,
	0x44, 0x41, 0x59, 0x10, 0x16, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x49, 0x43, 0x4b, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50,
	0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x18, 0x12, 0x2d, 0x0a, 0x29, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x19, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x1a, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1b, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b,
	0x5f, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x1c, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x52,
	0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1d, 0x12, 0x24, 0x0a, 0x20, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x46, 0x55, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10,
	0x1e, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d,
	0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45, 0x53, 0x53, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x49,
	0x54, 0x55, 0x54, 0x45, 0x10, 0x21, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x22, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e,
	0x10, 0x23, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x24, 0x12, 0x1c, 0x0a, 0x18,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x25, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x26, 0x2a, 0x77, 0x0a, 0x0b, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x43, 0x43, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x41,
	0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x49, 0x53, 0x41,
	0x10, 0x03, 0x2a, 0xa9, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x43, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x48, 0x4f, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x32, 0x95,
	0x01, 0x0a, 0x10, 0x54, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x19, 0x2e, 0x74,
	0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x74, 0x61, 0x63, 0x68, 0x69, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x2e,
	0x74, 0x61, 0x63, 0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x63, 0x68,
	0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x3b, 0x74, 0x61, 0x63,
	0x68, 0x69, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tachibanapb_tachibana_proto_rawDescOnce sync.Once
	file_tachibanapb_tachibana_proto_rawDescData = file_tachibanapb_tachibana_proto_rawDesc
)

func file_tachibanapb_tachibana_proto_rawDescGZIP() []byte {
	file_tachibanapb_tachibana_proto_rawDescOnce.Do(func() {
		file_tachibanapb_tachibana_proto_rawDescData = protoimpl.X.CompressGZIP(file_tachibanapb_tachibana_proto_rawDescData)
	})
	return file_tachibanapb_tachibana_proto_rawDescData
}

var file_tachibanapb_tachibana_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_tachibanapb_tachibana_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tachibanapb_tachibana_proto_goTypes = []interface{}{
	(ErrorNo)(0),                  // 0: tachibanapb.ErrorNo
	(MessageType)(0),              // 1: tachibanapb.MessageType
	(AccountType)(0),              // 2: tachibanapb.AccountType
	(SpecificAccountType)(0),      // 3: tachibanapb.SpecificAccountType
	(*CommonResponse)(nil),        // 4: tachibanapb.CommonResponse
	(*LoginRequest)(nil),          // 5: tachibanapb.LoginRequest
	(*LoginResponse)(nil),         // 6: tachibanapb.LoginResponse
	(*LogoutRequest)(nil),         // 7: tachibanapb.LogoutRequest
	(*LogoutResponse)(nil),        // 8: tachibanapb.LogoutResponse
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
}
var file_tachibanapb_tachibana_proto_depIdxs = []int32{
	9,  // 0: tachibanapb.CommonResponse.send_date:type_name -> google.protobuf.Timestamp
	9,  // 1: tachibanapb.CommonResponse.receive_date:type_name -> google.protobuf.Timestamp
	0,  // 2: tachibanapb.CommonResponse.error_no:type_name -> tachibanapb.ErrorNo
	1,  // 3: tachibanapb.CommonResponse.message_type:type_name -> tachibanapb.MessageType
	4,  // 4: tachibanapb.LoginResponse.common_response:type_name -> tachibanapb.CommonResponse
	2,  // 5: tachibanapb.LoginResponse.account_type:type_name -> tachibanapb.AccountType
	9,  // 6: tachibanapb.LoginResponse.last_login_datetime:type_name -> google.protobuf.Timestamp
	3,  // 7: tachibanapb.LoginResponse.stock_specific_account:type_name -> tachibanapb.SpecificAccountType
	3,  // 8: tachibanapb.LoginResponse.margin_specific_account:type_name -> tachibanapb.SpecificAccountType
	3,  // 9: tachibanapb.LoginResponse.investment_specific_account:type_name -> tachibanapb.SpecificAccountType
	4,  // 10: tachibanapb.LogoutResponse.common_response:type_name -> tachibanapb.CommonResponse
	5,  // 11: tachibanapb.TachibanaService.Login:input_type -> tachibanapb.LoginRequest
	7,  // 12: tachibanapb.TachibanaService.Logout:input_type -> tachibanapb.LogoutRequest
	6,  // 13: tachibanapb.TachibanaService.Login:output_type -> tachibanapb.LoginResponse
	8,  // 14: tachibanapb.TachibanaService.Logout:output_type -> tachibanapb.LogoutResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_tachibanapb_tachibana_proto_init() }
func file_tachibanapb_tachibana_proto_init() {
	if File_tachibanapb_tachibana_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tachibanapb_tachibana_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tachibanapb_tachibana_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogoutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tachibanapb_tachibana_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tachibanapb_tachibana_proto_goTypes,
		DependencyIndexes: file_tachibanapb_tachibana_proto_depIdxs,
		EnumInfos:         file_tachibanapb_tachibana_proto_enumTypes,
		MessageInfos:      file_tachibanapb_tachibana_proto_msgTypes,
	}.Build()
	File_tachibanapb_tachibana_proto = out.File
	file_tachibanapb_tachibana_proto_rawDesc = nil
	file_tachibanapb_tachibana_proto_goTypes = nil
	file_tachibanapb_tachibana_proto_depIdxs = nil
}
